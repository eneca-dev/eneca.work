const { makeWorksectionRequest } = require('./test-worksection');
require('dotenv').config({ path: './ws.env' });

async function testDetailedAPI() {
    console.log('üî¨ –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ Worksection API');
    console.log('==========================================');
    console.log('');

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        console.log('üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        const activeProjects = await makeWorksectionRequest('get_projects', { 
            status: 'active' 
        });
        
        if (activeProjects.statusCode === 200 && activeProjects.data.status === 'ok') {
            const projects = activeProjects.data.data || [];
            const active = projects.filter(p => p.status === 'active');
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${active.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ ${projects.length} –æ–±—â–∏—Ö`);
            
            if (active.length > 0) {
                console.log('   –ü–µ—Ä–≤—ã–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:');
                active.slice(0, 5).forEach((project, index) => {
                    console.log(`   ${index + 1}. ${project.name}`);
                    console.log(`      ID: ${project.id}, –°—Ç–∞—Ç—É—Å: ${project.status}`);
                    console.log(`      –°–æ–∑–¥–∞–Ω: ${project.date_added}`);
                    console.log('');
                });
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                const firstProject = active[0];
                console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${firstProject.name}"...`);
                
                const tasks = await makeWorksectionRequest('get_tasks', {
                    id_project: firstProject.id
                });
                
                if (tasks.statusCode === 200 && tasks.data.status === 'ok') {
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tasks.data.data?.length || 0} –∑–∞–¥–∞—á`);
                    
                    if (tasks.data.data && tasks.data.data.length > 0) {
                        console.log('   –ü–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏:');
                        tasks.data.data.slice(0, 3).forEach((task, index) => {
                            console.log(`   ${index + 1}. ${task.name}`);
                            console.log(`      ID: ${task.id}, –°—Ç–∞—Ç—É—Å: ${task.status}`);
                            console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${task.date_added}`);
                            console.log(`      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                        });
                    }
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', tasks.data);
                }
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', activeProjects.data);
        }
        
        console.log('');
        
        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥/–≥—Ä—É–ø–ø
        console.log('üë• –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥...');
        const teams = await makeWorksectionRequest('get_teams');
        
        if (teams.statusCode === 200) {
            if (teams.data.status === 'ok') {
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${teams.data.data?.length || 0} –∫–æ–º–∞–Ω–¥`);
                if (teams.data.data && teams.data.data.length > 0) {
                    teams.data.data.slice(0, 3).forEach((team, index) => {
                        console.log(`   ${index + 1}. ${team.name || team.title} (ID: ${team.id})`);
                    });
                }
            } else {
                console.log('‚ùå –ú–µ—Ç–æ–¥ get_teams –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', teams.data.message);
            }
        }
        
        console.log('');
        
        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
        console.log('üë§ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...');
        if (activeProjects.data.data && activeProjects.data.data.length > 0) {
            const firstProject = activeProjects.data.data.find(p => p.status === 'active') || activeProjects.data.data[0];
            
            const projectMembers = await makeWorksectionRequest('get_project_members', {
                id_project: firstProject.id
            });
            
            if (projectMembers.statusCode === 200) {
                if (projectMembers.data.status === 'ok') {
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "${firstProject.name}"`);
                    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${projectMembers.data.data?.length || 0}`);
                    
                    if (projectMembers.data.data && projectMembers.data.data.length > 0) {
                        projectMembers.data.data.slice(0, 5).forEach((member, index) => {
                            console.log(`   ${index + 1}. ${member.name || member.email}`);
                            console.log(`      Email: ${member.email}`);
                            console.log(`      –†–æ–ª—å: ${member.user_role || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                        });
                    }
                } else {
                    console.log('‚ùå –ú–µ—Ç–æ–¥ get_project_members –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', projectMembers.data.message);
                }
            }
        }
        
        console.log('');
        console.log('üéØ –†–µ–∑—é–º–µ:');
        console.log('   ‚úÖ get_projects - —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ');
        console.log('   ‚úÖ get_tasks - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞');
        console.log('   ‚ùå get_account_info - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        console.log('   ‚ùå get_members - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        console.log('   ‚ùì get_teams - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å');
        console.log('   ‚ùì get_project_members - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å');

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testDetailedAPI(); 