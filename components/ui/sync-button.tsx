import React from 'react'
import { RefreshCw, FileText, AlertCircle, CheckCircle } from 'lucide-react'
import { cn } from '@/lib/utils'
import { useWorksectionSync } from '@/hooks/useWorksectionSync'
import { Modal, ModalButton, useModalState } from '@/components/modals'

interface SyncButtonProps {
  className?: string
  size?: 'sm' | 'md' | 'lg'
  variant?: 'default' | 'outline' | 'ghost'
  showText?: boolean
  onSyncComplete?: () => void
  theme?: 'light' | 'dark'
}

export function SyncButton({ 
  className,
  size = 'md',
  variant = 'default',
  showText = true,
  onSyncComplete,
  theme = 'light'
}: SyncButtonProps) {
  const { isSyncing, syncStatus, syncWithWorksection, lastSyncResult } = useWorksectionSync()
  const { isOpen, openModal, closeModal } = useModalState()

  const handleSync = async () => {
    try {
      const result = await syncWithWorksection()
      
      if (result) {
        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º
        openModal()
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        onSyncComplete?.()
      }
      
    } catch (error) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
      openModal()
    }
  }

  const sizeClasses = {
    sm: 'px-2 py-1 text-xs',
    md: 'px-3 py-1.5 text-xs',
    lg: 'px-4 py-2 text-sm'
  }

  const iconSizes = {
    sm: 12,
    md: 14,
    lg: 16
  }

  const getVariantClasses = () => {
    const baseClasses = "flex items-center gap-1 rounded-md font-medium transition-all duration-200 disabled:cursor-not-allowed"
    
    if (syncStatus === 'success' && !isSyncing) {
      return `${baseClasses} bg-green-100 text-green-700 border border-green-200`
    }
    
    if (syncStatus === 'error' && !isSyncing) {
      return `${baseClasses} bg-red-100 text-red-700 border border-red-200`
    }
    
    if (isSyncing) {
      return `${baseClasses} ${
        theme === 'dark'
          ? "bg-blue-500/10 text-blue-400 border border-blue-500/20"
          : "bg-blue-25 text-blue-500 border border-blue-100"
      }`
    }
    
    // –û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    switch (variant) {
      case 'outline':
        return `${baseClasses} border ${
          theme === 'dark'
            ? "border-blue-500/30 text-blue-400 hover:bg-blue-500/10"
            : "border-blue-200 text-blue-600 hover:bg-blue-50"
        }`
      case 'ghost':
        return `${baseClasses} ${
          theme === 'dark'
            ? "text-blue-400 hover:bg-blue-500/10"
            : "text-blue-600 hover:bg-blue-50"
        }`
      default:
        return `${baseClasses} ${
          theme === 'dark'
            ? "bg-blue-500/20 text-blue-400 hover:bg-blue-500/30 border border-blue-500/30"
            : "bg-blue-50 text-blue-600 hover:bg-blue-100 border border-blue-200"
        }`
    }
  }

  const formatDuration = (ms: number): string => {
    const seconds = Math.floor(ms / 1000)
    const minutes = Math.floor(seconds / 60)
    if (minutes > 0) {
      return `${minutes}–º ${seconds % 60}—Å`
    }
    return `${seconds}—Å`
  }

  const renderSyncModal = () => {
    if (!lastSyncResult) return null

    const { success, summary, detailed_report, duration } = lastSyncResult

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ summary.total
    const totalCreated = summary?.total?.created || 0
    const totalUpdated = summary?.total?.updated || 0
    const totalUnchanged = summary?.total?.unchanged || 0
    const totalErrors = summary?.total?.errors || 0
    const totalSkipped = summary?.total?.skipped || 0

    // –ï—Å–ª–∏ –Ω–µ—Ç detailed_report, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const assignmentSuccess = detailed_report?.assignment_summary?.successful_assignments || summary?.assignments?.successful || 0
    const assignmentTotal = detailed_report?.assignment_summary?.total_assignments_attempted || summary?.assignments?.attempted || 0
    const assignmentRate = detailed_report?.assignment_summary?.success_rate || (assignmentTotal > 0 ? ((assignmentSuccess / assignmentTotal) * 100).toFixed(1) : '0.0')

    return (
      <Modal isOpen={isOpen} onClose={closeModal} size="xl">
        <Modal.Header 
          title={
            <div className="flex items-center gap-2">
              {success ? (
                <CheckCircle className="text-green-600" size={20} />
              ) : (
                <AlertCircle className="text-red-600" size={20} />
              )}
              –û—Ç—á—ë—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            </div>
          }
          subtitle={detailed_report?.sync_summary?.timestamp ? `–ó–∞–≤–µ—Ä—à–µ–Ω–æ ${new Date(detailed_report.sync_summary.timestamp).toLocaleString('ru-RU')}` : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'}
        />
        
        <Modal.Body>
          <div className="space-y-4">
            {/* –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="bg-slate-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <h4 className="font-medium text-slate-800">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</h4>
                <div className="text-sm text-slate-600">
                  {detailed_report?.sync_summary?.duration_readable || (duration ? formatDuration(duration) : '–ù/–î')}
                </div>
              </div>
              <div className="grid grid-cols-4 gap-4 mt-3">
                <div className="text-center">
                  <div className="text-xl font-bold text-green-600">{totalCreated}</div>
                  <div className="text-xs text-slate-600">–°–æ–∑–¥–∞–Ω–æ</div>
                </div>
                <div className="text-center">
                  <div className="text-xl font-bold text-blue-600">{totalUpdated}</div>
                  <div className="text-xs text-slate-600">–û–±–Ω–æ–≤–ª–µ–Ω–æ</div>
                </div>
                <div className="text-center">
                  <div className="text-xl font-bold text-slate-600">{totalUnchanged}</div>
                  <div className="text-xs text-slate-600">–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π</div>
                </div>
                <div className="text-center">
                  <div className="text-xl font-bold text-red-600">{totalErrors}</div>
                  <div className="text-xs text-slate-600">–û—à–∏–±–∫–∏</div>
                </div>
              </div>
              {totalSkipped > 0 && (
                <div className="mt-3 text-center">
                  <div className="text-sm text-amber-600">
                    üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: <span className="font-semibold">{totalSkipped}</span> (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "!")
                  </div>
                </div>
              )}
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π */}
            {assignmentTotal > 0 && (
              <div className="bg-blue-50 rounded-lg p-4">
                <h4 className="font-medium text-blue-800 mb-2">üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö</h4>
                <div className="flex items-center justify-between">
                  <div className="text-sm text-blue-700">
                    –£—Å–ø–µ—à–Ω—ã—Ö: <span className="font-semibold">{assignmentSuccess}</span> –∏–∑ <span className="font-semibold">{assignmentTotal}</span>
                  </div>
                  <div className="text-sm font-semibold text-blue-700">
                    {assignmentRate}% —É—Å–ø–µ—Ö–∞
                  </div>
                </div>
              </div>
            )}

            {/* –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å) */}
            {detailed_report?.all_actions && detailed_report.all_actions.length > 0 && (totalCreated > 0 || totalUpdated > 0 || totalErrors > 0) && (
              <div className="bg-slate-50 rounded-lg p-4">
                <h4 className="font-medium text-slate-800 mb-3">üìã –î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π</h4>
                <div className="bg-white rounded p-3 max-h-48 overflow-y-auto border">
                  <div className="text-sm space-y-1">
                    {detailed_report.all_actions.filter(action => 
                      action.action === 'created' || 
                      action.action === 'updated' || 
                      action.action === 'error'
                    ).slice(-15).map((action, index) => (
                      <div key={index} className="font-mono text-slate-700 text-xs">
                        {action.action === 'created' && 'üÜï –°–æ–∑–¥–∞–Ω'}
                        {action.action === 'updated' && 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω'}
                        {action.action === 'error' && '‚ùå –û—à–∏–±–∫–∞'}
                        {' '}
                        {action.type === 'project' && 'üìã –ø—Ä–æ–µ–∫—Ç'}
                        {action.type === 'stage' && 'üéØ —Å—Ç–∞–¥–∏—è'}
                        {action.type === 'object' && 'üì¶ –æ–±—ä–µ–∫—Ç'}
                        {action.type === 'section' && 'üìë —Ä–∞–∑–¥–µ–ª'}
                        {' '}
                        <span className="font-semibold">{action.name}</span>
                        {action.responsible_assigned && ' (–Ω–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π)'}
                        {action.manager_assigned && ' (–Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä)'}
                        {action.error && ` - ${action.error}`}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é */}
            {detailed_report?.user_search_analysis?.recommendations && detailed_report.user_search_analysis.recommendations.length > 0 && (
              <div className="bg-amber-50 rounded-lg p-4">
                <h4 className="font-medium text-amber-800 mb-2 flex items-center gap-2">
                  <AlertCircle size={16} />
                  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                </h4>
                <div className="space-y-1">
                  {detailed_report.user_search_analysis.recommendations.map((rec, index) => (
                    <div key={index} className="text-sm text-amber-700">
                      ‚Ä¢ {rec}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </Modal.Body>
        
        <Modal.Footer>
          <ModalButton variant="cancel" onClick={closeModal}>
            –ó–∞–∫—Ä—ã—Ç—å
          </ModalButton>
          {(totalCreated > 0 || totalUpdated > 0) && (
            <ModalButton 
              variant="success" 
              onClick={() => {
                closeModal()
                window.location.reload()
              }}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </ModalButton>
          )}
        </Modal.Footer>
      </Modal>
    )
  }

  return (
    <>
      <button
        onClick={handleSync}
        disabled={isSyncing}
        title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Worksection"
        className={cn(
          getVariantClasses(),
          sizeClasses[size],
          className
        )}
      >
        <RefreshCw 
          size={iconSizes[size]} 
          className={cn(
            isSyncing && "animate-spin"
          )} 
        />
        {showText && (
          isSyncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Worksection'
        )}
      </button>
      
      {renderSyncModal()}
    </>
  )
} 