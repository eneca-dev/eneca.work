import React from 'react'
import { RefreshCw } from 'lucide-react'
import { cn } from '@/lib/utils'
import { useWorksectionSync } from '@/hooks/useWorksectionSync'

interface SyncButtonProps {
  className?: string
  size?: 'sm' | 'md' | 'lg'
  variant?: 'default' | 'outline' | 'ghost'
  showText?: boolean
  onSyncComplete?: () => void
  theme?: 'light' | 'dark'
}

export function SyncButton({ 
  className,
  size = 'md',
  variant = 'default',
  showText = true,
  onSyncComplete,
  theme = 'light'
}: SyncButtonProps) {
  const { isSyncing, syncStatus, syncWithWorksection } = useWorksectionSync()

  const handleSync = async () => {
    try {
      const result = await syncWithWorksection()
      
      if (result) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (window.confirm(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: ${result.summary.created}\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.summary.updated}\n‚Ä¢ –û—à–∏–±–æ–∫: ${result.summary.errors}\n‚Ä¢ –í—Ä–µ–º—è: ${result.duration} —Å–µ–∫\n\n–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö?`)) {
          window.location.reload()
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        onSyncComplete?.()
      }
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      alert(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Worksection:\n\n${errorMessage}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ API Worksection\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É`)
    }
  }

  const sizeClasses = {
    sm: 'px-2 py-1 text-xs',
    md: 'px-3 py-1.5 text-xs',
    lg: 'px-4 py-2 text-sm'
  }

  const iconSizes = {
    sm: 12,
    md: 14,
    lg: 16
  }

  const getVariantClasses = () => {
    const baseClasses = "flex items-center gap-1 rounded-md font-medium transition-all duration-200 disabled:cursor-not-allowed"
    
    if (syncStatus === 'success' && !isSyncing) {
      return `${baseClasses} bg-green-100 text-green-700 border border-green-200`
    }
    
    if (syncStatus === 'error' && !isSyncing) {
      return `${baseClasses} bg-red-100 text-red-700 border border-red-200`
    }
    
    if (isSyncing) {
      return `${baseClasses} ${
        theme === 'dark'
          ? "bg-blue-500/10 text-blue-400 border border-blue-500/20"
          : "bg-blue-25 text-blue-500 border border-blue-100"
      }`
    }
    
    // –û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    switch (variant) {
      case 'outline':
        return `${baseClasses} border ${
          theme === 'dark'
            ? "border-blue-500/30 text-blue-400 hover:bg-blue-500/10"
            : "border-blue-200 text-blue-600 hover:bg-blue-50"
        }`
      case 'ghost':
        return `${baseClasses} ${
          theme === 'dark'
            ? "text-blue-400 hover:bg-blue-500/10"
            : "text-blue-600 hover:bg-blue-50"
        }`
      default:
        return `${baseClasses} ${
          theme === 'dark'
            ? "bg-blue-500/20 text-blue-400 hover:bg-blue-500/30 border border-blue-500/30"
            : "bg-blue-50 text-blue-600 hover:bg-blue-100 border border-blue-200"
        }`
    }
  }

  return (
    <button
      onClick={handleSync}
      disabled={isSyncing}
      title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Worksection"
      className={cn(
        getVariantClasses(),
        sizeClasses[size],
        className
      )}
    >
      <RefreshCw 
        size={iconSizes[size]} 
        className={cn(
          isSyncing && "animate-spin"
        )} 
      />
      {showText && (
        isSyncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Worksection'
      )}
    </button>
  )
} 