import { create } from "zustand"
import { persist } from "zustand/middleware"
import { createClient } from "@/utils/supabase/client"
import { RealtimeChannel } from "@supabase/supabase-js"
import React from "react"
import { 
  getUserNotifications, 
  getUnreadNotificationsCount, 
  markNotificationAsRead, 
  markAllNotificationsAsRead,
  getRecentNotifications,
  UserNotificationWithNotification 
} from "@/modules/notifications/api/notifications"
import { 
  generateAssignmentNotificationText,
  generateAnnouncementNotificationText 
} from "@/types/notifications"

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
export interface DatabaseNotification {
  id: string
  entity_type_id: string
  payload: Record<string, any>
  rendered_text: string | null
  created_at: string
  updated_at: string
}

export interface DatabaseUserNotification {
  id: string
  notification_id: string
  user_id: string
  is_read: boolean
  created_at: string
}

export interface DatabaseEntityType {
  id: string
  entity_name: string
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è UI
export interface Notification {
  id: string // ID –∏–∑ user_notifications
  notificationId: string // ID –∏–∑ notifications
  title: string
  message: string
  createdAt: Date
  isRead: boolean
  type?: "info" | "warning" | "error" | "success"
  payload?: Record<string, any>
  entityType?: string
}

interface NotificationsState {
  notifications: Notification[]
  unreadCount: number
  isLoading: boolean
  error: string | null
  realtimeChannel: RealtimeChannel | null
  currentUserId: string | null
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  setNotifications: (notifications: Notification[]) => void
  addNotification: (notification: Notification) => void
  markAsRead: (userNotificationId: string) => void
  markAsReadInDB: (userNotificationId: string) => Promise<void>
  markAllAsRead: () => void
  markAllAsReadInDB: () => Promise<void>
  removeNotification: (id: string) => void
  clearAll: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  setLoading: (loading: boolean) => void
  setError: (error: string | null) => void
  setCurrentUserId: (userId: string | null) => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è Realtime
  initializeRealtime: () => void
  subscribeToNotifications: () => void
  unsubscribeFromNotifications: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  fetchNotifications: () => Promise<void>
  fetchUnreadCount: () => Promise<void>
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Realtime
  handleNewNotification: (userNotification: DatabaseUserNotification) => void
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –≤ UI —Ñ–æ—Ä–º–∞—Ç
const transformNotificationData = (un: UserNotificationWithNotification): Notification => {
  const notification = un.notifications
  const entityType = notification?.entity_types?.entity_name || 'unknown'
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
  const payload = notification?.payload || {}
  let title = '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
  let message = '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
    entityType,
    payload,
    userNotificationId: un.id,
    notificationId: un.notification_id,
    fullNotification: notification
  })
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ª–µ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if (entityType === 'assignment' || entityType === 'assignments') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ payload.assignment –∏–ª–∏ –ø—Ä—è–º–æ –≤ payload
    const assignmentData = payload.assignment || {
      project: payload.project,
      from_section: payload.from_section,
      amount: Number(payload.amount) || payload.amount
    }
    
    if (assignmentData.project && assignmentData.from_section && assignmentData.amount) {
      const generated = generateAssignmentNotificationText(assignmentData)
      title = generated.title
      message = generated.message
    } else {
      // Fallback –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
      title = payload.title || payload.project || '–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏–π'
      message = payload.message || `–í–∞–º –ø–µ—Ä–µ–¥–∞–Ω–æ ${payload.amount || '–Ω–µ—Å–∫–æ–ª—å–∫–æ'} –∑–∞–¥–∞–Ω–∏–π`
    }
  } else if (entityType === 'announcement' || entityType === 'announcements') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ payload.announcement –∏–ª–∏ –ø—Ä—è–º–æ –≤ payload
    const announcementData = payload.announcement || {
      user_name: payload.user_name,
      title: payload.title,
      body: payload.body
    }
    
    if (announcementData.user_name && announcementData.title && announcementData.body) {
      const generated = generateAnnouncementNotificationText(announcementData)
      title = generated.title
      message = generated.message
    } else {
      // Fallback –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      title = payload.title || '–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'
      message = payload.message || payload.body || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
    }
  } else {
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º payload –∏–ª–∏ fallback
    title = payload.title || notification?.rendered_text || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    message = payload.message || payload.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
  }
  
  return {
    id: un.id,
    notificationId: un.notification_id,
    title,
    message,
    createdAt: new Date(un.created_at),
    isRead: un.is_read,
    type: payload.type || 'info',
    payload: notification?.payload,
    entityType,
  }
}

export const useNotificationsStore = create<NotificationsState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      notifications: [],
      unreadCount: 0,
      isLoading: false,
      error: null,
      realtimeChannel: null,
      currentUserId: null,

      // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
      setNotifications: (notifications) => {
        const unreadCount = notifications.filter(n => !n.isRead).length
        set({ notifications, unreadCount })
      },

      addNotification: (notification) => {
        set((state) => {
          const newNotifications = [notification, ...state.notifications]
          const unreadCount = newNotifications.filter(n => !n.isRead).length
          return { notifications: newNotifications, unreadCount }
        })
      },

      markAsRead: (userNotificationId) => {
        set((state) => {
          const notification = state.notifications.find((n) => n.id === userNotificationId)
          if (!notification || notification.isRead) return state

          const updatedNotifications = state.notifications.map((n) => 
            n.id === userNotificationId ? { ...n, isRead: true } : n
          )
          
          return {
            notifications: updatedNotifications,
            unreadCount: Math.max(0, state.unreadCount - 1),
          }
        })
      },

      markAsReadInDB: async (userNotificationId) => {
        try {
          const state = get()
          if (!state.currentUserId) return
          
          await markNotificationAsRead(state.currentUserId, userNotificationId)
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
          get().setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        }
      },

      markAllAsRead: () => {
        set((state) => ({
          notifications: state.notifications.map((n) => ({ ...n, isRead: true })),
          unreadCount: 0,
        }))
      },

      markAllAsReadInDB: async () => {
        try {
          const state = get()
          if (!state.currentUserId) return
          
          await markAllNotificationsAsRead(state.currentUserId)
          get().fetchUnreadCount() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
          get().setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        }
      },

      removeNotification: (id) => {
        set((state) => {
          const notification = state.notifications.find((n) => n.id === id)
          const wasUnread = notification && !notification.isRead

          return {
            notifications: state.notifications.filter((n) => n.id !== id),
            unreadCount: wasUnread ? Math.max(0, state.unreadCount - 1) : state.unreadCount,
          }
        })
      },

      clearAll: () => {
        set({ notifications: [], unreadCount: 0 })
      },

      // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setLoading: (loading) => set({ isLoading: loading }),
      setError: (error) => set({ error }),
      setCurrentUserId: (userId) => set({ currentUserId: userId }),

      // –ú–µ—Ç–æ–¥—ã –¥–ª—è Realtime
      initializeRealtime: () => {
        const state = get()
        if (!state.currentUserId) {
          console.warn('–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
          return
        }
        
        state.subscribeToNotifications()
      },

      subscribeToNotifications: () => {
        const state = get()
        if (!state.currentUserId) return

        const supabase = createClient()
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        if (state.realtimeChannel) {
          state.realtimeChannel.unsubscribe()
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
        const channel = supabase
          .channel('realtime:user_notifications')
          .on(
            'postgres_changes',
            {
              event: 'INSERT',
              schema: 'public',
              table: 'user_notifications',
              filter: `user_id=eq.${state.currentUserId}`
            },
            (payload) => {
              console.log('–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', payload)
              state.handleNewNotification(payload.new as DatabaseUserNotification)
            }
          )
          .subscribe()

        set({ realtimeChannel: channel })
      },

      unsubscribeFromNotifications: () => {
        const state = get()
        if (state.realtimeChannel) {
          state.realtimeChannel.unsubscribe()
          set({ realtimeChannel: null })
        }
      },

      // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      fetchNotifications: async () => {
        const state = get()
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', state.currentUserId)
        
        if (!state.currentUserId) {
          console.warn('‚ö†Ô∏è –ù–µ—Ç currentUserId –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
          return
        }

        try {
          set({ isLoading: true, error: null })
          
          console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
          const { notifications: userNotifications } = await getUserNotifications(state.currentUserId)
          console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã:', userNotifications?.length || 0)
          
          const unreadCount = await getUnreadNotificationsCount(state.currentUserId)
          console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', unreadCount)

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç UI
          const notifications: Notification[] = userNotifications.map(transformNotificationData)
          console.log('‚ú® –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifications.length)

          set({ notifications, unreadCount })
          console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å—Ç–æ—Ä')
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
          set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
        } finally {
          set({ isLoading: false })
        }
      },

      fetchUnreadCount: async () => {
        const state = get()
        if (!state.currentUserId) return

        try {
          const unreadCount = await getUnreadNotificationsCount(state.currentUserId)
          set({ unreadCount })
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
          set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
        }
      },

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Realtime
      handleNewNotification: async (userNotification: DatabaseUserNotification) => {
        try {
          const supabase = createClient()
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
          const { data: fullNotification, error } = await supabase
            .from('user_notifications')
            .select(`
              id,
              notification_id,
              user_id,
              is_read,
              created_at,
              notifications (
                id,
                entity_type_id,
                payload,
                rendered_text,
                created_at,
                updated_at,
                entity_types (
                  id,
                  entity_name
                )
              )
            `)
            .eq('id', userNotification.id)
            .single()

          if (error || !fullNotification) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:', error)
            return
          }

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç UI
          const newNotification = transformNotificationData(fullNotification as any)
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ store
          get().addNotification(newNotification)
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
        }
      },
    }),
    {
      name: "notifications-storage-v3",
      // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Realtime –∫–∞–Ω–∞–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      partialize: (state) => ({
        notifications: state.notifications,
        unreadCount: state.unreadCount,
        currentUserId: state.currentUserId,
      }),
    },
  ),
)

// –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const useNotifications = () => {
  const store = useNotificationsStore()
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Realtime –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  React.useEffect(() => {
    if (store.currentUserId && !store.realtimeChannel) {
      store.initializeRealtime()
    }
    
    return () => {
      store.unsubscribeFromNotifications()
    }
  }, [store.currentUserId])

  return store
}
