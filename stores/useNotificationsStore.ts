import { create } from "zustand"
import { persist } from "zustand/middleware"
import { createClient } from "@/utils/supabase/client"
import { RealtimeChannel } from "@supabase/supabase-js"
import React from "react"
import { 
  getUserNotifications, 
  getUnreadNotificationsCount, 
  markNotificationAsRead, 
  markAllNotificationsAsRead,
  getRecentNotifications,
  UserNotificationWithNotification 
} from "@/modules/notifications/api/notifications"
import { 
  markNotificationAsUnread,
  setUserNotificationArchived
} from "@/modules/notifications/api/notifications"
import { 
  generateAssignmentNotificationText,
  generateAnnouncementNotificationText 
} from "@/types/notifications"

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
export interface DatabaseNotification {
  id: string
  entity_type_id: string
  payload: Record<string, any>
  rendered_text: string | null
  created_at: string
  updated_at: string
}

export interface DatabaseUserNotification {
  id: string
  notification_id: string
  user_id: string
  is_read: boolean
  created_at: string
}

export interface DatabaseEntityType {
  id: string
  entity_name: string
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è UI
export interface Notification {
  id: string // ID –∏–∑ user_notifications
  notificationId: string // ID –∏–∑ notifications
  title: string
  message: string
  createdAt: Date
  isRead: boolean
  isArchived?: boolean
  type?: "info" | "warning" | "error" | "success"
  payload?: Record<string, any>
  entityType?: string
}

interface NotificationsState {
  notifications: Notification[]
  unreadCount: number
  isLoading: boolean
  error: string | null
  realtimeChannel: RealtimeChannel | null
  currentUserId: string | null
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  isPanelOpen: boolean
  panelWidthPx: number
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  hasMore: boolean
  isLoadingMore: boolean
  currentPage: number
  
  // –ü–æ–∏—Å–∫
  searchQuery: string
  isSearchMode: boolean
  allNotifications: Notification[] // –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
  
  // –ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
  onModuleUpdate: ((entityType: string) => void) | null
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  setNotifications: (notifications: Notification[]) => void
  addNotification: (notification: Notification) => void
  markAsRead: (userNotificationId: string) => void
  markAsUnread: (userNotificationId: string) => void
  markAsReadInDB: (userNotificationId: string) => Promise<void>
  markAsUnreadInDB: (userNotificationId: string) => Promise<void>
  setArchivedInDB: (userNotificationId: string, isArchived: boolean) => Promise<void>
  setNotificationArchived: (userNotificationId: string, isArchived: boolean) => void
  markAllAsRead: () => void
  markAllAsReadInDB: () => Promise<void>
  removeNotification: (id: string) => void
  clearAll: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  setLoading: (loading: boolean) => void
  setError: (error: string | null) => void
  setCurrentUserId: (userId: string | null) => void
  setModuleUpdateCallback: (callback: ((entityType: string) => void) | null) => void
  
  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  openPanel: () => void
  closePanel: () => void
  togglePanel: () => void
  setPanelWidth: (widthPx: number) => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è Realtime
  initializeRealtime: () => void
  subscribeToNotifications: () => void
  unsubscribeFromNotifications: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  fetchNotifications: () => Promise<void>
  fetchUnreadCount: () => Promise<void>
  loadMoreNotifications: () => Promise<void>
  resetPagination: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
  searchNotifications: (query: string) => Promise<void>
  clearSearch: () => void
  setSearchQuery: (query: string) => void
  
  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
  debugStore: () => NotificationsState
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Realtime
  handleNewNotification: (userNotification: DatabaseUserNotification) => void

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
  updateAnnouncementTitle: (announcementId: string, newTitle: string) => void
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –≤ UI —Ñ–æ—Ä–º–∞—Ç
const transformNotificationData = (un: UserNotificationWithNotification): Notification => {
  const notification = un.notifications
  const rawType = notification?.entity_types?.entity_name || 'unknown'
  const entityType = rawType === 'assignments' ? 'assignment' : rawType
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
  const payload = notification?.payload || {}
  let title = '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
  let message = '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
    entityType,
    payload,
    userNotificationId: un.id,
    notificationId: un.notification_id,
    fullNotification: notification
  })
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ª–µ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if (entityType === 'assignment' || entityType === 'assignments') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ payload.assignment –∏–ª–∏ –ø—Ä—è–º–æ –≤ payload
    const assignmentData = payload.assignment || {
      project: payload.project,
      from_section: payload.from_section,
      amount: Number(payload.amount) || payload.amount
    }
    
    if (assignmentData.project && assignmentData.from_section && assignmentData.amount) {
      const generated = generateAssignmentNotificationText(assignmentData)
      title = generated.title
      message = generated.message
    } else {
      // Fallback –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
      title = payload.title || payload.project || '–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏–π'
      message = payload.message || `–í–∞–º –ø–µ—Ä–µ–¥–∞–Ω–æ ${payload.amount || '–Ω–µ—Å–∫–æ–ª—å–∫–æ'} –∑–∞–¥–∞–Ω–∏–π`
    }
  } else if (entityType === 'announcement' || entityType === 'announcements') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ payload.announcement –∏–ª–∏ –ø—Ä—è–º–æ –≤ payload
    const announcementData = payload.announcement || {
      user_name: payload.user_name,
      title: payload.title,
      body: payload.body
    }
    
    if (announcementData.user_name && announcementData.title && announcementData.body) {
      const generated = generateAnnouncementNotificationText(announcementData)
      title = generated.title
      message = generated.message
    } else {
      // Fallback –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      title = payload.title || '–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'
      message = payload.message || payload.body || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
    }
  } else if (entityType === 'section_comment') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ —Ä–∞–∑–¥–µ–ª–∞–º
    const commentData = payload.section_comment || {
      section_name: payload.section_name || '–†–∞–∑–¥–µ–ª',
      author_name: payload.author_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      comment_preview: payload.comment_preview || '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
    }
    
    title = `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–∑–¥–µ–ª—É "${commentData.section_name}"`
    message = `${commentData.author_name}: "${commentData.comment_preview}"`
  } else {
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º payload –∏–ª–∏ fallback
    title = payload.title || notification?.rendered_text || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    message = payload.message || payload.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
  }
  
  return {
    id: un.id,
    notificationId: un.notification_id,
    title,
    message,
    createdAt: new Date(un.created_at),
    isRead: un.is_read,
    isArchived: Boolean((un as any).is_archived || false),
    type: payload.type || 'info',
    payload: notification?.payload,
    entityType,
  }
}

export const useNotificationsStore = create<NotificationsState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      notifications: [],
      unreadCount: 0,
      isLoading: false,
      error: null,
      realtimeChannel: null,
      currentUserId: null,
      onModuleUpdate: null, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫
      isPanelOpen: false,
      panelWidthPx: 420,
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      hasMore: true,
      isLoadingMore: false,
      currentPage: 1,
      
      // –ü–æ–∏—Å–∫
      searchQuery: '',
      isSearchMode: false,
      allNotifications: [],

      // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
      setNotifications: (notifications) => {
        const unreadCount = notifications.filter(n => !n.isRead).length
        set({ notifications, unreadCount })
      },

      addNotification: (notification) => {
        set((state) => {
          const newNotifications = [notification, ...state.notifications]
          const unreadCount = newNotifications.filter(n => !n.isRead).length
          return { notifications: newNotifications, unreadCount }
        })
      },

      markAsRead: (userNotificationId) => {
        set((state) => {
          const notification = state.notifications.find((n) => n.id === userNotificationId)
          if (!notification || notification.isRead) return state

          const updatedNotifications = state.notifications.map((n) => 
            n.id === userNotificationId ? { ...n, isRead: true } : n
          )
          
          return {
            notifications: updatedNotifications,
            unreadCount: Math.max(0, state.unreadCount - 1),
          }
        })
      },

      markAsUnread: (userNotificationId) => {
        set((state) => {
          const notification = state.notifications.find((n) => n.id === userNotificationId)
          if (!notification || !notification.isRead) return state

          const updatedNotifications = state.notifications.map((n) => 
            n.id === userNotificationId ? { ...n, isRead: false } : n
          )

          return {
            notifications: updatedNotifications,
            unreadCount: state.unreadCount + 1,
          }
        })
      },

      markAsReadInDB: async (userNotificationId) => {
        try {
          const state = get()
          
          console.log('üîÑ markAsReadInDB –≤—ã–∑–≤–∞–Ω–∞:', {
            userNotificationId,
            currentUserId: state.currentUserId
          })
          
          if (!state.currentUserId) {
            console.warn('‚ö†Ô∏è currentUserId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î')
            return
          }
          
          await markNotificationAsRead(state.currentUserId, userNotificationId)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
          get().setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        }
      },

      markAllAsRead: () => {
        set((state) => ({
          notifications: state.notifications.map((n) => ({ ...n, isRead: true })),
          unreadCount: 0,
        }))
      },

      markAsUnreadInDB: async (userNotificationId) => {
        try {
          const state = get()
          if (!state.currentUserId) return
          await markNotificationAsUnread(state.currentUserId, userNotificationId)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error)
          get().setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        }
      },

      setArchivedInDB: async (userNotificationId, isArchived) => {
        try {
          const state = get()
          if (!state.currentUserId) return
          await setUserNotificationArchived(state.currentUserId, userNotificationId, isArchived)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
          get().setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        }
      },

      markAllAsReadInDB: async () => {
        try {
          const state = get()
          if (!state.currentUserId) return
          
          await markAllNotificationsAsRead(state.currentUserId)
          get().fetchUnreadCount() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
          get().setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        }
      },

      removeNotification: (id) => {
        set((state) => {
          const notification = state.notifications.find((n) => n.id === id)
          const wasUnread = notification && !notification.isRead

          return {
            notifications: state.notifications.filter((n) => n.id !== id),
            unreadCount: wasUnread ? Math.max(0, state.unreadCount - 1) : state.unreadCount,
          }
        })
      },

      // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
      updateAnnouncementTitle: (announcementId, newTitle) => {
        set((state) => {
          const updateList = (list: Notification[]) => list.map((n) => {
            if (n.entityType !== 'announcement' && n.entityType !== 'announcements') return n
            const payload = n.payload || {}
            const idFromPayload = payload.announcement_id || payload?.action?.data?.announcementId
            if (idFromPayload === announcementId) {
              return { ...n, title: newTitle }
            }
            return n
          })

          return {
            notifications: updateList(state.notifications),
            allNotifications: state.allNotifications && state.allNotifications.length > 0
              ? updateList(state.allNotifications)
              : state.allNotifications,
          }
        })
      },

      setNotificationArchived: (userNotificationId, isArchived) => {
        set((state) => {
          const updatedNotifications = state.notifications.map((n) => 
            n.id === userNotificationId ? { ...n, isArchived } : n
          )
          return { notifications: updatedNotifications }
        })
      },

      clearAll: () => {
        set({ notifications: [], unreadCount: 0 })
      },

      // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setLoading: (loading) => set({ isLoading: loading }),
      setError: (error) => set({ error }),
      setCurrentUserId: (userId) => {
        const currentState = get()
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        if (currentState.currentUserId !== userId) {
          console.log('üë§ –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            from: currentState.currentUserId,
            to: userId
          })
          
          // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Ç–µ–∫—É—â–∏—Ö Realtime –ø–æ–¥–ø–∏—Å–æ–∫
          if (currentState.realtimeChannel) {
            currentState.realtimeChannel.unsubscribe()
          }
          
          // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          set({ 
            currentUserId: userId,
            notifications: [],
            unreadCount: 0,
            realtimeChannel: null,
            error: null,
            isLoading: false,
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            currentPage: 1,
            hasMore: true,
            isLoadingMore: false,
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
            searchQuery: '',
            isSearchMode: false,
            allNotifications: []
          })
          
          // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
          if (userId) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setTimeout(() => {
              const newState = get()
              newState.fetchNotifications()
              newState.initializeRealtime()
            }, 100)
          }
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—Ç –∂–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º ID
          set({ currentUserId: userId })
        }
      },
      setModuleUpdateCallback: (callback) => set({ onModuleUpdate: callback }),
      
      // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      resetPagination: () => {
        set({ 
          currentPage: 1, 
          hasMore: true, 
          isLoadingMore: false 
        })
      },
      
      // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
      setSearchQuery: (query) => {
        set({ searchQuery: query })
      },
      
      searchNotifications: async (query) => {
        const state = get()
        const requestUserId = state.currentUserId
        
        if (!requestUserId) {
          console.warn('‚ö†Ô∏è –ù–µ—Ç currentUserId –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
          return
        }

        const trimmedQuery = query.trim()
        console.log('üîç –ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', trimmedQuery)

        try {
          set({ 
            isLoading: state.allNotifications.length === 0, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            error: null, 
            searchQuery: trimmedQuery,
            isSearchMode: true
          })
          
          let allNotifications = state.allNotifications
          
          // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
          if (allNotifications.length === 0) {
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞...')
            const allUserNotifications: UserNotificationWithNotification[] = []
            let currentPage = 1
            let hasMorePages = true
            
            while (hasMorePages) {
              const { notifications: pageNotifications, hasMore } = await getUserNotifications(
                requestUserId, 
                currentPage, 
                100 // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏
              )
              
              allUserNotifications.push(...pageNotifications)
              hasMorePages = hasMore
              currentPage++
              
              console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage - 1}, –ø–æ–ª—É—á–µ–Ω–æ ${pageNotifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤—Å–µ–≥–æ: ${allUserNotifications.length}`)
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ ${allUserNotifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞`)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
            const currentState = get()
            if (currentState.currentUserId !== requestUserId) {
              console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞, –æ—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
              return
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç UI
            allNotifications = allUserNotifications.map(transformNotificationData)
          } else {
            console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞')
          }
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
          const filteredNotifications = trimmedQuery 
            ? allNotifications.filter(notification => 
                notification.title.toLowerCase().includes(trimmedQuery.toLowerCase()) ||
                notification.message.toLowerCase().includes(trimmedQuery.toLowerCase())
              )
            : allNotifications
          
          console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${filteredNotifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "${trimmedQuery}"`)
          
          set({ 
            notifications: filteredNotifications,
            allNotifications: allNotifications, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
            hasMore: false, // –í —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
            currentPage: 1,
            isLoadingMore: false
          })
          
          console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        } catch (error) {
          const currentState = get()
          if (currentState.currentUserId === requestUserId) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
            set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
          }
        } finally {
          const currentState = get()
          if (currentState.currentUserId === requestUserId) {
            set({ isLoading: false })
          }
        }
      },
      
      clearSearch: () => {
        console.log('üßπ –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫')
        set({ 
          searchQuery: '', 
          isSearchMode: false,
          allNotifications: [],
          currentPage: 1,
          hasMore: true,
          isLoadingMore: false
        })
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        get().fetchNotifications()
      },
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é
      openPanel: () => set({ isPanelOpen: true }),
      closePanel: () => set({ isPanelOpen: false }),
      togglePanel: () => set((state) => ({ isPanelOpen: !state.isPanelOpen })),
      setPanelWidth: (widthPx) => set({ panelWidthPx: Math.max(320, Math.min(720, Math.round(widthPx))) }),

      // –ú–µ—Ç–æ–¥—ã –¥–ª—è Realtime
      initializeRealtime: () => {
        const state = get()
        if (!state.currentUserId) {
          console.warn('–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
          return
        }
        
        state.subscribeToNotifications()
      },

      subscribeToNotifications: () => {
        const state = get()
        if (!state.currentUserId) {
          console.log('‚ö†Ô∏è –ù–µ—Ç currentUserId –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Realtime')
          return
        }

        const supabase = createClient()
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        if (state.realtimeChannel) {
          console.log('üîÑ –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ Realtime –∫–∞–Ω–∞–ª–∞')
          state.realtimeChannel.unsubscribe()
        }

        console.log('üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ Realtime –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', state.currentUserId)

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
        const channel = supabase
          .channel(`realtime:user_notifications:${state.currentUserId}`)
          .on(
            'postgres_changes',
            {
              event: 'INSERT',
              schema: 'public',
              table: 'user_notifications',
              filter: `user_id=eq.${state.currentUserId}`
            },
            (payload) => {
              console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', payload)
              state.handleNewNotification(payload.new as DatabaseUserNotification)
            }
          )
          .on(
            'postgres_changes',
            {
              event: 'UPDATE',
              schema: 'public',
              table: 'user_notifications',
              filter: `user_id=eq.${state.currentUserId}`
            },
            (payload) => {
              console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', payload)
              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            }
          )
          .subscribe((status) => {
            console.log('üì° Realtime —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:', status)
          })

        set({ realtimeChannel: channel })
      },

      unsubscribeFromNotifications: () => {
        const state = get()
        if (state.realtimeChannel) {
          console.log('üîå –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç Realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
          state.realtimeChannel.unsubscribe()
          set({ realtimeChannel: null })
        }
      },

      // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 10)
      fetchNotifications: async () => {
        const state = get()
        const requestUserId = state.currentUserId
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤—ã—Ö 10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', requestUserId)
        
        if (!requestUserId) {
          console.warn('‚ö†Ô∏è –ù–µ—Ç currentUserId –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
          return
        }

        try {
          set({ isLoading: true, error: null })
          
          console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
          const { notifications: userNotifications, hasMore } = await getUserNotifications(requestUserId, 1, 10)
          console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã:', userNotifications?.length || 0, 'hasMore:', hasMore)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
          const currentState = get()
          if (currentState.currentUserId !== requestUserId) {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
            return
          }
          
          const unreadCount = await getUnreadNotificationsCount(requestUserId)
          console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', unreadCount)

          // –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const finalState = get()
          if (finalState.currentUserId !== requestUserId) {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
            return
          }

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç UI
          const notifications: Notification[] = userNotifications.map(transformNotificationData)
          console.log('‚ú® –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifications.length)
          
          if (notifications.length > 0) {
            console.log('‚ú® –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notifications[0])
            console.log('‚ú® –í—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifications)
          }

          set({ 
            notifications, 
            unreadCount,
            currentPage: 1,
            hasMore,
            isLoadingMore: false
          })
          console.log('‚úÖ –ü–µ—Ä–≤—ã–µ 10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å—Ç–æ—Ä')
        } catch (error) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –µ—â–µ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
          const currentState = get()
          if (currentState.currentUserId === requestUserId) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
            set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
          } else {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º')
          }
        } finally {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º loading —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
          const currentState = get()
          if (currentState.currentUserId === requestUserId) {
            set({ isLoading: false })
          }
        }
      },

      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      loadMoreNotifications: async () => {
        const state = get()
        const requestUserId = state.currentUserId
        
        if (!requestUserId || !state.hasMore || state.isLoadingMore || state.isLoading) {
          console.log('üö´ –û—Ç–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', {
            hasUserId: !!requestUserId,
            hasMore: state.hasMore,
            isLoadingMore: state.isLoadingMore,
            isLoading: state.isLoading
          })
          return
        }

        const nextPage = state.currentPage + 1
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', nextPage)

        try {
          set({ isLoadingMore: true, error: null })
          
          const { notifications: userNotifications, hasMore } = await getUserNotifications(requestUserId, nextPage, 10)
          console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', userNotifications?.length || 0, 'hasMore:', hasMore)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
          const currentState = get()
          if (currentState.currentUserId !== requestUserId) {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
            return
          }

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç UI
          const newNotifications: Notification[] = userNotifications.map(transformNotificationData)
          console.log('‚ú® –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', newNotifications.length)

          // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
          set((prevState) => ({
            notifications: [...prevState.notifications, ...newNotifications],
            currentPage: nextPage,
            hasMore,
            isLoadingMore: false
          }))
          
          console.log('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        } catch (error) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –µ—â–µ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
          const currentState = get()
          if (currentState.currentUserId === requestUserId) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
            set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
          } else {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º')
          }
        } finally {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º loading —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
          const currentState = get()
          if (currentState.currentUserId === requestUserId) {
            set({ isLoadingMore: false })
          }
        }
      },

      fetchUnreadCount: async () => {
        const state = get()
        if (!state.currentUserId) return

        try {
          const unreadCount = await getUnreadNotificationsCount(state.currentUserId)
          set({ unreadCount })
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
          set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
        }
      },

      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è store
      debugStore: () => {
        const state = get()
        console.log('üîç DEBUG Store —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
          currentUserId: state.currentUserId,
          notificationsCount: state.notifications.length,
          unreadCount: state.unreadCount,
          isLoading: state.isLoading,
          error: state.error,
          hasRealtimeChannel: !!state.realtimeChannel,
          isPanelOpen: state.isPanelOpen
        })
        return state
      },

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Realtime
      handleNewNotification: async (userNotification: DatabaseUserNotification) => {
        try {
          const supabase = createClient()
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
          const { data: fullNotification, error } = await supabase
            .from('user_notifications')
            .select(`
              id,
              notification_id,
              user_id,
              is_read,
              created_at,
              notifications (
                id,
                entity_type_id,
                payload,
                rendered_text,
                created_at,
                updated_at,
                entity_types (
                  id,
                  entity_name
                )
              )
            `)
            .eq('id', userNotification.id)
            .single()

          if (error || !fullNotification) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:', error)
            return
          }

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç UI
          const newNotification = transformNotificationData(fullNotification as any)
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ store
          get().addNotification(newNotification)

          // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π, –µ—Å–ª–∏ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
          const state = get()
          if (state.onModuleUpdate && newNotification.entityType) {
            state.onModuleUpdate(newNotification.entityType)
          }
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
        }
      },
    }),
    {
      name: "notifications-storage-v3",
      // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Realtime –∫–∞–Ω–∞–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      partialize: (state) => ({
        notifications: state.notifications,
        unreadCount: state.unreadCount,
        currentUserId: state.currentUserId,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        currentPage: state.currentPage,
        hasMore: state.hasMore,
      }),
    },
  ),
)

// –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const useNotifications = () => {
  const store = useNotificationsStore()
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Realtime –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  React.useEffect(() => {
    if (store.currentUserId && !store.realtimeChannel) {
      store.initializeRealtime()
    }
    
    return () => {
      store.unsubscribeFromNotifications()
    }
  }, [store.currentUserId])

  return store
}
