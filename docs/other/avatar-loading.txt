# План реализации загрузки аватара пользователя

## 1. Компоненты и состояния

- Создать новый компонент `AvatarUploader` для отображения интерактивного аватара с функцией загрузки
- Создать компонент модального окна `AvatarUploadDialog` для загрузки фотографии
- Добавить состояния:
  - `isHovered` - для отслеживания наведения мыши на аватар
  - `isDialogOpen` - для управления модальным окном
  - `selectedFile` - для хранения выбранного файла
  - `isProcessing` - для отображения состояния загрузки/обработки
  - `hasAvatar` - для проверки наличия аватара
  - `lastUploadTime` - для отслеживания времени последней загрузки

## 2. Изменения в CurrentUserCard

- Заменить текущую реализацию аватара на новый компонент `AvatarUploader`
- Передать необходимые пропсы: текущий аватар, имя пользователя, функцию обновления

## 3. Компонент AvatarUploader

```tsx
- Обернуть Avatar в контейнер с обработчиками onMouseEnter/onMouseLeave
- Добавить оверлей с затемнением аватара при наведении курсора
- Отображать значок загрузки поверх затемненного аватара при наведении
- Если аватара нет, значок загрузки показывается постоянно
- Привязать открытие диалога к клику на оверлей
- Показывать AvatarFallback если аватар отсутствует
```

## 4. Модальное окно загрузки

```tsx
- Использовать компоненты Dialog, DialogContent, etc.
- Добавить информационный текст о требованиях к фотографии:
  - Четкое и крупное изображение лица пользователя
  - На фотографии должен быть только один человек
  - Поддерживаемые форматы: JPEG, PNG
  - Сообщение о том, что ориентация изображения должна быть правильной
- Реализовать форму с загрузкой файла, чекбоксом согласия на обработку нейросетью
- Добавить валидацию типа файла (только JPEG и PNG)
- Добавить предпросмотр выбранного изображения после обрезки до 1024x1024
```

## 5. Обработка изображения

- Реализовать функцию для обрезки изображения до 1024x1024:
  - Использовать canvas для создания квадратного изображения
  - Сохранить пропорции, обрезав изображение по центру
  - Конвертировать в Blob для отправки
  - Показать предпросмотр обрезанного изображения

## 6. Имитация отправки на сервер

- Создать функцию `uploadAvatar` для имитации отправки:
  - Добавить искусственную задержку (setTimeout)
  - Вернуть Promise c ошибкой для обработки
  - В будущем заменить на реальный API Supabase

## 7. Обработка состояний и уведомления

- Добавить toast-уведомления для различных состояний:
  - Успешная загрузка
  - Ошибка загрузки
  - Информация о лимите времени (15 минут)
- Сохранять время последней загрузки для проверки лимита

## 8. Интеграция с хранилищем Zustand

- Добавить состояние аватара в useUserStore
- Создать экшены для обновления аватара
- Синхронизировать отображение с хранилищем

## Следующие шаги

1. Создать компонент AvatarUploader
2. Создать компонент диалога загрузки
3. Реализовать функцию обработки изображения
4. Интегрировать с CurrentUserCard
5. Добавить уведомления и обработку состояний
6. Тестирование разных сценариев
