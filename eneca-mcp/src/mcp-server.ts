/**
 * MCP —Å–µ—Ä–≤–µ—Ä —Ñ–∞–±—Ä–∏–∫–∞
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  InitializeRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
import { DatabaseService } from "./services/database.js";
import type { 
  CreateSectionInput,
  Project,
  Stage,
  ObjectEntity
} from "./types/eneca.js";

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
import { projectTools, projectHandlers } from './tools/projects.js';
import { stageTools, stageHandlers } from './tools/stages.js';
import { objectTools, objectHandlers } from './tools/objects.js';
import { sectionTools, sectionHandlers } from './tools/sections.js';

// –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ –ø—Ä–æ–º–ø—Ç—ã

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbService = new DatabaseService();

export function createMcpServer() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞...');
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
  const server = new Server(
    {
      name: 'eneca-mcp',
      version: '2.0.0',
    },
    {
      capabilities: {
        tools: {
          listChanged: false
        },
        resources: {
          subscribe: false,
          listChanged: false  
        },
        prompts: {
          listChanged: false
        }
      },
    },
  );

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const allTools = [
    ...projectTools,
    ...stageTools,
    ...objectTools,
    ...sectionTools
  ];

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  const allHandlers = {
    ...projectHandlers,
    ...stageHandlers,
    ...objectHandlers,
    ...sectionHandlers
  };
  
  console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${allTools.length}`);
  console.log(`üîß –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${Object.keys(allHandlers).length}`);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  server.setRequestHandler(InitializeRequestSchema, async (request) => {
    console.log('üîÑ MCP Initialize –∑–∞–ø—Ä–æ—Å:', JSON.stringify(request.params, null, 2));
    
    const response = {
      protocolVersion: "2025-03-26", // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ –≤–µ—Ä—Å–∏–∏ n8n
      capabilities: {
        tools: {
          listChanged: false
        },
        resources: {
          subscribe: false,
          listChanged: false
        },
        prompts: {
          listChanged: false
        }
      },
      serverInfo: {
        name: "eneca-mcp",
        version: "2.0.0"
      }
    };
    
    console.log('‚úÖ MCP Initialize –æ—Ç–≤–µ—Ç:', JSON.stringify(response, null, 2));
    return response;
  });

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  server.setRequestHandler(ListToolsRequestSchema, async () => {
    console.log('üìã MCP Tools/List –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    console.log(`üîß –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${allTools.length}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    allTools.slice(0, 3).forEach((tool, index) => {
      console.log(`   ${index + 1}. ${tool.name}: ${tool.description}`);
    });
    
    const response = {
      tools: allTools,
    };
    
    console.log('‚úÖ MCP Tools/List –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    return response;
  });

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;
    
    console.log(`üõ†Ô∏è MCP Call Tool: ${name}`);
    console.log('üì• –ê—Ä–≥—É–º–µ–Ω—Ç—ã:', JSON.stringify(args, null, 2));
    
    try {
      // –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
      const handler = allHandlers[name as keyof typeof allHandlers];
      
      if (!handler) {
        console.log(`‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new Error(`–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
      
      // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
      const result = await handler(args || {});
      
      console.log('‚úÖ MCP Call Tool –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return result;
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "${name}":`, error);
      return {
        content: [{
          type: "text",
          text: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "${name}": ${error}`
        }]
      };
    }
  });

  // –†–µ—Å—É—Ä—Å—ã –∏ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

  return server;
} 