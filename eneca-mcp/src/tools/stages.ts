/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞–¥–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
 */

import { z } from 'zod';
import { DatabaseService } from '../services/database.js';
import type { CreateStageInput, UpdateStageInput } from '../types/eneca.js';

const dbService = new DatabaseService();

// ===== ZOD –°–•–ï–ú–´ –í–ê–õ–ò–î–ê–¶–ò–ò =====

const CreateStageSchema = z.object({
  stage_name: z.string()
    .min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    .max(100, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .regex(/^[–∞-—è–ê-–Øa-zA-Z0-9\s\-_\.‚Ññ]+$/, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç–∞–¥–∏–∏"),
  stage_description: z.string()
    .max(500, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
  project_name: z.string()
    .min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    .max(100, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
});

const SearchStagesSchema = z.object({
  stage_name: z.string()
    .max(100, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
  project_name: z.string()
    .max(100, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
  limit: z.number()
    .min(1, "–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    .max(100, "–õ–∏–º–∏—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100")
    .optional()
});

const ProjectStructureSchema = z.object({
  project_name: z.string()
    .min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    .max(100, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
});

const UpdateStageSchema = z.object({
  current_name: z.string()
    .min(1, "–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    .max(100, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤"),
  project_name: z.string()
    .min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    .max(100, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤"),
  new_name: z.string()
    .max(100, "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
  description: z.string()
    .max(500, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional()
});

// ===== –°–û–ó–î–ê–ù–ò–ï –°–¢–ê–î–ò–ò =====

export const createStageTool = {
  name: "create_stage",
  description: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é –≤ –ø—Ä–æ–µ–∫—Ç–µ",
  inputSchema: {
    type: "object",
    properties: {
      stage_name: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
      },
      stage_description: {
        type: "string",
        description: "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏"
      },
      project_name: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
      }
    },
    required: ["stage_name", "project_name"]
  }
};

export async function handleCreateStage(args: any) {
  try {
    // Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedArgs = CreateStageSchema.parse(args);

    // –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const project = await dbService.findProjectByNameExact(validatedArgs.project_name.trim());
    
    if (!project) {
      return {
        content: [{
          type: "text",
          text: `–ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${validatedArgs.project_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
        }]
      };
    }

    const input: CreateStageInput = {
      stage_name: validatedArgs.stage_name.trim(),
      stage_description: validatedArgs.stage_description?.trim(),
      stage_project_id: project.project_id
    };

    const result = await dbService.createStage(input);
    
    return {
      content: [{
        type: "text",
        text: result.success ? 
          `${result.message}\n–°—Ç–∞–¥–∏—è "${validatedArgs.stage_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project.project_name}"` :
          `${result.message}`
      }]
    };

  } catch (error) {
    if (error instanceof z.ZodError) {
      return {
        content: [{
          type: "text",
          text: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.errors.map(e => e.message).join(', ')}`
        }]
      };
    }
    return {
      content: [{
        type: "text",
        text: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–¥–∏–∏: ${error}`
      }]
    };
  }
}

// ===== –ü–û–ò–°–ö –°–¢–ê–î–ò–ô =====

export const searchStagesTool = {
  name: "search_stages",
  description: "–ü–æ–∏—Å–∫ —Å—Ç–∞–¥–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø—Ä–æ–µ–∫—Ç—É",
  inputSchema: {
    type: "object",
    properties: {
      stage_name: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"
      },
      project_name: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
      },
      limit: {
        type: "number",
        description: "–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        default: 10
      }
    }
  }
};

export async function handleSearchStages(args: any) {
  try {
    let projectId: string | undefined = undefined;

    // –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (args.project_name) {
      const projectResult = await dbService.validateUniqueProjectByName(String(args.project_name).trim());
      
      if (projectResult === 'not_found') {
        return {
          content: [{
            type: "text",
            text: `–ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${args.project_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
          }]
        };
      }
      
      if (projectResult === 'multiple_found') {
        return {
          content: [{
            type: "text",
            text: `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${args.project_name}". –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.`
          }]
        };
      }

      projectId = projectResult.project_id;
    }

    let stages: any[] = [];

    if (args.stage_name) {
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞–¥–∏–∏
      stages = await dbService.searchStagesByName(String(args.stage_name).trim(), projectId);
    } else if (projectId) {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–¥–∏–π –ø—Ä–æ–µ–∫—Ç–∞
      const result = await dbService.listStages({ project_id: projectId, limit: args.limit || 10 });
      if (!result.success) {
        return {
          content: [{
            type: "text",
            text: `${result.message}`
          }]
        };
      }
      stages = result.data || [];
    } else {
      return {
        content: [{
          type: "text",
          text: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"
        }]
      };
    }

    if (stages.length === 0) {
      return {
        content: [{
          type: "text",
          text: "–°—Ç–∞–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
        }]
      };
    }

    const stagesText = stages.map((stage, index) => 
      `${index + 1}. ${stage.stage_name}\n` +
      `–ü—Ä–æ–µ–∫—Ç: ${stage.stage_project_id}\n` +
      `–°–æ–∑–¥–∞–Ω–∞: ${stage.stage_created ? new Date(stage.stage_created).toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
      `${stage.stage_description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${stage.stage_description}\n` : ''}---`
    ).join('\n');

    return {
      content: [{
        type: "text",
        text: `üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–¥–∏–π: ${stages.length}\n\n${stagesText}`
      }]
    };

  } catch (error) {
    return {
      content: [{
        type: "text",
        text: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–¥–∏–π: ${error}`
      }]
    };
  }
}

// ===== –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê =====

export const getProjectStructureTool = {
  name: "get_project_structure",
  description: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Å—Ç–∞–¥–∏—è–º–∏, –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏",
  inputSchema: {
    type: "object",
    properties: {
      project_name: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
      }
    },
    required: ["project_name"]
  }
};

export async function handleGetProjectStructure(args: any) {
  try {
    const projectName = String(args.project_name).trim();

    const projectResult = await dbService.validateUniqueProjectByName(projectName);
    
    if (projectResult === 'not_found') {
      return {
        content: [{
          type: "text",
          text: `–ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
        }]
      };
    }
    
    if (projectResult === 'multiple_found') {
      return {
        content: [{
          type: "text",
          text: `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${projectName}". –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ.`
        }]
      };
    }

    const project = projectResult;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–¥–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    const stagesResult = await dbService.listStages({ project_id: project.project_id });
    const stages = stagesResult.success ? stagesResult.data || [] : [];

    let structureText = `**–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê: ${project.project_name}**\n\n`;

    if (stages.length === 0) {
      structureText += "–í –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–¥–∏–π\n";
      return {
        content: [{
          type: "text",
          text: structureText
        }]
      };
    }

    // –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–¥–∏–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏ —Ä–∞–∑–¥–µ–ª—ã
    for (let i = 0; i < stages.length; i++) {
      const stage = stages[i];
      structureText += `**${i + 1}. ${stage.stage_name}**\n`;
      
      if (stage.stage_description) {
        structureText += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${stage.stage_description}\n`;
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å—Ç–∞–¥–∏–∏
      const objectsResult = await dbService.searchObjectsByName('', stage.stage_id);
      
      if (objectsResult.length === 0) {
        structureText += `   –û–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n`;
        continue;
      }

      structureText += `   –û–±—ä–µ–∫—Ç–æ–≤: ${objectsResult.length}\n`;

      // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—ä–µ–∫—Ç–∞
      const objectsToShow = objectsResult.slice(0, 3);
      for (const obj of objectsToShow) {
        structureText += `   ‚Ä¢ ${obj.object_name}\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –æ–±—ä–µ–∫—Ç–∞
        const sectionsResult = await dbService.listSections({ object_id: obj.object_id });
        const sections = sectionsResult.success ? sectionsResult.data || [] : [];
        
        if (sections.length > 0) {
          structureText += `     –†–∞–∑–¥–µ–ª–æ–≤: ${sections.length}\n`;
        }
      }

      if (objectsResult.length > 3) {
        structureText += `   ... –∏ –µ—â–µ ${objectsResult.length - 3} –æ–±—ä–µ–∫—Ç–æ–≤\n`;
      }

      structureText += `\n`;
    }

    return {
      content: [{
        type: "text",
        text: structureText
      }]
    };

  } catch (error) {
    return {
      content: [{
        type: "text",
        text: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: ${error}`
      }]
    };
  }
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–î–ò–ò =====

export const updateStageTool = {
  name: "update_stage",
  description: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏",
  inputSchema: {
    type: "object",
    properties: {
      current_name: {
        type: "string",
        description: "–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"
      },
      project_name: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç–∞–¥–∏—è"
      },
      new_name: {
        type: "string",
        description: "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
      },
      description: {
        type: "string",
        description: "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
      }
    },
    required: ["current_name", "project_name"]
  }
};

export async function handleUpdateStage(args: any) {
  try {
    const currentName = String(args.current_name).trim();
    const projectName = String(args.project_name).trim();
    
    // –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
    const project = await dbService.findProjectByNameExact(projectName);
    
    if (!project) {
      return {
        content: [{
          type: "text",
          text: `–ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
        }]
      };
    }

    // –ü–æ–∏—Å–∫ —Å—Ç–∞–¥–∏–∏
    const stage = await dbService.findStageByNameExact(currentName, project.project_id);
    
    if (!stage) {
      return {
        content: [{
          type: "text",
          text: `–°—Ç–∞–¥–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${currentName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projectName}"`
        }]
      };
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: UpdateStageInput = {
      stage_id: stage.stage_id
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (args.new_name) {
      const newName = String(args.new_name).trim();
      if (newName !== currentName) {
        const uniqueCheck = await dbService.validateUniqueStageByNameForUpdate(newName, project.project_id, stage.stage_id);
        if (uniqueCheck === 'duplicate') {
          return {
            content: [{
              type: "text",
              text: `–°—Ç–∞–¥–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${newName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projectName}"`
            }]
          };
        }
        updateData.stage_name = newName;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    if (args.description !== undefined) {
      updateData.stage_description = String(args.description).trim() || undefined;
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const result = await dbService.updateStage(updateData);

    if (!result.success) {
      return {
        content: [{
          type: "text",
          text: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏: ${result.message}`
        }]
      };
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ —Ç–æ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const changes = [];
    if (updateData.stage_name) changes.push(`–ù–∞–∑–≤–∞–Ω–∏–µ: "${currentName}" ‚Üí "${updateData.stage_name}"`);
    if (updateData.stage_description !== undefined) changes.push(`–û–ø–∏—Å–∞–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);

    return {
      content: [{
        type: "text",
        text: `–°—Ç–∞–¥–∏—è "${currentName}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projectName}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n${changes.join('\n')}`
      }]
    };

  } catch (error) {
    return {
      content: [{
        type: "text",
        text: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏: ${error}`
      }]
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞–¥–∏–π
export const stageTools = [
  createStageTool,
  searchStagesTool,
  getProjectStructureTool,
  updateStageTool
];

export const stageHandlers = {
  create_stage: handleCreateStage,
  search_stages: handleSearchStages,
  get_project_structure: handleGetProjectStructure,
  update_stage: handleUpdateStage
}; 