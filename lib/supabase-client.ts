import { createClient } from "@/utils/supabase/client"
import type { Section, Loading } from "@/modules/planning/types"

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Supabase –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
export const supabase = createClient()

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å SectionHierarchy, –¥–æ–±–∞–≤–ª—è—è –ø–æ–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
export interface SectionHierarchy {
  section_id: string
  section_name: string
  object_id: string
  object_name: string
  stage_id: string
  stage_name: string
  project_id: string
  project_name: string
  client_id: string
  client_name: string
  project_lead_engineer_name: string | null
  project_manager_name: string | null
  section_responsible_name: string | null
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
  project_lead_engineer_avatar: string | null
  project_manager_avatar: string | null
  section_responsible_avatar: string | null
  responsible_department_id: string | null
  responsible_department_name: string | null
  responsible_team_name: string | null
  total_loading_rate: number | null
  tasks_count: number | null
  latest_plan_loading_status: string | null
  section_start_date?: string | null
  section_end_date?: string | null
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å LoadingData, –¥–æ–±–∞–≤–ª—è—è –ø–æ–ª–µ —Å—Ç–∞—Ç—É—Å–∞
export interface LoadingData {
  loading_id: string
  loading_responsible: string
  responsible_name?: string | null
  responsible_avatar: string | null
  loading_section: string
  loading_start: string | null
  loading_finish: string | null
  loading_rate: number | null
  loading_status: "active" | "archived"
  loading_created: string | null
  loading_updated: string | null
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å SectionWithLoadings, –¥–æ–±–∞–≤–ª—è—è –ø–æ–ª–µ –¥–ª—è ID –∫–æ–º–∞–Ω–¥—ã
export interface SectionWithLoadings {
  section_id: string
  section_name: string
  project_id: string
  project_name: string
  object_id: string | null
  object_name: string | null
  stage_id: string | null
  stage_name: string | null
  client_id: string | null
  responsible_department_id: string | null
  responsible_department_name: string | null
  section_responsible_id: string | null
  section_responsible_name: string | null
  section_responsible_avatar: string | null
  section_start_date: string | null
  section_end_date: string | null
  latest_plan_loading_status: string | null
  has_loadings: boolean
  loading_id: string | null
  loading_responsible: string | null
  loading_start: string | null
  loading_finish: string | null
  loading_rate: number | null
  loading_status: string | null
  loading_created: string | null
  loading_updated: string | null
  responsible_first_name: string | null
  responsible_last_name: string | null
  responsible_avatar: string | null
  responsible_team_name: string | null
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
export interface EmployeeWorkloadData {
  user_id: string
  first_name: string
  last_name: string
  email: string
  position_name: string | null
  avatar_url: string | null
  team_id: string | null
  team_name: string | null
  team_code: string | null
  department_id: string | null
  department_name: string | null
  loading_id: string | null
  loading_section: string | null
  loading_start: string | null
  loading_finish: string | null
  loading_rate: number | null
  loading_status: "active" | "archived" | null
  section_name: string | null
  project_id: string | null
  project_name: string | null
  project_status: string | null
  has_loadings: boolean
  loadings_count: number
  employment_rate: number | null
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
interface LoadingUpdateData {
  loading_updated: string
  loading_start?: string
  loading_finish?: string
  loading_rate?: number
  loading_section?: string
}


// –ö–ª–∏–µ–Ω—Ç Supabase —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
interface StructuredError {
  success: false
  error: string
  details?: any
}

// –¢–∏–ø –¥–ª—è –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
export interface ShortageLoadingRow {
  loading_id: string
  loading_start: string
  loading_finish: string
  loading_rate: number
  loading_section: string | null
  shortage_department_id: string | null
  shortage_team_id: string | null
  shortage_description: string | null
  loading_status: "active" | "archived"
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è view_section_hierarchy
export async function fetchSectionHierarchy(): Promise<SectionHierarchy[] | StructuredError> {
  try {
    const { data, error } = await supabase.from("view_section_hierarchy").select("*")

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:", error)
      return {
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã",
        details: error
      }
    }

    return data || []
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:", error)
    return {
      success: false,
      error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤",
      details: error
    }
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fetchLoadings –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è view_sections_with_loadings
export async function fetchLoadings(sectionId: string, checkOnly = false): Promise<LoadingData[] | StructuredError> {
  try {
    let query = supabase
      .from("view_sections_with_loadings")
      .select(`
        loading_id,
        loading_responsible,
        section_id,
        loading_start,
        loading_finish,
        loading_rate,
        loading_created,
        loading_updated,
        loading_status,
        responsible_first_name,
        responsible_last_name,
        responsible_avatar
      `)
      .eq("section_id", sectionId)
      .not("loading_id", "is", null) // –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä–∫—É –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å—å—é
    if (checkOnly) {
      query = query.limit(1)
    }

    const { data, error } = await query

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:", error)
      return {
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏",
        details: error
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    return (data || []).map((item) => ({
      loading_id: item.loading_id,
      loading_responsible: item.loading_responsible,
      loading_section: item.section_id, // –ú–∞–ø–ø–∏–º section_id –≤ loading_section
      loading_start: item.loading_start,
      loading_finish: item.loading_finish,
      loading_rate: item.loading_rate,
      loading_status: item.loading_status,
      loading_created: item.loading_created,
      loading_updated: item.loading_updated,
      responsible_name: (item.responsible_first_name && item.responsible_last_name) 
        ? `${item.responsible_first_name} ${item.responsible_last_name}` 
        : null,
      responsible_avatar: item.responsible_avatar,
    }))
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:", error)
    return {
      success: false,
      error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫",
      details: error
    }
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fetchSectionsWithLoadings –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
export async function fetchSectionsWithLoadings(
  projectId: string | null = null,
  departmentId: string | null = null,
  teamId: string | null = null,
  managerId: string | null = null,
  employeeId: string | null = null,
  stageId: string | null = null,
  objectId: string | null = null,
): Promise<{ sections: Section[]; loadingsMap: Record<string, Loading[]> } | StructuredError> {
  try {
    console.log("üîç –§–∏–ª—å—Ç—Ä—ã –¥–ª—è fetchSectionsWithLoadings:", {
      projectId,
      departmentId,
      teamId,
      managerId,
      employeeId,
      stageId,
      objectId
    })

    let query = supabase.from("view_sections_with_loadings").select("*")

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (projectId) {
      console.log("üìÅ –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É:", projectId)
      query = query.eq("project_id", projectId)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–¥–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
    if (stageId) {
      console.log("üéØ –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–¥–∏–∏:", stageId)
      query = query.eq("stage_id", stageId)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–∫—Ç—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (objectId) {
      console.log("üèóÔ∏è –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–∫—Ç—É:", objectId)
      query = query.eq("object_id", objectId)
    }

    if (managerId) {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const { data: managerProjects, error: managerError } = await supabase
        .from("view_manager_projects")
        .select("project_id")
        .eq("manager_id", managerId)

      if (managerError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", managerError)
        return {
          success: false,
          error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
          details: managerError
        }
      }

      const projectIds = managerProjects?.map(p => p.project_id) || []
      
      if (projectIds.length === 0) {
        console.log("–£ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return { sections: [], loadingsMap: {} }
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)
      if (!projectId) {
        query = query.in("project_id", projectIds)
      }
    }

    if (departmentId) {
      console.log("üè¢ –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É:", departmentId)
      query = query.eq("responsible_department_id", departmentId)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (teamId) {
      console.log("üë• –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ:", teamId)
      query = query.eq("responsible_team_id", teamId)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (employeeId) {
      console.log("üë§ –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É:", employeeId)
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –≥–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ª–∏–±–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —Ä–∞–∑–¥–µ–ª, –ª–∏–±–æ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      query = query.or(`section_responsible_id.eq.${employeeId},loading_responsible.eq.${employeeId}`)
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∑–∞–≥—Ä—É–∑–æ–∫
    query = query.or("loading_status.eq.active,loading_status.is.null")

    const { data, error } = await query

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ view_sections_with_loadings:", error)
      return {
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏",
        details: error
      }
    }

    console.log("üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ view_sections_with_loadings:", data?.length || 0)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –∏ –∑–∞–≥—Ä—É–∑–∫–∞–º
    const sectionsMap = new Map<string, Section>()
    const loadingsMap: Record<string, Loading[]> = {}

    data?.forEach((item) => {
      const sectionItem = item as SectionWithLoadings

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ
      if (!sectionsMap.has(sectionItem.section_id)) {
        sectionsMap.set(sectionItem.section_id, {
          id: sectionItem.section_id,
          name: sectionItem.section_name,
          departmentId: sectionItem.responsible_department_id || "",
          projectId: sectionItem.project_id,
          projectName: sectionItem.project_name,
          objectId: sectionItem.object_id || undefined,
          objectName: sectionItem.object_name || undefined,
          stageId: sectionItem.stage_id || undefined,
          stageName: sectionItem.stage_name || undefined,
          clientId: sectionItem.client_id || undefined,
          responsibleName: sectionItem.section_responsible_name || undefined,
          responsibleAvatarUrl: sectionItem.section_responsible_avatar || undefined,
          // –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å—Ç–∞–≤–∏—Ç—å –º–µ—Ç–∫—É
          // @ts-ignore - —Ä–∞—Å—à–∏—Ä—è–µ–º Section –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
          responsibleId: sectionItem.section_responsible_id || undefined,
          departmentName: sectionItem.responsible_department_name || undefined,
          startDate: sectionItem.section_start_date ? new Date(sectionItem.section_start_date) : new Date(),
          endDate: sectionItem.section_end_date ? new Date(sectionItem.section_end_date) : new Date(),
          status: sectionItem.latest_plan_loading_status || undefined,
          hasLoadings: sectionItem.has_loadings,
          decompositionStages: [], // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
        })

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        loadingsMap[sectionItem.section_id] = []
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–Ω–∞
      if (sectionItem.loading_id && sectionItem.loading_status === "active") {
        loadingsMap[sectionItem.section_id].push({
          id: sectionItem.loading_id,
          responsibleId: sectionItem.loading_responsible || "",
          responsibleName:
            sectionItem.responsible_first_name && sectionItem.responsible_last_name
              ? `${sectionItem.responsible_first_name} ${sectionItem.responsible_last_name}`
              : undefined,
          responsibleAvatarUrl: sectionItem.responsible_avatar || undefined,
          responsibleTeamName: sectionItem.responsible_team_name || undefined,
          sectionId: sectionItem.section_id,
          startDate: sectionItem.loading_start ? new Date(sectionItem.loading_start) : new Date(),
          endDate: sectionItem.loading_finish ? new Date(sectionItem.loading_finish) : new Date(),
          rate: sectionItem.loading_rate || 1,
          comment: (sectionItem as any).loading_comment || undefined,
          createdAt: sectionItem.loading_created ? new Date(sectionItem.loading_created) : new Date(),
          updatedAt: sectionItem.loading_updated ? new Date(sectionItem.loading_updated) : new Date(),
        })
      }
    })

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ø—ã –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const sectionIds = Array.from(sectionsMap.keys())
    if (sectionIds.length > 0) {
      const { data: stagesData, error: stagesError } = await supabase
        .from('decomposition_stages')
        .select('decomposition_stage_id, decomposition_stage_section_id, decomposition_stage_name, decomposition_stage_start, decomposition_stage_finish, decomposition_stage_order')
        .in('decomposition_stage_section_id', sectionIds)
        .order('decomposition_stage_order', { ascending: true })

      if (!stagesError && stagesData) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        const stagesBySectionId: Record<string, any[]> = {}
        stagesData.forEach((stage: any) => {
          const sectionId = stage.decomposition_stage_section_id
          if (!stagesBySectionId[sectionId]) {
            stagesBySectionId[sectionId] = []
          }
          stagesBySectionId[sectionId].push({
            id: stage.decomposition_stage_id,
            name: stage.decomposition_stage_name,
            start: stage.decomposition_stage_start ? new Date(stage.decomposition_stage_start) : null,
            finish: stage.decomposition_stage_finish ? new Date(stage.decomposition_stage_finish) : null,
          })
        })

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø—ã –∫ —Ä–∞–∑–¥–µ–ª–∞–º
        sectionsMap.forEach((section, sectionId) => {
          section.decompositionStages = stagesBySectionId[sectionId] || []
        })
      }
    }

    return {
      sections: Array.from(sectionsMap.values()),
      loadingsMap,
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ view_sections_with_loadings:", error)
    return {
      success: false,
      error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏",
      details: error
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
export async function createShortageLoading(params: {
  startDate: string
  endDate: string
  rate: number
  departmentId?: string | null
  teamId?: string | null
  sectionId: string
  description?: string | null
}): Promise<{ success: boolean; error?: string; loadingId?: string }> {
  try {
    const payload: any = {
      is_shortage: true,
      loading_responsible: null,
      loading_start: params.startDate,
      loading_finish: params.endDate,
      loading_rate: params.rate,
      loading_status: "active",
      loading_created: new Date().toISOString(),
      loading_updated: new Date().toISOString(),
      shortage_department_id: params.departmentId || null,
      shortage_team_id: params.teamId || null,
      shortage_description: params.description || null,
      loading_section: params.sectionId,
    }

    const { data, error } = await supabase
      .from("loadings")
      .insert(payload)
      .select("loading_id")
      .single()

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:", error)
      return { success: false, error: error.message }
    }

    return { success: true, loadingId: data?.loading_id }
  } catch (error) {
    console.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ –æ—Ç–¥–µ–ª—É/–∫–æ–º–∞–Ω–¥–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
export async function fetchShortageLoadings(params: {
  startDate: string
  endDate: string
  departmentId?: string | null
  teamId?: string | null
}): Promise<ShortageLoadingRow[] | StructuredError> {
  try {
    let query = supabase
      .from("loadings")
      .select(
        `loading_id, loading_start, loading_finish, loading_rate, loading_status, loading_section, shortage_department_id, shortage_team_id, shortage_description`
      )
      .eq("is_shortage", true)
      .eq("loading_status", "active")
      // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤: –Ω–∞—á–∞–ª–æ <= –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –∏ –∫–æ–Ω–µ—Ü >= –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
      .lte("loading_start", params.endDate)
      .gte("loading_finish", params.startDate)

    if (params.teamId) {
      query = query.eq("shortage_team_id", params.teamId)
    } else if (params.departmentId) {
      query = query.eq("shortage_department_id", params.departmentId)
    }

    const { data, error } = await query

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:", error)
      return { success: false, error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏", details: error }
    }

    return (data || []) as ShortageLoadingRow[]
  } catch (error) {
    console.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫", details: error }
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
export async function fetchEmployeeWorkloads(
  departmentId: string | null = null,
  teamId: string | null = null,
): Promise<EmployeeWorkloadData[] | StructuredError> {
  try {
    let query = supabase.from("view_employee_workloads").select("*")

    if (departmentId) {
      query = query.eq("department_id", departmentId)
    }

    if (teamId) {
      query = query.eq("team_id", teamId)
    }

    const { data, error } = await query

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", error)
      return {
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        details: error
      }
    }

    return data || []
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", error)
    return {
      success: false,
      error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
      details: error
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
export async function updateLoading(
  loadingId: string,
  updates: {
    startDate?: string
    endDate?: string
    rate?: number
    projectId?: string
    sectionId?: string
  },
): Promise<{ 
  success: boolean; 
  error?: string; 
  updatedLoading?: {
    id: string
    sectionId: string
    sectionName: string
    projectId: string
    projectName: string
    startDate: Date
    endDate: Date
    rate: number
  }
}> {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const updateData: LoadingUpdateData = {
      loading_updated: new Date().toISOString(),
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (updates.startDate) {
      updateData.loading_start = updates.startDate
    }
    if (updates.endDate) {
      updateData.loading_finish = updates.endDate
    }
    if (updates.rate !== undefined) {
      updateData.loading_rate = updates.rate
    }
    if (updates.sectionId) {
      updateData.loading_section = updates.sectionId
    }

    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:", loadingId, updateData)

    const { error } = await supabase.from("loadings").update(updateData).eq("loading_id", loadingId)

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
      return { success: false, error: error.message }
    }

    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Ä–∞–∑–¥–µ–ª–µ
    const { data: loadingData, error: fetchError } = await supabase
      .from("view_sections_with_loadings")
      .select(`
        loading_id,
        loading_section,
        section_name,
        project_id,
        project_name,
        loading_start,
        loading_finish,
        loading_rate
      `)
      .eq("loading_id", loadingId)
      .single()

    if (fetchError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–∫–∏:", fetchError)
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –Ω–æ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      return { success: true }
    }

    const updatedLoading = {
      id: loadingData.loading_id,
      sectionId: loadingData.loading_section,
      sectionName: loadingData.section_name,
      projectId: loadingData.project_id,
      projectName: loadingData.project_name,
      startDate: new Date(loadingData.loading_start),
      endDate: new Date(loadingData.loading_finish),
      rate: loadingData.loading_rate || 1,
    }

    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:", updatedLoading)
    return { success: true, updatedLoading }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
export async function deleteLoading(loadingId: string): Promise<{ success: boolean; error?: string }> {
  try {
    console.log("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:", loadingId)

    const { error } = await supabase.from("loadings").delete().eq("loading_id", loadingId)

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
      return { success: false, error: error.message }
    }

    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:", loadingId)
    return { success: true }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
export async function createLoading(loadingData: {
  responsibleId: string
  sectionId: string
  startDate: string
  endDate: string
  rate: number
  // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏, –∑–∞–ø—Ä–æ—Å —É–ø–∞–¥–µ—Ç ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —Ñ–æ–ª–±—ç–∫–æ–º)
  comment?: string
}): Promise<{ success: boolean; error?: string; loadingId?: string }> {
  try {
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:", loadingData)

    // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    const insertPayloadBase: any = {
      loading_responsible: loadingData.responsibleId,
      loading_section: loadingData.sectionId,
      loading_start: loadingData.startDate,
      loading_finish: loadingData.endDate,
      loading_rate: loadingData.rate,
      loading_status: "active",
      loading_created: new Date().toISOString(),
      loading_updated: new Date().toISOString(),
    }

    const tryInsert = async (withComment: boolean) => {
      const payload = { ...insertPayloadBase, ...(withComment && loadingData.comment ? { loading_comment: loadingData.comment } : {}) }
      return await supabase
        .from("loadings")
        .insert(payload)
        .select("loading_id")
        .single()
    }

    let data, error
    ;({ data, error } = await tryInsert(true))

    if (error) {
      console.warn("createLoading: –ø–æ–ø—ã—Ç–∫–∞ —Å –ø–æ–ª–µ–º loading_comment –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É—é –±–µ–∑ –Ω–µ–≥–æ", error?.message)
      ;({ data, error } = await tryInsert(false))
    }

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
      return { success: false, error: error.message }
    }
    if (!data) {
      console.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏")
      return { success: false, error: "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã" }
    }

    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", data.loading_id)
    return { success: true, loadingId: data.loading_id }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
export async function archiveLoading(loadingId: string): Promise<{ success: boolean; error?: string }> {
  try {
    console.log("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:", loadingId)

    const { error } = await supabase
      .from("loadings")
      .update({
        loading_status: "archived",
        loading_updated: new Date().toISOString(),
      })
      .eq("loading_id", loadingId)

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
      return { success: false, error: error.message }
    }

    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:", loadingId)
    return { success: true }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞
export async function restoreLoading(loadingId: string): Promise<{ success: boolean; error?: string }> {
  try {
    console.log("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞:", loadingId)

    const { error } = await supabase
      .from("loadings")
      .update({
        loading_status: "active",
        loading_updated: new Date().toISOString(),
      })
      .eq("loading_id", loadingId)

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
      return { success: false, error: error.message }
    }

    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:", loadingId)
    return { success: true }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
export async function fetchArchivedLoadings(
  sectionId?: string,
  employeeId?: string,
  limit = 50,
): Promise<LoadingData[] | StructuredError> {
  try {
    let query = supabase
      .from("archived_loadings")
      .select(`
        loading_id,
        loading_responsible,
        profiles:loading_responsible (
          first_name,
          last_name,
          avatar_url
        ),
        loading_section,
        loading_start,
        loading_finish,
        loading_rate,
        loading_status,
        loading_created,
        loading_updated
      `)
      .limit(limit)
      .order("loading_updated", { ascending: false })

    if (sectionId) {
      query = query.eq("loading_section", sectionId)
    }

    if (employeeId) {
      query = query.eq("loading_responsible", employeeId)
    }

    const { data, error } = await query

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:", error)
      return {
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏",
        details: error
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    return (data || []).map((item) => {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç –∏–ª–∏ null
      const profile = Array.isArray(item.profiles) 
        ? item.profiles[0] as { first_name: string; last_name: string; avatar_url: string | null } | undefined
        : item.profiles as { first_name: string; last_name: string; avatar_url: string | null } | null
      return {
        ...item,
        responsible_name: profile ? `${profile.first_name} ${profile.last_name}` : null,
        responsible_avatar: profile?.avatar_url || null,
        profiles: undefined, // –£–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç profiles
      }
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:", error)
    return {
      success: false,
      error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫",
      details: error
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —Ä–∞–∑–¥–µ–ª
export async function updateSectionResponsible(
  sectionId: string,
  responsibleId: string,
): Promise<{ success: boolean; error?: string; data?: any }> {
  try {
    console.log("updateSectionResponsible: –Ω–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", { sectionId, responsibleId })

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–∑–¥–µ–ª
    const { data: existingSection, error: checkError } = await supabase
      .from("sections")
      .select("section_id, section_name, section_responsible")
      .eq("section_id", sectionId)
      .single()

    if (checkError) {
      console.error("updateSectionResponsible: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–¥–µ–ª–∞:", checkError)
      return { success: false, error: `–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${checkError.message}` }
    }

    console.log("updateSectionResponsible: –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª:", existingSection)

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    const { data, error } = await supabase
      .from("sections")
      .update({
        section_responsible: responsibleId,
        section_updated: new Date().toISOString(),
      })
      .eq("section_id", sectionId)
      .select("section_id, section_name, section_responsible, section_updated")

    if (error) {
      console.error("updateSectionResponsible: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error)
      return { success: false, error: error.message }
    }

    console.log("updateSectionResponsible: —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", data)
    return { success: true, data: data?.[0] }
  } catch (error) {
    console.error("updateSectionResponsible: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
export async function updateProject(
  projectId: string,
  updates: {
    project_name?: string
    project_description?: string | null
    project_manager?: string | null
    project_lead_engineer?: string | null
    project_status?:
      | 'draft'
      | 'active'
      | 'completed'
      | 'paused'
      | 'waiting for input data'
      | 'author supervision'
      | 'actual calculation'
      | 'customer approval'
    client_id?: string | null
  }
): Promise<{ success: boolean; error?: string; data?: any }> {
  try {
    console.log("updateProject: –Ω–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", { projectId, updates })

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
    const { data: existingProject, error: checkError } = await supabase
      .from("projects")
      .select("project_id, project_name")
      .eq("project_id", projectId)
      .single()

    if (checkError) {
      console.error("updateProject: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞:", checkError)
      return { success: false, error: `–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${checkError.message}` }
    }

    console.log("updateProject: –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç:", existingProject)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    const { data, error } = await supabase
      .from("projects")
      .update({
        ...updates,
        project_updated: new Date().toISOString(),
      })
      .eq("project_id", projectId)
      .select()

    if (error) {
      console.error("updateProject: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error)
      return { success: false, error: error.message }
    }

    console.log("updateProject: —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", data)
    return { success: true, data: data?.[0] }
  } catch (error) {
    console.error("updateProject: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error)
    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
export async function createProject(newProject: {
  project_name: string
  project_description?: string | null
  project_manager?: string | null
  project_lead_engineer?: string | null
  project_status:
    | 'draft'
    | 'active'
    | 'completed'
    | 'paused'
    | 'waiting for input data'
    | 'author supervision'
    | 'actual calculation'
    | 'customer approval'
  client_id?: string | null
}): Promise<{ success: boolean; error?: string; projectId?: string }> {
  try {
    console.log('createProject: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', newProject)
    const { data, error } = await supabase
      .from('projects')
      .insert({
        project_name: newProject.project_name,
        project_description: newProject.project_description ?? null,
        project_manager: newProject.project_manager ?? null,
        project_lead_engineer: newProject.project_lead_engineer ?? null,
        project_status: newProject.project_status,
        client_id: newProject.client_id ?? null,
        project_created: new Date().toISOString(),
        project_updated: new Date().toISOString(),
      })
      .select('project_id')
      .single()

    if (error) {
      console.error('createProject: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏', error)
      return { success: false, error: error.message }
    }

    return { success: true, projectId: data.project_id }
  } catch (error) {
    console.error('createProject: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', error)
    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞' }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
export async function fetchProjectObjects(
  projectId: string,
  signal?: AbortSignal,
): Promise<{ id: string; name: string; projectId: string }[] | StructuredError> {
  try {
    if (!projectId) {
      console.warn("fetchProjectObjects: projectId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
      return []
    }

    console.log("fetchProjectObjects: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", projectId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    if (!supabase) {
      console.error("fetchProjectObjects: –∫–ª–∏–µ–Ω—Ç Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
      return {
        success: false,
        error: "–ö–ª–∏–µ–Ω—Ç Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
        details: { projectId }
      }
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    console.log("fetchProjectObjects: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è view_section_hierarchy")
    const { data: viewExists, error: viewError } = await supabase
      .from("view_section_hierarchy")
      .select("object_id")
      .limit(1)

    if (viewError) {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      const errorInfo = {
        message: viewError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        code: viewError.code || 'NO_CODE',
        details: viewError.details || '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π',
        hint: viewError.hint || '–ù–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏',
        originalError: JSON.stringify(viewError, null, 2)
      }
      
      console.error("fetchProjectObjects: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ view_section_hierarchy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:", errorInfo)
      return {
        success: false,
        error: `–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ view_section_hierarchy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${errorInfo.message}`,
        details: errorInfo
      }
    }

    console.log("fetchProjectObjects: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", viewExists?.length || 0)

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ view_section_hierarchy
    const query = supabase
      .from("view_section_hierarchy")
      .select("object_id, object_name")
      .eq("project_id", projectId)
      .not("object_id", "is", null)
      .not("object_name", "is", null)

    console.log("fetchProjectObjects: –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", projectId)

    // –î–æ–±–∞–≤–ª—è–µ–º AbortSignal —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    const { data, error } = signal 
      ? await query.abortSignal(signal)
      : await query

    if (error) {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const errorInfo = {
        projectId,
        message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        code: error.code || 'NO_CODE',
        details: error.details || '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π',
        hint: error.hint || '–ù–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏',
        originalError: JSON.stringify(error, null, 2),
        errorType: typeof error,
        errorConstructor: error.constructor?.name || 'Unknown'
      }
      
      console.error("fetchProjectObjects: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:", errorInfo)
      return {
        success: false,
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞: ${errorInfo.message}`,
        details: errorInfo
      }
    }

    console.log("fetchProjectObjects: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", {
      projectId,
      dataLength: data?.length || 0,
      sampleData: data?.slice(0, 3) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    })

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const uniqueObjects = new Map<string, { id: string; name: string; projectId: string }>()

    data?.forEach((item) => {
      if (item.object_id && item.object_name && !uniqueObjects.has(item.object_id)) {
        uniqueObjects.set(item.object_id, {
          id: item.object_id,
          name: item.object_name,
          projectId: projectId,
        })
      }
    })

    const result = Array.from(uniqueObjects.values()).sort((a, b) => a.name.localeCompare(b.name))
    
    console.log("fetchProjectObjects: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:", {
      projectId,
      totalObjects: result.length,
      objectNames: result.map(obj => obj.name)
    })

    return result
  } catch (error) {
    // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –∫–∞–∫ –æ—à–∏–±–∫—É
    if (error instanceof Error && error.name === 'AbortError') {
      console.log("fetchProjectObjects: –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", projectId)
      throw error
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
    const errorInfo = {
      projectId,
      errorName: error instanceof Error ? error.name : typeof error,
      errorMessage: error instanceof Error ? error.message : String(error),
      errorStack: error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞',
      originalError: JSON.stringify(error, Object.getOwnPropertyNames(error), 2),
      errorType: typeof error,
      errorConstructor: error?.constructor?.name || 'Unknown'
    }
    
    console.error("fetchProjectObjects: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", errorInfo)
    
    return {
      success: false,
      error: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: ${errorInfo.errorMessage}`,
      details: errorInfo
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
export async function fetchProjectStages(
  projectId: string,
  signal?: AbortSignal,
): Promise<{ id: string; name: string; description?: string; projectId: string }[] | StructuredError> {
  try {
    if (!projectId) {
      console.warn("fetchProjectStages: projectId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
      return []
    }

    console.log("fetchProjectStages: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", projectId)

    if (!supabase) {
      console.error("fetchProjectStages: –∫–ª–∏–µ–Ω—Ç Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
      return {
        success: false,
        error: "–ö–ª–∏–µ–Ω—Ç Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
        details: { projectId }
      }
    }

    const query = supabase
      .from("stages")
      .select("stage_id, stage_name, stage_description")
      .eq("stage_project_id", projectId)

    console.log("fetchProjectStages: –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", projectId)

    const { data, error } = signal 
      ? await query.abortSignal(signal)
      : await query

    if (error) {
      const errorInfo = {
        projectId,
        message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        code: error.code || 'NO_CODE',
        details: error.details || '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π',
        originalError: JSON.stringify(error, null, 2)
      }
      
      console.error("fetchProjectStages: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:", errorInfo)
      return {
        success: false,
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞: ${errorInfo.message}`,
        details: errorInfo
      }
    }

    console.log("fetchProjectStages: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", {
      projectId,
      dataLength: data?.length || 0,
      sampleData: data?.slice(0, 3)
    })

    const result = data?.map((item) => ({
      id: item.stage_id,
      name: item.stage_name,
      description: item.stage_description || undefined,
      projectId: projectId,
    })).sort((a, b) => a.name.localeCompare(b.name)) || []
    
    console.log("fetchProjectStages: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–∞–ø–æ–≤:", {
      projectId,
      totalStages: result.length,
      stageNames: result.map(stage => stage.name)
    })

    return result
  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      console.log("fetchProjectStages: –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", projectId)
      throw error
    }
    
    const errorInfo = {
      projectId,
      errorName: error instanceof Error ? error.name : typeof error,
      errorMessage: error instanceof Error ? error.message : String(error),
      errorStack: error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞',
      originalError: JSON.stringify(error, Object.getOwnPropertyNames(error), 2)
    }
    
    console.error("fetchProjectStages: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", errorInfo)
    
    return {
      success: false,
      error: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: ${errorInfo.errorMessage}`,
      details: errorInfo
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —ç—Ç–∞–ø–∞
export async function fetchStageObjects(
  stageId: string,
  signal?: AbortSignal,
): Promise<{ id: string; name: string; description?: string; stageId: string }[] | StructuredError> {
  try {
    if (!stageId) {
      console.warn("fetchStageObjects: stageId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
      return []
    }

    console.log("fetchStageObjects: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞", stageId)

    if (!supabase) {
      console.error("fetchStageObjects: –∫–ª–∏–µ–Ω—Ç Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
      return {
        success: false,
        error: "–ö–ª–∏–µ–Ω—Ç Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
        details: { stageId }
      }
    }

    const query = supabase
      .from("objects")
      .select("object_id, object_name, object_description")
      .eq("object_stage_id", stageId)

    console.log("fetchStageObjects: –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è —ç—Ç–∞–ø–∞", stageId)

    const { data, error } = signal 
      ? await query.abortSignal(signal)
      : await query

    if (error) {
      const errorInfo = {
        stageId,
        message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        code: error.code || 'NO_CODE',
        details: error.details || '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π',
        originalError: JSON.stringify(error, null, 2)
      }
      
      console.error("fetchStageObjects: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:", errorInfo)
      return {
        success: false,
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã —ç—Ç–∞–ø–∞: ${errorInfo.message}`,
        details: errorInfo
      }
    }

    console.log("fetchStageObjects: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", {
      stageId,
      dataLength: data?.length || 0,
      sampleData: data?.slice(0, 3)
    })

    const result = data?.map((item) => ({
      id: item.object_id,
      name: item.object_name,
      description: item.object_description || undefined,
      stageId: stageId,
    })).sort((a, b) => a.name.localeCompare(b.name)) || []
    
    console.log("fetchStageObjects: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:", {
      stageId,
      totalObjects: result.length,
      objectNames: result.map(obj => obj.name)
    })

    return result
  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      console.log("fetchStageObjects: –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è —ç—Ç–∞–ø–∞", stageId)
      throw error
    }
    
    const errorInfo = {
      stageId,
      errorName: error instanceof Error ? error.name : typeof error,
      errorMessage: error instanceof Error ? error.message : String(error),
      errorStack: error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞',
      originalError: JSON.stringify(error, Object.getOwnPropertyNames(error), 2)
    }
    
    console.error("fetchStageObjects: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", errorInfo)
    
    return {
      success: false,
      error: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ —ç—Ç–∞–ø–∞: ${errorInfo.errorMessage}`,
      details: errorInfo
    }
  }
}
