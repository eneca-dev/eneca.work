"use client";

import React, { useState, useEffect } from 'react';
import { useDashboardStore } from '../../stores/useDashboardStore';
import { useAutoRefresh } from '../../hooks/useAutoRefresh';
import { createClient } from '@/utils/supabase/client';
import { LoadingCard, ErrorCard } from '../ui/CardStates';
import { useProjectsStore } from '@/modules/projects/store';
import { CommentItem, SectionComment, UserProfile } from '../../types';

interface LastCommentsCardProps {
  onClose?: () => void; // Callback –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∞—à–±–æ—Ä–¥–∞
}

export const LastCommentsCard: React.FC<LastCommentsCardProps> = ({ onClose }) => {
  const projectId = useDashboardStore((state) => state.projectId);
  const { highlightSection } = useProjectsStore();
  const [comments, setComments] = useState<CommentItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML —Ç–µ–≥–æ–≤
  const stripHtml = (html: string) => {
    return html.replace(/<[^>]*>/g, '').trim();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const truncateText = (text: string, maxLength: number = 50) => {
    const cleanText = stripHtml(text);
    return cleanText.length > maxLength ? cleanText.slice(0, maxLength) + '...' : cleanText;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
  const handleCommentClick = (sectionId: string) => {
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    highlightSection(sectionId);
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ —á–µ—Ä–µ–∑ callback –∏–∑ ProjectsPage
    if (onClose) {
      onClose();
    }
  };

  const fetchData = async () => {
    if (!projectId) return;

    setIsLoading(true);
    setError(null);

    try {
      const supabase = createClient();

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      const { data: commentsData, error: commentsError } = await supabase
        .from('section_comments')
        .select(`
          comment_id,
          section_id,
          content,
          created_at,
          author_id,
          sections!inner (
            section_id,
            section_project_id
          )
        `)
        .eq('sections.section_project_id', projectId)
        .order('created_at', { ascending: false })
        .limit(10);

      if (commentsError) {
        throw new Error(commentsError.message);
      }

      if (!commentsData || commentsData.length === 0) {
        setComments([]);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
      const userIds = [...new Set(commentsData.map(comment => comment.author_id).filter(Boolean))];
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: profilesData, error: profilesError } = await supabase
        .from('profiles')
        .select('user_id, first_name, last_name, email')
        .in('user_id', userIds);

      if (profilesError && process.env.NODE_ENV === 'development') {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', profilesError);
      }

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const profilesMap = new Map<string, UserProfile>();
      if (profilesData) {
        profilesData.forEach((profile: UserProfile) => {
          profilesMap.set(profile.user_id, profile);
        });
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const formattedComments: CommentItem[] = commentsData.map((comment: SectionComment) => {
        const profile = profilesMap.get(comment.author_id);
        const userName = profile 
          ? `${profile.first_name} ${profile.last_name}`.trim() || profile.email
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        return {
          id: comment.comment_id,
          section_id: comment.section_id,
          user: userName,
          comment: comment.content || '',
          time: comment.created_at
        };
      });

      setComments(formattedComments);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.';
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
      if (process.env.NODE_ENV === 'development') {
        console.error('Error fetching comments:', err);
      }
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    let isCancelled = false;
    
    // üîë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    setComments([]);
    setIsLoading(true);
    setError(null);
    
    const fetchDataWithCancel = async () => {
      if (!projectId || isCancelled) return;
      await fetchData();
    };
    
    fetchDataWithCancel();
    
    return () => {
      isCancelled = true;
    };
  }, [projectId]);

  // üîë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  useAutoRefresh(projectId || '', fetchData);

  if (isLoading) {
    return <LoadingCard title="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" />;
  }

  if (error) {
    return <ErrorCard message={error} onRetry={() => fetchData()} />;
  }

  return (
    <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl p-4 h-full flex flex-col shadow-lg hover:shadow-xl transition-all duration-300">
      <h3 className="text-muted-foreground text-sm mb-3">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h3>
      
      <div 
        className="space-y-1 flex-1 overflow-y-auto pr-1 scrollbar-hide"
        style={{
          scrollbarWidth: 'none', /* Firefox */
          msOverflowStyle: 'none'  /* IE and Edge */
        }}
      >
        
        {comments.length > 0 ? (
          comments.map((comment) => (
            <div 
              key={comment.id}
              className="cursor-pointer hover:bg-accent p-1.5 rounded-lg transition-colors duration-200"
              onClick={() => handleCommentClick(comment.section_id)}
            >
                                        <p className="leading-tight">
                            <span className="text-primary font-medium text-sm">
                              {comment.user}: 
                            </span>
                            <span className="text-card-foreground text-sm ml-1">
                              {truncateText(comment.comment)}
                            </span>
                          </p>
            </div>
          ))
        ) : (
          <div className="flex-1 flex items-center justify-center text-muted-foreground text-sm">
            –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          </div>
        )}
      </div>
    </div>
  );
};