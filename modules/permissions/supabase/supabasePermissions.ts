import { createClient } from "@/utils/supabase/client"
import * as Sentry from "@sentry/nextjs"
import type { Permission, Role } from '../types'

/**
 * –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
 */
export async function getUserPermissions(userId: string): Promise<{
  permissions: string[]
  roles: string[]
  primaryRole: string | null
  error: string | null
}> {
  const supabase = createClient()
  
  try {
    console.log('üîê –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const { data: permissions, error: permissionsError } = await supabase
      .rpc('get_user_permissions', { p_user_id: userId })

    if (permissionsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', permissionsError)
      Sentry.captureException(permissionsError)
      return {
        permissions: [],
        roles: [],
        primaryRole: null,
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${permissionsError.message}`
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ view_user_roles
    const { data: userRoles, error: rolesError } = await supabase
      .from('view_user_roles')
      .select('role_name')
      .eq('user_id', userId)

    if (rolesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π:', rolesError)
      Sentry.captureException(rolesError)
    }

    const roles = userRoles?.map(r => r.role_name) || []

    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–µ—Ä–º–∏—à–µ–Ω–æ–≤ –∏/–∏–ª–∏ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π
    const computePrimaryRole = (perms: string[], rs: string[]): string | null => {
      const set = new Set(perms)
      if (set.has('hierarchy.is_admin')) return 'admin'
      if (set.has('hierarchy.is_department_head')) return 'department_head'
      if (set.has('hierarchy.is_team_lead')) return 'team_lead'
      if (set.has('hierarchy.is_user')) return 'user'
      // fallback –ø–æ –∏–º–µ–Ω–∞–º —Ä–æ–ª–µ–π –∏–∑ view_user_roles
      if (rs.includes('admin')) return 'admin'
      if (rs.includes('department_head')) return 'department_head'
      if (rs.includes('team_lead')) return 'team_lead'
      if (rs.includes('user')) return 'user'
      return null
    }

    const primaryRole = computePrimaryRole(permissions || [], roles)

    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ supabasePermissions:', permissions?.length || 0)
    console.log('üë§ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ supabasePermissions:', roles)
    console.log('‚≠ê –û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å –≤ supabasePermissions:', primaryRole)
    
    return {
      permissions: permissions || [],
      roles,
      primaryRole,
      error: null
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error)
    Sentry.captureException(error)
    
    return {
      permissions: [],
      roles: [],
      primaryRole: null,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–∏
 */
export async function getRolePermissions(roleId: string): Promise<string[]> {
  const supabase = createClient()
  
  try {
    const { data: rolePermissions, error } = await supabase
      .from('role_permissions')
      .select(`
        permissions(name)
      `)
      .eq('role_id', roleId)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–∏:', error)
      Sentry.captureException(error)
      return []
    }

    return rolePermissions ? rolePermissions.map(rp => (rp.permissions as any)?.name).filter(Boolean) : []
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–∏:', error)
    Sentry.captureException(error)
    return []
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function updateUserRole(userId: string, roleId: string): Promise<boolean> {
  const supabase = createClient()
  try {
    // –ù–∞–∑–Ω–∞—á–∞–µ–º (upsert) —Ä–æ–ª—å –≤ user_roles: —Å–Ω–∏–º–µ–º –ø—Ä–µ–∂–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é
    const { error: delErr } = await supabase
      .from('user_roles')
      .delete()
      .eq('user_id', userId)
    if (delErr) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', delErr)
      return false
    }
    const { error } = await supabase
      .from('user_roles')
      .insert({ user_id: userId, role_id: roleId })
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error)
      return false
    }
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ updateUserRole:', error)
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
// –£–ø—Ä–æ—â–µ–Ω–∏–µ –≠—Ç–∞–ø 2: constraints –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–æ–ª–∏
 */
export async function getAllRoles(): Promise<Role[]> {
  const supabase = createClient()
  
  try {
    const { data: roles, error } = await supabase
      .from('roles')
      .select('*')
      .order('name')
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π:', error)
      return []
    }
    
    return roles || []
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getAllRoles:', error)
    return []
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 */
export async function getAllPermissions(): Promise<Permission[]> {
  const supabase = createClient()
  
  try {
    const { data: permissions, error } = await supabase
      .from('permissions')
      .select('*')
      .order('name')
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error)
      return []
    }
    
    return permissions || []
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getAllPermissions:', error)
    return []
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å
 */
export async function createRole(name: string, description?: string): Promise<Role | null> {
  const supabase = createClient()
  
  try {
    const { data: role, error } = await supabase
      .from('roles')
      .insert({ name, description })
      .select()
      .single()
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏:', error)
      return null
    }
    
    return role
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ createRole:', error)
    return null
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å
 */
export async function updateRole(roleId: string, updates: Partial<Pick<Role, 'name' | 'description'>>): Promise<boolean> {
  const supabase = createClient()
  
  try {
    const { error } = await supabase
      .from('roles')
      .update(updates)
      .eq('id', roleId)
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error)
      return false
    }
    
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ updateRole:', error)
    return false
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ä–æ–ª—å
 */
export async function deleteRole(roleId: string): Promise<boolean> {
  const supabase = createClient()
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
    await supabase
      .from('role_permissions')
      .delete()
      .eq('role_id', roleId)
    
    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Ä–æ–ª—å
    const { error } = await supabase
      .from('roles')
      .delete()
      .eq('id', roleId)
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error)
      return false
    }
    
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ deleteRole:', error)
    return false
  }
}

/**
 * –ù–∞–∑–Ω–∞—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–æ–ª–∏
 */
export async function assignPermissionToRole(roleId: string, permissionId: string): Promise<boolean> {
  const supabase = createClient()
  
  try {
    const { error } = await supabase
      .from('role_permissions')
      .insert({ role_id: roleId, permission_id: permissionId })
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–∏:', error)
      return false
    }
    
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ assignPermissionToRole:', error)
    return false
  }
}

/**
 * –û—Ç–∑—ã–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É —Ä–æ–ª–∏
 */
export async function revokePermissionFromRole(roleId: string, permissionId: string): Promise<boolean> {
  const supabase = createClient()
  
  try {
    const { error } = await supabase
      .from('role_permissions')
      .delete()
      .eq('role_id', roleId)
      .eq('permission_id', permissionId)
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É —Ä–æ–ª–∏:', error)
      return false
    }
    
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ revokePermissionFromRole:', error)
    return false
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function checkUserPermission(userId: string, permission: string): Promise<boolean> {
  const supabase = createClient()
  
  try {
    const { data, error } = await supabase
      .rpc('user_has_permission', { 
        p_user_id: userId, 
        p_permission_name: permission 
      })
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error)
      return false
    }
    
    return data || false
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ checkUserPermission:', error)
    return false
  }
}

/**
 * –ù–∞–∑–Ω–∞—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function assignRoleToUser(
  userId: string, 
  roleId: string, 
  assignedBy?: string
): Promise<boolean> {
  const supabase = createClient()
  
  try {
    const { data: newUserRole, error: insertError } = await supabase
      .from('user_roles')
      .insert({
        user_id: userId,
        role_id: roleId,
        assigned_by: assignedBy,
        assigned_at: new Date().toISOString()
      })
      .select()
      .single()
    
    if (insertError) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', insertError)
      return false
    }
    
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ assignRoleToUser:', error)
    return false
  }
}

/**
 * –£–±–∏—Ä–∞–µ—Ç —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function revokeRoleFromUser(userId: string, roleId: string): Promise<boolean> {
  const supabase = createClient()
  
  try {
    const { error } = await supabase
      .from('user_roles')
      .delete()
      .eq('user_id', userId)
      .eq('role_id', roleId)
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return false
    }
    
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ revokeRoleFromUser:', error)
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserRoles(userId: string): Promise<{
  roles: Array<{
    roleId: string
    roleName: string
    assignedAt: string
    assignedByName?: string
  }>
  error: string | null
}> {
  const supabase = createClient()
  
  try {
    const { data: userRoles, error } = await supabase
      .from('view_user_roles')
      .select(`
        role_id,
        role_name,
        assigned_at,
        assigned_by_name
      `)
      .eq('user_id', userId)
      .order('assigned_at', { ascending: true })

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      Sentry.captureException(error)
      return {
        roles: [],
        error: error.message
      }
    }

    const roles = userRoles?.map(ur => ({
      roleId: ur.role_id,
      roleName: ur.role_name,
      assignedAt: ur.assigned_at,
      assignedByName: ur.assigned_by_name
    })) || []
    
    return {
      roles,
      error: null
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getUserRoles:', error)
    return {
      roles: [],
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }
  }
} 