"use client"
import { useCallback, useEffect, useMemo, useState } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Table, TableHead, TableRow, TableHeader, TableBody, TableCell } from "@/components/ui/table"
import { createClient } from "@/utils/supabase/client"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Edit2 } from "lucide-react"
import EntityModal from "./EntityModal"
import DeleteConfirmModal from "./DeleteConfirmModal"
import LoadingState from "./LoadingState"
import EmptyState from "./EmptyState"
import DepartmentHeadModal from "./DepartmentHeadModal"
import RemoveHeadConfirmModal from "./RemoveHeadConfirmModal"
import { toast } from "sonner"
import { useAdminPermissions } from "../hooks/useAdminPermissions"
import * as Sentry from "@sentry/nextjs"

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
const refreshWithDelay = async (fetchFn: () => Promise<void>, initialDelay: number = 300) => {
  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  await new Promise(resolve => setTimeout(resolve, initialDelay))
  await fetchFn()

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  setTimeout(async () => {
    await fetchFn()
  }, 1000)
}

interface Department {
  department_id: string
  department_name: string
  department_head_id: string | null
  head_first_name: string | null
  head_last_name: string | null
  head_full_name: string | null
  head_email: string | null
  head_avatar_url: string | null
}

// –ü—Ä–æ–ø—Å—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
type DepartmentsTabProps =
  | { scope?: 'all' }
  | { scope: 'department'; departmentId: string }

function DepartmentsTab(props: DepartmentsTabProps) {
  const scope = props.scope ?? 'all'
  const departmentId = 'departmentId' in props ? props.departmentId : null
  const [departments, setDepartments] = useState<Department[]>([])
  const [search, setSearch] = useState("")
  const [modalOpen, setModalOpen] = useState(false)
  const [deleteModalOpen, setDeleteModalOpen] = useState(false)
  const [headModalOpen, setHeadModalOpen] = useState(false)
  const [removeHeadModalOpen, setRemoveHeadModalOpen] = useState(false)
  const [modalMode, setModalMode] = useState<"create" | "edit">("create")
  const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  const perms = useAdminPermissions()

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω—ã –ª–∏ –±—ã—Ç—å –≤–∏–¥–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const showManagementControls = perms.canManageDepartments && scope !== 'department'

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  const fetchDepartments = useCallback(async () => {
    return await Sentry.startSpan({
      name: 'Users/DepartmentsTab fetchDepartments',
      op: 'ui.load',
      attributes: { scope, departmentId: departmentId || 'all' }
    }, async () => {
      try {
        setIsLoading(true)
        const supabase = createClient()
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        const { data, error } = await supabase
          .from("view_departments_with_heads")
          .select("*")
          .order("department_name")
          .abortSignal(AbortSignal.timeout(10000)) // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        
        if (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–¥–µ–ª–æ–≤:", error)
          Sentry.captureException(error, { tags: { module: 'users', component: 'DepartmentsTab', action: 'load_departments', error_type: 'db_error' } })
          toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª—ã")
          return
        }
        
        console.log("üìä –î–∞–Ω–Ω—ã–µ –∏–∑ view_departments_with_heads:", data)
        console.log("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:", data?.length)
        
        // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const uniqueData = (data || []).reduce((acc: Department[], dept: Department) => {
          if (!acc.find((d: Department) => d.department_id === dept.department_id)) {
            acc.push(dept)
          }
          return acc
        }, [] as Department[])
        
        console.log("üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:", uniqueData)
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—É–ø
        const scoped = scope === 'department'
          ? (departmentId
              ? uniqueData.filter((d: Department) => d.department_id === departmentId)
              : (() => {
                  console.warn("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: departmentId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ scope='department', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤")
                  return []
                })()
            )
          : uniqueData
        setDepartments(scoped)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–¥–µ–ª–æ–≤:", error)
        Sentry.captureException(error, { tags: { module: 'users', component: 'DepartmentsTab', action: 'fetch_departments', error_type: 'unexpected' } })
        toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
      } finally {
        setIsLoading(false)
      }
    })
  }, [scope, departmentId])

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const forceRefresh = useCallback(async () => {
    Sentry.addBreadcrumb({
      category: 'ui.action',
      level: 'info',
      message: 'DepartmentsTab: forceRefresh clicked'
    })
    console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    setIsLoading(true)
    try {
      await Sentry.startSpan({ name: 'Users/DepartmentsTab forceRefresh', op: 'ui.action' }, async () => {
        await fetchDepartments()
      })
      toast.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error)
      Sentry.captureException(error, { tags: { module: 'users', component: 'DepartmentsTab', action: 'force_refresh', error_type: 'unexpected' } })
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    } finally {
      setIsLoading(false)
    }
  }, [fetchDepartments])

  useEffect(() => {
    fetchDepartments()
  }, [fetchDepartments])

  // –£–¥–∞–ª–µ–Ω—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª, —Ñ–æ–∫—É—Å –æ–∫–Ω–∞, –≤–≤–æ–¥ –≤ –ø–æ–∏—Å–∫).
  // –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —è–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
  const filteredDepartments = useMemo(() => {
    // –°–Ω–∞—á–∞–ª–∞ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ department_id
    const uniqueDepartments = departments.reduce((acc: Department[], dept: Department) => {
      if (!acc.find((d: Department) => d.department_id === dept.department_id)) {
        acc.push(dept)
      }
      return acc
    }, [] as Department[])
    
    // –ó–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫—É
    return uniqueDepartments.filter(dept =>
      dept.department_name.toLowerCase().includes(search.toLowerCase()) ||
      (dept.head_full_name && dept.head_full_name.toLowerCase().includes(search.toLowerCase()))
    )
  }, [departments, search])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞–º–∏
  const handleCreateDepartment = useCallback(async () => {
    Sentry.addBreadcrumb({ category: 'ui.open', level: 'info', message: 'DepartmentsTab: open create department' })
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    await fetchDepartments()
    setModalMode("create")
    setSelectedDepartment(null)
    setModalOpen(true)
  }, [fetchDepartments])

  const handleEditDepartment = useCallback((department: Department) => {
    Sentry.addBreadcrumb({ category: 'ui.open', level: 'info', message: 'DepartmentsTab: open edit department', data: { department_id: department.department_id } })
    setModalMode("edit")
    setSelectedDepartment(department)
    setModalOpen(true)
  }, [])

  const handleDeleteDepartment = useCallback((department: Department) => {
    Sentry.addBreadcrumb({ category: 'ui.open', level: 'info', message: 'DepartmentsTab: open delete department confirm', data: { department_id: department.department_id } })
    setSelectedDepartment(department)
    setDeleteModalOpen(true)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
  const handleAssignHead = useCallback((department: Department) => {
    Sentry.addBreadcrumb({ category: 'ui.open', level: 'info', message: 'DepartmentsTab: open assign head', data: { department_id: department.department_id } })
    setSelectedDepartment(department)
    setHeadModalOpen(true)
  }, [])

  const handleRemoveHeadClick = useCallback((department: Department) => {
    Sentry.addBreadcrumb({ category: 'ui.open', level: 'info', message: 'DepartmentsTab: open remove head confirm', data: { department_id: department.department_id } })
    setSelectedDepartment(department)
    setRemoveHeadModalOpen(true)
  }, [])

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è EntityModal
  const entityData = useMemo(() => {
    if (!selectedDepartment) return undefined
    
    return {
      department_id: selectedDepartment.department_id,
      department_name: selectedDepartment.department_name
    }
  }, [selectedDepartment])

  if (isLoading) {
    return (
      <div className="mb-6 space-y-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <CardTitle className="text-xl font-semibold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏</CardTitle>
                          <div className="flex justify-end gap-2">
              {showManagementControls && (
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–æ–≤..."
                  value={search}
                  onChange={e => {
                    setSearch(e.target.value)
                    Sentry.addBreadcrumb({ category: 'ui.input', level: 'info', message: 'DepartmentsTab: search change', data: { value_length: e.target.value.length } })
                  }}
                  className="max-w-xs"
                />
              )}
              <Button
                variant="outline"
                size="default"
                onClick={forceRefresh}
                disabled={isLoading}
                className="transition-all duration-200 hover:scale-105"
              >
                {isLoading ? (
                  <div className="flex items-center gap-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current"></div>
                    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <div className="text-sm">üîÑ</div>
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </div>
                )}
              </Button>
              {showManagementControls && (
                <Button
                  size="default"
                  onClick={handleCreateDepartment}
                  className="transition-all duration-200 hover:scale-105 hover:shadow-lg"
                >
                  –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª
                </Button>
              )}
            </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="text-base">–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</TableHead>
                  <TableHead className="text-base">–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</TableHead>
                  <TableHead className="w-64 text-right">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                <LoadingState columnCount={3} />
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="mb-6 space-y-6">
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <CardTitle className="text-xl font-semibold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏</CardTitle>
            <div className="flex justify-end gap-2">
              {showManagementControls && (
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–æ–≤..."
                  value={search}
                  onChange={e => {
                    setSearch(e.target.value)
                    Sentry.addBreadcrumb({ category: 'ui.input', level: 'info', message: 'DepartmentsTab: search change', data: { value_length: e.target.value.length } })
                  }}
                  className="max-w-xs"
                />
              )}
              <Button
                variant="outline"
                size="default"
                onClick={forceRefresh}
                disabled={isLoading}
                className="transition-all duration-200 hover:scale-105"
              >
                {isLoading ? (
                  <div className="flex items-center gap-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current"></div>
                    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <div className="text-sm">üîÑ</div>
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </div>
                )}
              </Button>
              {showManagementControls && (
                <Button
                  size="default"
                  onClick={handleCreateDepartment}
                  className="transition-all duration-200 hover:scale-105 hover:shadow-lg"
                >
                  –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª
                </Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-base">–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</TableHead>
                <TableHead className="text-base">–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</TableHead>
                <TableHead className="w-64 text-right">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredDepartments.length > 0 ? (
                filteredDepartments.map((department, index) => (
                  <TableRow key={`dept-${department.department_id}-${index}`}>
                    <TableCell className="text-base font-medium">
                      {department.department_name}
                    </TableCell>
                    <TableCell className="text-base">
                      {department.department_head_id ? (
                        <div className="flex items-center gap-3">
                          <Avatar className="h-8 w-8">
                            <AvatarImage src={department.head_avatar_url || undefined} />
                            <AvatarFallback className="text-xs">
                              {department.head_first_name?.[0]}{department.head_last_name?.[0]}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <div className="font-medium">{department.head_full_name}</div>
                            <div className="text-sm text-muted-foreground">{department.head_email}</div>
                          </div>
                          {showManagementControls && (
                            <Popover>
                              <PopoverTrigger asChild>
                                <Button variant="ghost" size="sm" className="h-8 w-8 p-0 ml-2">
                                  <Edit2 className="h-4 w-4" />
                                </Button>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0">
                                <div className="flex flex-col">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleAssignHead(department)}
                                    className="justify-start rounded-b-none border-b-0"
                                  >
                                    –°–º–µ–Ω–∏—Ç—å
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleRemoveHeadClick(department)}
                                    className="justify-start rounded-t-none"
                                  >
                                    –£–±—Ä–∞—Ç—å
                                  </Button>
                                </div>
                              </PopoverContent>
                            </Popover>
                          )}
                        </div>
                      ) : (
                        <div className="flex items-center gap-3">
                          <span className="text-muted-foreground">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</span>
                          {showManagementControls && (
                            <Popover>
                              <PopoverTrigger asChild>
                                <Button variant="ghost" size="sm" className="h-8 w-8 p-0 ml-2">
                                  <Edit2 className="h-4 w-4" />
                                </Button>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0">
                                <div className="flex flex-col">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleAssignHead(department)}
                                    className="justify-start"
                                  >
                                    –ù–∞–∑–Ω–∞—á–∏—Ç—å
                                  </Button>
                                </div>
                              </PopoverContent>
                            </Popover>
                          )}
                        </div>
                      )}
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        {showManagementControls && (
                          <>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleEditDepartment(department)}
                            >
                              –ò–∑–º–µ–Ω–∏—Ç—å
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDeleteDepartment(department)}
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </Button>
                          </>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={3}>
                    <EmptyState
                      message={
                        search
                          ? "–û—Ç–¥–µ–ª—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                          : "–û—Ç–¥–µ–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
                      }
                      buttonText={showManagementControls ? "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –æ—Ç–¥–µ–ª" : undefined}
                      onButtonClick={showManagementControls ? handleCreateDepartment : undefined}
                    />
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞ */}
      <EntityModal
        open={modalOpen}
        onOpenChange={async (open) => {
          setModalOpen(open)
          // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          if (!open) {
            await refreshWithDelay(fetchDepartments, 300)
          }
        }}
        title={modalMode === "create" ? "–°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª" : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª"}
        mode={modalMode}
        table="departments"
        idField="department_id"
        nameField="department_name"
        entity={entityData}
        existingNames={departments.map(d => d.department_name)}
        entityType="department"
        onSuccess={async () => {
          await refreshWithDelay(fetchDepartments, 500)

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
          if (modalMode === "create") {
            toast.success("–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
          } else {
            toast.success("–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
          }
        }}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ */}
      {selectedDepartment && (
        <DeleteConfirmModal
          open={deleteModalOpen}
          onOpenChange={setDeleteModalOpen}
          title="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞"
          entityName={selectedDepartment.department_name}
          table="departments"
          idField="department_id"
          entityId={selectedDepartment.department_id}
          onConfirm={async () => {
            const response = await Sentry.startSpan({ name: 'Admin/DeleteDepartment', op: 'http', attributes: { department_id: selectedDepartment.department_id } }, async () => fetch(`/api/admin/delete-department?departmentId=${selectedDepartment.department_id}`, {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' }
            }))

            let result: any = null
            try { result = await response.json() } catch {}
            if (!response.ok) {
              throw new Error(result?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª')
            }
          }}
          onSuccess={async () => {
            await refreshWithDelay(fetchDepartments, 300)

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            toast.success("–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
          }}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è */}
      {selectedDepartment && (
        <DepartmentHeadModal
          open={headModalOpen}
          onOpenChange={setHeadModalOpen}
          department={selectedDepartment}
          onSuccess={async () => {
            await refreshWithDelay(fetchDepartments, 300)

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            toast.success("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
          }}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª–∞ */}
      {selectedDepartment && (
        <RemoveHeadConfirmModal
          open={removeHeadModalOpen}
          onOpenChange={setRemoveHeadModalOpen}
          type="department"
          entityName={selectedDepartment.department_name}
          entityId={selectedDepartment.department_id}
          onSuccess={async () => {
            await refreshWithDelay(fetchDepartments, 300)

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            toast.success("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
          }}
        />
      )}
    </div>
  )
}

export default Sentry.withProfiler(DepartmentsTab, { name: 'DepartmentsTab' })