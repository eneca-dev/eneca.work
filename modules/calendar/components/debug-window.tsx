"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/modules/calendar/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/modules/calendar/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { X, Minimize2, Maximize2, Trash2 } from "lucide-react"
import { useUserStore } from "@/stores/useUserStore"
import { createClient } from "@/utils/supabase/client"

interface DebugLog {
  id: string
  timestamp: Date
  type: 'request' | 'response' | 'error' | 'permission_check'
  method: string
  url?: string
  data?: any
  status?: number
  duration?: number
}

interface PermissionCheck {
  id: string
  timestamp: Date
  permission: string
  userId: string | null
  userRole: string | null
  userPermissions: string[]
  hasPermission: boolean
  rawUserData: any
  rawRoleData?: any
  rawPermissionsData?: any
  checkSource: string
}

interface DebugWindowProps {
  isOpen: boolean
  onClose: () => void
}

export function DebugWindow({ isOpen }: DebugWindowProps) {
  const [logs, setLogs] = useState<DebugLog[]>([])
  const [permissionChecks, setPermissionChecks] = useState<PermissionCheck[]>([])
  const [activeTab, setActiveTab] = useState<'logs' | 'permissions'>('logs')
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const logCounterRef = useRef(0)
  const permissionCounterRef = useRef(0)
  const userStore = useUserStore()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞
  const addLog = (log: Omit<DebugLog, 'id' | 'timestamp'>) => {
    logCounterRef.current += 1
    const newLog: DebugLog = {
      ...log,
      id: `${Date.now()}-${logCounterRef.current}`,
      timestamp: new Date()
    }
    setLogs(prev => [...prev, newLog])
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  const addPermissionCheck = (check: Omit<PermissionCheck, 'id' | 'timestamp'>) => {
    permissionCounterRef.current += 1
    const newCheck: PermissionCheck = {
      ...check,
      id: `perm-${Date.now()}-${permissionCounterRef.current}`,
      timestamp: new Date()
    }
    setPermissionChecks(prev => [...prev, newCheck])
  }

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º hasPermission –≤ userStore –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (!isOpen) return

    const originalHasPermission = userStore.hasPermission
    
    // –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è hasPermission
    userStore.hasPermission = (permission: string) => {
      const userState = userStore
      const result = originalHasPermission(permission)
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log(`üîê –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–Ø: ${permission}`)
      console.log('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        id: userState.id,
        email: userState.email,
        name: userState.name,
        isAuthenticated: userState.isAuthenticated,
        role: userState.role,
        permissions: userState.permissions,
        profile: userState.profile
      })
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${result ? '–†–ê–ó–†–ï–®–ï–ù–û' : '–ó–ê–ü–†–ï–©–ï–ù–û'}`)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ–±–∞–≥
      addPermissionCheck({
        permission,
        userId: userState.id,
        userRole: userState.role,
        userPermissions: [...userState.permissions],
        hasPermission: result,
        rawUserData: {
          id: userState.id,
          email: userState.email,
          name: userState.name,
          isAuthenticated: userState.isAuthenticated,
          role: userState.role,
          permissions: [...userState.permissions],
          profile: JSON.parse(JSON.stringify(userState.profile || {}))
        },
        checkSource: 'userStore.hasPermission'
      })
      
      return result
    }

    return () => {
      userStore.hasPermission = originalHasPermission
    }
  }, [isOpen, userStore])

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (!isOpen) return

    const originalLoadUserPermissions = userStore.loadUserPermissions
    
    userStore.loadUserPermissions = async (userId: string) => {
      console.log(`üîÑ –ó–ê–ì–†–£–ó–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô –ò–ó –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`)
      
      try {
        const supabase = createClient()
        const currentUserState = userStore
        
        console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          id: currentUserState.id,
          profile: currentUserState.profile
        })
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ roleId –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        if (currentUserState.profile?.roleId) {
          console.log(`üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú ROLE_ID –ò–ó –ü–†–û–§–ò–õ–Ø: ${currentUserState.profile.roleId}`)
          
          // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ roleId
          const { data: roleData, error: roleError } = await supabase
            .from("roles")
            .select("name, description")
            .eq("id", currentUserState.profile.roleId)
            .single();
          
          console.log('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ roles (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è):', { roleData, roleError })
          
          if (roleError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è')
            addPermissionCheck({
              permission: 'LOAD_PERMISSIONS_PROFILE_ROLE',
              userId,
              userRole: null,
              userPermissions: [],
              hasPermission: false,
              rawUserData: { profileRoleId: currentUserState.profile.roleId },
              rawRoleData: { error: roleError },
              checkSource: 'loadUserPermissions - profile roleId -> roles'
            })
            return originalLoadUserPermissions(userId)
          }
          
          // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏
          const { data: rolePermissions, error: permissionsError } = await supabase
            .from("role_permissions")
            .select("permission_id")
            .eq("role_id", currentUserState.profile.roleId);
          
          console.log('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ role_permissions (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è):', { rolePermissions, permissionsError })
          
          if (permissionsError || !rolePermissions || rolePermissions.length === 0) {
            console.log('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ä–æ–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è')
            addPermissionCheck({
              permission: 'LOAD_PERMISSIONS_PROFILE_ROLE',
              userId,
              userRole: roleData.name,
              userPermissions: [],
              hasPermission: false,
              rawUserData: { profileRoleId: currentUserState.profile.roleId },
              rawRoleData: { roleData },
              rawPermissionsData: { error: permissionsError, data: rolePermissions },
              checkSource: 'loadUserPermissions - profile roleId -> role_permissions'
            })
            return originalLoadUserPermissions(userId)
          }
          
          // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
          const permissionIds = rolePermissions.map((p: { permission_id: string }) => p.permission_id)
          console.log(`üì° –ó–∞–ø—Ä–æ—Å permissions –¥–ª—è IDs –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: ${permissionIds.join(', ')}`)
          
          const { data: permissions, error: permNameError } = await supabase
            .from("permissions")
            .select("name")
            .in("id", permissionIds);
          
          console.log('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ permissions (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è):', { permissions, permNameError })
          
          const permissionNames = permissions ? permissions.map((p: { name: string }) => p.name) : []
          
          console.log(`‚úÖ –ò–¢–û–ì–û–í–´–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ò–ó –ü–†–û–§–ò–õ–Ø: ${permissionNames.join(', ')}`)
          
          // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          addPermissionCheck({
            permission: 'LOAD_PERMISSIONS_PROFILE_SUCCESS',
            userId,
            userRole: roleData.name,
            userPermissions: [...permissionNames],
            hasPermission: true,
            rawUserData: { profileRoleId: currentUserState.profile.roleId },
            rawRoleData: { roleData },
            rawPermissionsData: { rolePermissions, permissions },
            checkSource: 'loadUserPermissions - profile roleId complete'
          })
          
        } else {
          console.log('üîÑ PROFILE.ROLE_ID –û–¢–°–£–¢–°–¢–í–£–ï–¢, –ò–°–ü–û–õ–¨–ó–£–ï–ú USER_ROLES')
          
          // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —á–µ—Ä–µ–∑ user_roles
          console.log('üì° –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å user_roles')
          const { data: userRoles, error: userRolesError } = await supabase
            .from("user_roles")
            .select("role_id")
            .eq("user_id", userId);
          
          console.log('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ user_roles:', { userRoles, userRolesError })
          
          if (userRolesError || !userRoles || userRoles.length === 0) {
            console.log('‚ùå –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ user_roles')
            addPermissionCheck({
              permission: 'LOAD_PERMISSIONS_USER_ROLES',
              userId,
              userRole: null,
              userPermissions: [],
              hasPermission: false,
              rawUserData: { error: userRolesError, data: userRoles },
              checkSource: 'loadUserPermissions - user_roles fallback'
            })
            return originalLoadUserPermissions(userId)
          }
          
          const roleId = userRoles[0].role_id
          console.log(`üì° –ù–∞–π–¥–µ–Ω roleId –≤ user_roles: ${roleId}`)
          
          // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è –∂–µ...
          addPermissionCheck({
            permission: 'LOAD_PERMISSIONS_USER_ROLES_SUCCESS',
            userId,
            userRole: 'processing...',
            userPermissions: [],
            hasPermission: true,
            rawUserData: { userRoles },
            checkSource: 'loadUserPermissions - user_roles fallback found roleId'
          })
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return originalLoadUserPermissions(userId)
        
      } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error)
        addPermissionCheck({
          permission: 'LOAD_PERMISSIONS_ERROR',
          userId,
          userRole: null,
          userPermissions: [],
          hasPermission: false,
          rawUserData: { error: String(error) },
          checkSource: 'loadUserPermissions - exception'
        })
      }
    }

    return () => {
      userStore.loadUserPermissions = originalLoadUserPermissions
    }
  }, [isOpen, userStore])

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç console.log –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  useEffect(() => {
    if (!isOpen) return

    const originalConsoleLog = console.log
    
    console.log = (...args) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ª–æ–≥–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
      const message = args.join(' ')
      if (message.includes('–°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Å–µ—Ç–∫–µ') || 
          message.includes('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π') || 
          message.includes('–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏') ||
          message.includes('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π') ||
          message.includes('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') ||
          message.includes('üî¥ –î–µ–Ω—å') ||
          message.includes('üìÖ –î–µ–Ω—å') ||
          message.includes('–ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–Ø') ||
          message.includes('–ó–ê–ì–†–£–ó–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô') ||
          message.includes('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞')) {
        
        addLog({
          type: 'request',
          method: 'LOG',
          url: 'Console Debug',
          data: args
        })
      }
      
      return originalConsoleLog(...args)
    }

    return () => {
      console.log = originalConsoleLog
    }
  }, [isOpen])

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
  useEffect(() => {
    if (!isOpen) return

    const originalFetch = window.fetch
    
    window.fetch = async (...args) => {
      const [url, options] = args
      const startTime = Date.now()
      const urlString = url instanceof Request ? url.url : url.toString()
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
      const isCalendarRelated = urlString.includes('calendar_events') || 
                               urlString.includes('work_schedules') ||
                               urlString.includes('users') ||
                               urlString.includes('user_roles') ||
                               urlString.includes('roles') ||
                               urlString.includes('permissions') ||
                               urlString.includes('role_permissions') ||
                               urlString.includes('supabase')
      
      if (!isCalendarRelated) {
        return originalFetch(...args)
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      addLog({
        type: 'request',
        method: options?.method || 'GET',
        url: urlString,
        data: options?.body ? (() => {
          try {
            return JSON.parse(options.body as string)
          } catch {
            return options.body
          }
        })() : undefined
      })

      try {
        const response = await originalFetch(...args)
        const endTime = Date.now()
        const duration = endTime - startTime

        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
        const responseClone = response.clone()
        let responseData
        try {
          responseData = await responseClone.json()
        } catch {
          responseData = await responseClone.text()
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        addLog({
          type: 'response',
          method: options?.method || 'GET',
          url: urlString,
          data: responseData,
          status: response.status,
          duration
        })

        return response
      } catch (error) {
        const endTime = Date.now()
        const duration = endTime - startTime

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        addLog({
          type: 'error',
          method: options?.method || 'GET',
          url: urlString,
          data: error,
          duration
        })

        throw error
      }
    }

    return () => {
      window.fetch = originalFetch
    }
  }, [isOpen])

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ª–æ–≥—É
  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [logs, permissionChecks])

  const clearLogs = () => {
    setLogs([])
  }

  const clearPermissionChecks = () => {
    setPermissionChecks([])
  }

  const getLogColor = (type: DebugLog['type']) => {
    switch (type) {
      case 'request':
        return 'bg-blue-100 text-blue-800'
      case 'response':
        return 'bg-green-100 text-green-800'
      case 'error':
        return 'bg-red-100 text-red-800'
      case 'permission_check':
        return 'bg-purple-100 text-purple-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const getPermissionColor = (hasPermission: boolean) => {
    return hasPermission ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
  }

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit', 
      second: '2-digit',
      fractionalSecondDigits: 3
    })
  }

  if (!isOpen) return null

  return (
    <div className="w-full">
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∞–±–æ–≤ */}
      <div className="flex items-center gap-4 mb-4">
        <Button
          variant={activeTab === 'logs' ? 'default' : 'outline'}
          onClick={() => setActiveTab('logs')}
          className="h-8"
        >
          API –õ–æ–≥–∏ ({logs.length})
        </Button>
        <Button
          variant={activeTab === 'permissions' ? 'default' : 'outline'}
          onClick={() => setActiveTab('permissions')}
          className="h-8"
        >
          –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π ({permissionChecks.length})
        </Button>
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium">
            {activeTab === 'logs' ? `API –õ–æ–≥–∏ (${logs.length})` : `–ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (${permissionChecks.length})`}
          </span>
          <Badge variant="outline" className="text-xs">
            –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          </Badge>
          {activeTab === 'permissions' && permissionChecks.length > 100 && (
            <Badge variant="destructive" className="text-xs">
              ‚ö†Ô∏è –ú–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫! –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            </Badge>
          )}
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={activeTab === 'logs' ? clearLogs : clearPermissionChecks}
          className="h-8"
        >
          <Trash2 className="h-4 w-4 mr-1" />
          –û—á–∏—Å—Ç–∏—Ç—å
        </Button>
      </div>

      <ScrollArea className="h-96 w-full border rounded-md p-4" ref={scrollAreaRef}>
        {activeTab === 'logs' ? (
          // API –õ–æ–≥–∏
          logs.length === 0 ? (
            <div className="text-center text-gray-500 py-8">
              <p>API –ª–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ</p>
              <p className="text-sm">–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤</p>
            </div>
          ) : (
            <div className="space-y-2">
              {logs.map((log) => (
                <div key={log.id} className="border rounded-lg p-3 bg-white">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Badge className={getLogColor(log.type)}>
                        {log.type.toUpperCase()}
                      </Badge>
                      <span className="font-mono text-sm font-medium">
                        {log.method}
                      </span>
                      {log.status && (
                        <Badge variant={log.status >= 400 ? 'destructive' : 'secondary'}>
                          {log.status}
                        </Badge>
                      )}
                      {log.duration && (
                        <span className="text-xs text-gray-500">
                          {log.duration}ms
                        </span>
                      )}
                    </div>
                    <span className="text-xs text-gray-500 font-mono">
                      {formatTime(log.timestamp)}
                    </span>
                  </div>
                  
                  {log.url && (
                    <div className="mb-2">
                      <span className="text-xs font-medium text-gray-600">URL:</span>
                      <div className="font-mono text-xs bg-gray-50 p-1 rounded break-all">
                        {log.url}
                      </div>
                    </div>
                  )}
                  
                  {log.data && (
                    <div>
                      <span className="text-xs font-medium text-gray-600">–î–∞–Ω–Ω—ã–µ:</span>
                      <pre className="text-xs bg-gray-50 p-2 rounded overflow-auto max-h-32">
                        {typeof log.data === 'string' 
                          ? log.data 
                          : JSON.stringify(log.data, null, 2)
                        }
                      </pre>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )
        ) : (
          // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
          permissionChecks.length === 0 ? (
            <div className="text-center text-gray-500 py-8">
              <p>–ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å</p>
              <p className="text-sm">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, —Ç—Ä–µ–±—É—é—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</p>
            </div>
          ) : (
            <div className="space-y-3">
              {permissionChecks.length > 50 && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-3">
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600 font-bold">‚ö†Ô∏è</span>
                    <div className="text-sm">
                      <p className="font-medium text-yellow-800 mb-1">
                        –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {permissionChecks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                      </p>
                      <p className="text-yellow-700 mb-2">
                        –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
                        –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ hasPermission() –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è useMemo().
                      </p>
                      <p className="text-yellow-700 text-xs">
                        üí° –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ userStore.permissions.includes() –≤–º–µ—Å—Ç–æ hasPermission(), 
                        –∏–ª–∏ –æ–±–µ—Ä–Ω–∏—Ç–µ hasPermission() –≤ useMemo() —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ [userStore.id, userStore.role, userStore.permissions]
                      </p>
                    </div>
                  </div>
                </div>
              )}
              {permissionChecks.map((check) => (
                <div key={check.id} className="border rounded-lg p-4 bg-white">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <Badge className={getPermissionColor(check.hasPermission)}>
                        {check.hasPermission ? '‚úÖ –†–ê–ó–†–ï–®–ï–ù–û' : '‚ùå –ó–ê–ü–†–ï–©–ï–ù–û'}
                      </Badge>
                      <span className="font-mono text-sm font-medium">
                        {check.permission}
                      </span>
                    </div>
                    <span className="text-xs text-gray-500 font-mono">
                      {formatTime(check.timestamp)}
                    </span>
                  </div>
                  
                  <div className="mb-2">
                    <span className="text-xs font-medium text-gray-600">–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏:</span>
                    <div className="text-xs bg-blue-50 p-1 rounded">
                      {check.checkSource}
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 gap-3">
                    <div>
                      <span className="text-xs font-medium text-gray-600">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
                      <pre className="text-xs bg-gray-50 p-2 rounded overflow-auto max-h-24">
                        ID: {check.userId || '–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}
                        –†–æ–ª—å: {check.userRole || '–Ω–µ—Ç —Ä–æ–ª–∏'}
                        –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: [{check.userPermissions.join(', ')}]
                      </pre>
                    </div>
                    
                    <div>
                      <span className="text-xs font-medium text-gray-600">–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
                      <pre className="text-xs bg-gray-50 p-2 rounded overflow-auto max-h-32">
                        {JSON.stringify(check.rawUserData, null, 2)}
                      </pre>
                    </div>
                    
                    {check.rawRoleData && (
                      <div>
                        <span className="text-xs font-medium text-gray-600">–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏:</span>
                        <pre className="text-xs bg-yellow-50 p-2 rounded overflow-auto max-h-24">
                          {JSON.stringify(check.rawRoleData, null, 2)}
                        </pre>
                      </div>
                    )}
                    
                    {check.rawPermissionsData && (
                      <div>
                        <span className="text-xs font-medium text-gray-600">–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:</span>
                        <pre className="text-xs bg-green-50 p-2 rounded overflow-auto max-h-24">
                          {JSON.stringify(check.rawPermissionsData, null, 2)}
                        </pre>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )
        )}
      </ScrollArea>
    </div>
  )
} 