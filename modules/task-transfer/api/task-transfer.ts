import { createClient } from '@/utils/supabase/client'
import type { Assignment, TaskFilters, AssignmentStatus, CreateAssignmentData, UpdateAssignmentData, AssignmentAuditRecord } from '../types'

const supabase = createClient()

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
interface AssignmentFromDB {
  assignment_id: string
  project_id: string
  from_section_id: string
  to_section_id: string
  title: string
  description?: string
  status: AssignmentStatus
  created_at: string
  updated_at: string
  due_date?: string
  link?: string
  created_by?: string
  updated_by?: string
  planned_transmitted_date?: string
  planned_duration?: number
  actual_transmitted_date?: string
  actual_accepted_date?: string
  actual_worked_out_date?: string
  actual_agreed_date?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
export async function fetchAssignments(filters: TaskFilters = {}): Promise<Assignment[]> {
  try {
    let query = supabase
      .from('assignments')
      .select('*')
      .order('created_at', { ascending: false })
    

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (filters.projectId) {
      query = query.eq('project_id', filters.projectId)
    }
    
    if (filters.status) {
      query = query.eq('status', filters.status)
    }

    console.log('üìû –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å...')
    const { data, error } = await query

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error)
      throw error
    }

    if (!data || data.length === 0) {
      console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return []
    }

    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.length)
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    const projectIds = [...new Set(data.map(a => a.project_id).filter(Boolean))]
    const sectionIds = [...new Set([
      ...data.map(a => a.from_section_id).filter(Boolean),
      ...data.map(a => a.to_section_id).filter(Boolean)
    ])]
    const userIds = [...new Set([
      ...data.map(a => a.created_by).filter(Boolean),
      ...data.map(a => a.updated_by).filter(Boolean)
    ])]

    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...', {
      projectIds: projectIds.length,
      sectionIds: sectionIds.length,
      userIds: userIds.length
    })

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    const projectsMap = new Map()
    if (projectIds.length > 0) {
      const { data: projects } = await supabase
        .from('projects')
        .select('project_id, project_name')
        .in('project_id', projectIds)
      
      projects?.forEach(p => projectsMap.set(p.project_id, p.project_name))
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', projects?.length || 0)
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
    const sectionsMap = new Map()
    if (sectionIds.length > 0) {
      const { data: sections } = await supabase
        .from('sections')
        .select('section_id, section_name')
        .in('section_id', sectionIds)
      
      sections?.forEach(s => sectionsMap.set(s.section_id, s.section_name))
      console.log('‚úÖ –†–∞–∑–¥–µ–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sections?.length || 0)
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersMap = new Map()
    if (userIds.length > 0) {
      const { data: profiles } = await supabase
        .from('profiles')
        .select('user_id, first_name, last_name')
        .in('user_id', userIds)
      
      profiles?.forEach(p => usersMap.set(p.user_id, `${p.first_name} ${p.last_name}`))
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', profiles?.length || 0)
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const assignments = data.map((assignment: any) => ({
      assignment_id: assignment.assignment_id,
      project_id: assignment.project_id,
      from_section_id: assignment.from_section_id,
      to_section_id: assignment.to_section_id,
      title: assignment.title,
      description: assignment.description,
      status: assignment.status,
      created_at: assignment.created_at,
      updated_at: assignment.updated_at,
      due_date: assignment.due_date,
      link: assignment.link,
      created_by: assignment.created_by,
      updated_by: assignment.updated_by,
      planned_transmitted_date: assignment.planned_transmitted_date,
      planned_duration: assignment.planned_duration,
      actual_transmitted_date: assignment.actual_transmitted_date,
      actual_accepted_date: assignment.actual_accepted_date,
      actual_worked_out_date: assignment.actual_worked_out_date,
      actual_agreed_date: assignment.actual_agreed_date,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      project_name: projectsMap.get(assignment.project_id),
      from_section_name: sectionsMap.get(assignment.from_section_id),
      to_section_name: sectionsMap.get(assignment.to_section_id),
      created_by_name: assignment.created_by ? usersMap.get(assignment.created_by) : undefined,
      updated_by_name: assignment.updated_by ? usersMap.get(assignment.updated_by) : undefined
    }))

    console.log('üéâ –ó–∞–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –≤–æ–∑–≤—Ä–∞—Ç—É:', assignments.length)
    return assignments

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π:', error)
    console.error('‚ùå Stack trace:', error.stack)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ view_section_hierarchy
export async function fetchProjectHierarchy() {
  try {
    const { data, error } = await supabase
      .from('view_section_hierarchy')
      .select('*')
      .order('project_name, stage_name, object_name, section_name')

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error)
      throw error
    }

    return data || []
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
export async function fetchOrganizationalStructure() {
  try {
    const { data, error } = await supabase
      .from('view_organizational_structure')
      .select('*')
      .order('department_name, team_name')

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error)
      throw error
    }

    return data || []
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
export async function fetchEmployees() {
  try {
    const { data, error } = await supabase
      .from('view_employee_workloads')
      .select(`
        user_id,
        full_name,
        final_team_id,
        final_department_id,
        position_name,
        avatar_url
      `)
      .order('full_name')

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error)
      throw error
    }

    // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –∏–º–µ–Ω–∏ (–¥–ª—è —Å–≤—è–∑–∏ —Å view_section_hierarchy)
    const employeesMap = new Map()
    data?.forEach((row: any) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –≤ view_section_hierarchy –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–º–µ–Ω–∞
      const key = row.full_name
      if (!employeesMap.has(key)) {
        employeesMap.set(key, {
          id: row.user_id,
          name: row.full_name,
          teamId: row.final_team_id,
          departmentId: row.final_department_id,
          position: row.position_name,
          avatarUrl: row.avatar_url
        })
      }
    })

    return Array.from(employeesMap.values())
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
export async function fetchSections() {
  try {
    const { data, error } = await supabase
      .from('sections')
      .select('section_id, section_name, section_project_id, section_responsible')
      .order('section_name')

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', error)
      throw error
    }

    if (!data || data.length === 0) {
      return []
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    const responsibleIds = [...new Set(data.map(s => s.section_responsible).filter(Boolean))]
    const responsibleMap = new Map()
    
    if (responsibleIds.length > 0) {
      const { data: profiles } = await supabase
        .from('profiles')
        .select('user_id, first_name, last_name, avatar_url')
        .in('user_id', responsibleIds)
      
      profiles?.forEach(p => responsibleMap.set(p.user_id, {
        name: `${p.first_name} ${p.last_name}`,
        avatar: p.avatar_url
      }))
    }

    return data.map((section: any) => {
      const responsible = responsibleMap.get(section.section_responsible)
      return {
        id: section.section_id,
        name: section.section_name,
        projectId: section.section_project_id,
        responsibleId: section.section_responsible,
        responsibleName: responsible?.name,
        responsibleAvatar: responsible?.avatar
      }
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
export async function createAssignment(assignmentData: CreateAssignmentData) {
  try {
    const { data, error } = await supabase
      .from('assignments')
      .insert({
        project_id: assignmentData.project_id,
        from_section_id: assignmentData.from_section_id,
        to_section_id: assignmentData.to_section_id,
        title: assignmentData.title,
        description: assignmentData.description,
        due_date: assignmentData.due_date,
        link: assignmentData.link,
        planned_transmitted_date: assignmentData.planned_transmitted_date,
        planned_duration: assignmentData.planned_duration,
        status: '–°–æ–∑–¥–∞–Ω–æ' as AssignmentStatus,
        created_at: new Date().toISOString()
      })
      .select()
      .single()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error)
      throw error
    }

    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', data)
    return { success: true, data }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error)
    return { success: false, error }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è
export async function updateAssignmentStatus(assignmentId: string, status: AssignmentStatus) {
  try {
    const { data, error } = await supabase
      .from('assignments')
      .update({ 
        status,
        updated_at: new Date().toISOString()
      })
      .eq('assignment_id', assignmentId)
      .select()
      .single()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
      throw error
    }

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω:', data)
    return { success: true, data }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
    return { success: false, error }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
export async function updateAssignment(assignmentId: string, updateData: UpdateAssignmentData) {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    const { data: oldAssignment, error: fetchError } = await supabase
      .from('assignments')
      .select('title, description, due_date, planned_duration, link')
      .eq('assignment_id', assignmentId)
      .single()

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è:', fetchError)
      throw fetchError
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    const { data, error } = await supabase
      .from('assignments')
      .update({
        ...updateData,
        updated_at: new Date().toISOString()
      })
      .eq('assignment_id', assignmentId)
      .select()
      .single()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error)
      throw error
    }

    // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    if (oldAssignment) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase Auth
        const { data: { user } } = await supabase.auth.getUser()
        
        if (user?.id) {
          console.log('üë§ –°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)
          await createAuditRecords(assignmentId, oldAssignment, updateData, user.id)
        } else {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã')
        }
      } catch (auditError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞:', auditError)
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –∞—É–¥–∏—Ç –Ω–µ —É–¥–∞–ª—Å—è
      }
    }

    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∑–∞–ø–∏—Å—è–º–∏ –∞—É–¥–∏—Ç–∞:', data)
    return { success: true, data }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error)
    return { success: false, error }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
export async function advanceAssignmentStatus(assignmentId: string, currentStatus: AssignmentStatus) {
  return advanceAssignmentStatusWithDuration(assignmentId, currentStatus)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export async function advanceAssignmentStatusWithDuration(assignmentId: string, currentStatus: AssignmentStatus, duration?: number) {
  try {
    const currentDate = new Date().toISOString().split('T')[0] // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    let updateData: any = {
      updated_at: new Date().toISOString()
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    switch (currentStatus) {
      case '–°–æ–∑–¥–∞–Ω–æ':
        updateData.status = '–ü–µ—Ä–µ–¥–∞–Ω–æ'
        updateData.actual_transmitted_date = currentDate
        break
      case '–ü–µ—Ä–µ–¥–∞–Ω–æ':
        updateData.status = '–ü—Ä–∏–Ω—è—Ç–æ'
        updateData.actual_accepted_date = currentDate
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if (duration !== undefined) {
          updateData.planned_duration = duration
        }
        break
      case '–ü—Ä–∏–Ω—è—Ç–æ':
        updateData.status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
        updateData.actual_worked_out_date = currentDate
        break
      case '–í—ã–ø–æ–ª–Ω–µ–Ω–æ':
        updateData.status = '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ'
        updateData.actual_agreed_date = currentDate
        break
      default:
        throw new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ "${currentStatus}"`)
    }

    const { data, error } = await supabase
      .from('assignments')
      .update(updateData)
      .eq('assignment_id', assignmentId)
      .select()
      .single()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
      throw error
    }

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç:', data)
    return { success: true, data }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
    return { success: false, error }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É
export async function revertAssignmentStatus(assignmentId: string, currentStatus: AssignmentStatus) {
  try {
    let updateData: any = {
      updated_at: new Date().toISOString()
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –æ—á–∏—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    switch (currentStatus) {
      case '–ü–µ—Ä–µ–¥–∞–Ω–æ':
        updateData.status = '–°–æ–∑–¥–∞–Ω–æ'
        updateData.actual_transmitted_date = null
        break
      case '–ü—Ä–∏–Ω—è—Ç–æ':
        updateData.status = '–ü–µ—Ä–µ–¥–∞–Ω–æ'
        updateData.actual_accepted_date = null
        break
      case '–í—ã–ø–æ–ª–Ω–µ–Ω–æ':
        updateData.status = '–ü—Ä–∏–Ω—è—Ç–æ'
        updateData.actual_worked_out_date = null
        break
      case '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ':
        updateData.status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
        updateData.actual_agreed_date = null
        break
      default:
        throw new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ "${currentStatus}"`)
    }

    const { data, error } = await supabase
      .from('assignments')
      .update(updateData)
      .eq('assignment_id', assignmentId)
      .select()
      .single()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
      throw error
    }

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –æ—Ç–∫–∞—á–µ–Ω:', data)
    return { success: true, data }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
    return { success: false, error }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è
export async function fetchAssignmentHistory(assignmentId: string): Promise<AssignmentAuditRecord[]> {
  try {
    console.log('üìû –ü–æ–ª—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:', assignmentId)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞
    const { data: auditData, error: auditError } = await supabase
      .from('assignment_audit')
      .select('*')
      .eq('assignment_id', assignmentId)
      .order('changed_at', { ascending: false })

    if (auditError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', auditError)
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(auditError, null, 2))
      throw auditError
    }

    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–∞:', auditData?.length || 0)

    if (!auditData || auditData.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:', assignmentId)
      return []
    }

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userIds = [...new Set(auditData.map(record => record.changed_by).filter(Boolean))]
    console.log('üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏:', userIds.length)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    let usersMap = new Map()
    if (userIds.length > 0) {
      const { data: usersData, error: usersError } = await supabase
        .from('profiles')
        .select('user_id, first_name, last_name, avatar_url')
        .in('user_id', userIds)

      if (usersError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError)
      } else {
        console.log('üë§ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersData?.length || 0)
        usersData?.forEach(user => {
          usersMap.set(user.user_id, {
            name: `${user.first_name || ''} ${user.last_name || ''}`.trim(),
            avatar: user.avatar_url
          })
        })
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const auditRecords = auditData.map((record: any) => {
      const userInfo = usersMap.get(record.changed_by)
      
      return {
        audit_id: record.audit_id,
        assignment_id: record.assignment_id,
        changed_by: record.changed_by,
        changed_at: record.changed_at,
        operation_type: record.operation_type,
        field_name: record.field_name,
        old_value: record.old_value,
        new_value: record.new_value,
        created_at: record.created_at,
        changed_by_name: userInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        changed_by_avatar: userInfo?.avatar
      }
    })

    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', auditRecords.length)
    return auditRecords

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error)
    console.error('‚ùå Stack trace:', error?.stack)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞
export async function createAuditRecords(
  assignmentId: string,
  oldData: Record<string, any>,
  newData: Record<string, any>,
  userId: string
) {
  try {
    console.log('üîç –°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:', assignmentId)
    console.log('üìä –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', oldData)
    console.log('üìä –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', newData)
    
    const auditRecords = []

    for (const [fieldName, newValue] of Object.entries(newData)) {
      const oldValue = oldData[fieldName]
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ undefined
      if (newValue === undefined || oldValue === newValue) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –ø–æ–ª–µ ${fieldName}: –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å`)
        continue
      }

      console.log(`üìù –ü–æ–ª–µ ${fieldName} –∏–∑–º–µ–Ω–µ–Ω–æ: "${oldValue}" ‚Üí "${newValue}"`)
      
      auditRecords.push({
        assignment_id: assignmentId,
        changed_by: userId,
        operation_type: 'UPDATE',
        field_name: fieldName,
        old_value: oldValue?.toString() || null,
        new_value: newValue?.toString() || null
      })
    }

    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${auditRecords.length} –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞...`)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (auditRecords.length > 0) {
      const { data, error } = await supabase
        .from('assignment_audit')
        .insert(auditRecords)
        .select()
        
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞:', error)
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error, null, 2))
        throw error
      }
      
      console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã:', data?.length || 0)
    } else {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∞—É–¥–∏—Ç')
    }

    return auditRecords
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞:', error)
    console.error('‚ùå Stack trace:', error?.stack)
    throw error
  }
} 