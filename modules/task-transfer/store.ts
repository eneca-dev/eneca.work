import { create } from "zustand"
import { devtools } from "zustand/middleware"
import type { 
  Department, 
  Team, 
  Specialist, 
  Project, 
  Stage, 
  Object, 
  Assignment,
  Section,
  SectionHierarchy,
  OrganizationalStructure,
  Employee,
  TaskFilters,
  CreateAssignmentData,
  UpdateAssignmentData,
  AssignmentAuditRecord
} from "./types"
import {
  fetchAssignments,
  fetchProjectHierarchy, 
  fetchOrganizationalStructure, 
  fetchEmployees,
  fetchSections,
  createAssignment,
  updateAssignment,
  advanceAssignmentStatus,
  advanceAssignmentStatusWithDuration,
  revertAssignmentStatus,
  fetchAssignmentHistory,
  createAuditRecords
} from "./api/task-transfer"

interface TaskTransferStore {
  // Data
  departments: Department[]
  teams: Team[]
  specialists: Specialist[]
  projects: Project[]
  sections: Section[]
  stages: Stage[]
  objects: Object[]
  assignments: Assignment[]
  sectionHierarchy: SectionHierarchy[]
  
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  assignmentHistory: Record<string, AssignmentAuditRecord[]>
  isLoadingHistory: boolean
  
  // Loading states
  isLoading: boolean
  isLoadingAssignments: boolean
  isLoadingHierarchy: boolean
  isLoadingOrganization: boolean

  // Actions
  loadInitialData: () => Promise<void>
  loadAssignments: (filters?: TaskFilters) => Promise<void>
  refreshData: () => Promise<void>
  createNewAssignment: (assignmentData: CreateAssignmentData) => Promise<{ success: boolean; error?: any }>
  updateAssignment: (assignmentId: string, updateData: UpdateAssignmentData) => Promise<{ success: boolean; error?: any }>
  advanceStatus: (assignmentId: string, currentStatus: any) => Promise<{ success: boolean; error?: any }>
  advanceStatusWithDuration: (assignmentId: string, currentStatus: any, duration?: number) => Promise<{ success: boolean; error?: any }>
  revertStatus: (assignmentId: string, currentStatus: any) => Promise<{ success: boolean; error?: any }>
  
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  loadAssignmentHistory: (assignmentId: string) => Promise<void>
  clearAssignmentHistory: (assignmentId?: string) => void
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
  getAssignmentsByDirection: (direction: 'outgoing' | 'incoming' | 'all') => Assignment[]
}

export const useTaskTransferStore = create<TaskTransferStore>()(
  devtools(
    (set, get) => ({
  // Initial data
    departments: [],
    teams: [],
    specialists: [],
    projects: [],
      sections: [],
    stages: [],
    objects: [],
      assignments: [],
      sectionHierarchy: [],

      // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      assignmentHistory: {},
      isLoadingHistory: false,

      // Loading states
      isLoading: false,
      isLoadingAssignments: false,
      isLoadingHierarchy: false,
      isLoadingOrganization: false,

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
      getAssignmentsByDirection: (direction) => {
        const state = get()
        
        switch (direction) {
          case 'outgoing':
            return state.assignments.filter(a => a.from_section_id !== null)
          case 'incoming':
            return state.assignments.filter(a => a.to_section_id !== null)
          case 'all':
          default:
            return state.assignments
        }
      },
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      loadInitialData: async () => {
        console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è task-transfer...')
        set({ isLoading: true })
        
        try {
          // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
          const [hierarchyData, organizationData, employeesData, sectionsData] = await Promise.all([
            fetchProjectHierarchy(),
            fetchOrganizationalStructure(),
            fetchEmployees(),
            fetchSections()
          ])
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤
          const projectsMap = new Map<string, Project>()
          const stagesMap = new Map<string, Stage>()
          const objectsMap = new Map<string, Object>()
          
          hierarchyData.forEach((item: SectionHierarchy) => {
            // –ü—Ä–æ–µ–∫—Ç—ã
            if (!projectsMap.has(item.project_id)) {
              projectsMap.set(item.project_id, {
                id: item.project_id,
                name: item.project_name
              })
            }
            
            // –°—Ç–∞–¥–∏–∏
            if (item.stage_id && !stagesMap.has(item.stage_id)) {
              stagesMap.set(item.stage_id, {
                id: item.stage_id,
                projectId: item.project_id,
                name: item.stage_name
              })
            }
            
            // –û–±—ä–µ–∫—Ç—ã
            if (item.object_id && !objectsMap.has(item.object_id)) {
              objectsMap.set(item.object_id, {
                id: item.object_id,
                stageId: item.stage_id,
                name: item.object_name
              })
            }
          })
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          const departmentsMap = new Map<string, Department>()
          const teamsMap = new Map<string, Team>()
          
          organizationData.forEach((item: OrganizationalStructure) => {
            // –û—Ç–¥–µ–ª—ã
            if (!departmentsMap.has(item.department_id)) {
              departmentsMap.set(item.department_id, {
                id: item.department_id,
                name: item.department_name
              })
            }
            
            // –ö–æ–º–∞–Ω–¥—ã
            if (item.team_id && !teamsMap.has(item.team_id)) {
              teamsMap.set(item.team_id, {
                id: item.team_id,
                departmentId: item.department_id,
                name: item.team_name || ''
              })
            }
          })
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
          const specialists: Specialist[] = employeesData.map((emp: Employee) => ({
            id: emp.id,
            teamId: emp.teamId,
            name: emp.name,
            position: emp.position || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
            avatarUrl: emp.avatarUrl,
            responsibleForProjects: [] // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
          }))
          

          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
          const sections: Section[] = sectionsData.map((section: any) => ({
            id: section.id,
            name: section.name,
            projectIds: section.projectId ? [section.projectId] : []
          }))
          
          set({
            projects: Array.from(projectsMap.values()),
            stages: Array.from(stagesMap.values()),
            objects: Array.from(objectsMap.values()),
            sections,
            departments: Array.from(departmentsMap.values()),
            teams: Array.from(teamsMap.values()),
            specialists,
            sectionHierarchy: hierarchyData,
            isLoading: false
          })
          
          console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
            projects: projectsMap.size,
            stages: stagesMap.size,
            objects: objectsMap.size,
            sections: sections.length,
            departments: departmentsMap.size,
            teams: teamsMap.size,
            specialists: specialists.length
          })
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
          try {
            await get().loadAssignments()
          } catch (assignmentError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', assignmentError)
            // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
          }
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
          console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'Unknown error')
          set({ isLoading: false })
        }
      },
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
      loadAssignments: async (filters = {}) => {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters)
        set({ isLoadingAssignments: true })
        
        try {
          console.log('üìû –í—ã–∑—ã–≤–∞—é fetchAssignments...')
          const assignments = await fetchAssignments(filters)
          console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è:', assignments)
          
          set({ assignments, isLoadingAssignments: false })
          console.log('‚úÖ –ó–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ store:', assignments.length)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π –≤ store:', error)
          console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'Unknown error')
          set({ isLoadingAssignments: false })
          throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
      },
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      refreshData: async () => {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...')
        await get().loadInitialData()
      },

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
      createNewAssignment: async (assignmentData: CreateAssignmentData) => {
        try {
          console.log('üöÄ –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...', assignmentData)
          const result = await createAssignment(assignmentData)
          
          if (result.success) {
            console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, –æ–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫...')
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            await get().loadAssignments()
            return { success: true }
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', result.error)
            return { success: false, error: result.error }
          }
        } catch (error) {
          console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error)
          return { success: false, error }
        }
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
      updateAssignment: async (assignmentId: string, updateData: UpdateAssignmentData) => {
        try {
          console.log('üöÄ –û–±–Ω–æ–≤–ª—è—é –∑–∞–¥–∞–Ω–∏–µ...', assignmentId, updateData)
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ (–∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ updateAssignment)
          const result = await updateAssignment(assignmentId, updateData)
          
          if (result.success) {
            console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è—é –ª–æ–∫–∞–ª—å–Ω–æ...')
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –≤ store
            set((state) => ({
              assignments: state.assignments.map(assignment => 
                assignment.assignment_id === assignmentId 
                  ? { 
                      ...assignment, 
                      ...updateData,
                      updated_at: new Date().toISOString()
                    }
                  : assignment
              )
            }))
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
            try {
              console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π...')
              await get().loadAssignmentHistory(assignmentId)
              console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
            } catch (historyError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', historyError)
              // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            }
            
            return { success: true }
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', result.error)
            return { success: false, error: result.error }
          }
        } catch (error) {
          console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error)
          return { success: false, error }
        }
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è
      advanceStatus: async (assignmentId: string, currentStatus: any) => {
        try {
          console.log('üöÄ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è:', assignmentId, '—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', currentStatus)
          const result = await advanceAssignmentStatus(assignmentId, currentStatus)
          
          if (result.success) {
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            await get().loadAssignments()
            return { success: true }
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', result.error)
            return { success: false, error: result.error }
          }
        } catch (error) {
          console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
          return { success: false, error }
        }
      },

      // –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è
      revertStatus: async (assignmentId: string, currentStatus: any) => {
        try {
          console.log('üöÄ –û—Ç–º–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è:', assignmentId, '—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', currentStatus)
          const result = await revertAssignmentStatus(assignmentId, currentStatus)
          
          if (result.success) {
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω')
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
            await get().loadAssignments()
            return { success: true }
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', result.error)
            return { success: false, error: result.error }
          }
        } catch (error) {
          console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
          return { success: false, error }
        }
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
      advanceStatusWithDuration: async (assignmentId: string, currentStatus: any, duration?: number) => {
        try {
          console.log('üöÄ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è:', assignmentId, '—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', currentStatus, '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', duration)
          const result = await advanceAssignmentStatusWithDuration(assignmentId, currentStatus, duration)
          
          if (result.success) {
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            await get().loadAssignments()
            return { success: true }
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', result.error)
            return { success: false, error: result.error }
          }
        } catch (error) {
          console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è:', error)
          return { success: false, error }
        }
      },

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è
      loadAssignmentHistory: async (assignmentId: string) => {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è:', assignmentId)
        set({ isLoadingHistory: true })
        
        try {
          console.log('üìû –í—ã–∑—ã–≤–∞—é fetchAssignmentHistory...')
          const history = await fetchAssignmentHistory(assignmentId)
          console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:', history)
          
          set((state) => ({
            assignmentHistory: {
              ...state.assignmentHistory,
              [assignmentId]: history
            },
            isLoadingHistory: false
          }))
          console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', history.length)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è:', error)
          console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'Unknown error')
          set({ isLoadingHistory: false })
          throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
      },

      // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      clearAssignmentHistory: (assignmentId?: string) => {
        set((state) => ({
          assignmentHistory: assignmentId ? {
            ...state.assignmentHistory,
            [assignmentId]: []
          } : {},
          isLoadingHistory: false
        }))
      }
    }),
    {
      name: 'task-transfer-store'
    }
  )
)
