"use client"

import { useState, useEffect, useMemo } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Info, SquareStack, Calendar as CalendarIcon } from "lucide-react"
import { DatePicker as ProjectDatePicker } from "@/modules/projects/components/DatePicker"
import { useToast } from "@/hooks/use-toast"
import { useTaskTransferStore } from "@/modules/task-transfer/store"
import type { CreateAssignmentData } from "@/modules/task-transfer/types"
import * as Sentry from "@sentry/nextjs"
import { createClient } from "@/utils/supabase/client"

interface CreateObjectAssignmentModalProps {
  isOpen: boolean
  onClose: () => void
  objectId: string
  objectName: string
  projectId: string
  projectName: string
  stageId: string
  sectionId?: string
}

export function CreateObjectAssignmentModal({ 
  isOpen, 
  onClose, 
  objectId, 
  objectName, 
  projectId,
  projectName,
  stageId,
  sectionId
}: CreateObjectAssignmentModalProps) {
  const [direction, setDirection] = useState<'outgoing' | 'incoming'>('outgoing')
  const [fromSectionId, setFromSectionId] = useState<string>("")
  const [toSectionId, setToSectionId] = useState<string>("")
  const [title, setTitle] = useState<string>("")
  const [description, setDescription] = useState<string>("")
  const [plannedDuration, setPlannedDuration] = useState<string>("7")
  const [link, setLink] = useState<string>("")
  const [isCreating, setIsCreating] = useState(false)
  const [fallbackSections, setFallbackSections] = useState<{ id: string; name: string; projectId?: string }[]>([])
  const [treeSections, setTreeSections] = useState<{ id: string; name: string; projectId?: string }[]>([])
  const [effectiveObjectId, setEffectiveObjectId] = useState<string>(objectId || "")
  const [plannedTransmittedDate, setPlannedTransmittedDate] = useState<string | undefined>(undefined)
  
  const { createNewAssignment } = useTaskTransferStore()
  const { toast } = useToast()
  const supabase = createClient()

  // –†–∞–∑–¥–µ–ª—ã –∏–∑ view_project_tree –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–∏–∂–µ –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ

  // –ï—Å–ª–∏ objectId –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ –∏–∑ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–∞),
  // –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ sectionId
  useEffect(() => {
    ;(async () => {
      try {
        if (!isOpen) return
        if (objectId) { setEffectiveObjectId(objectId); return }
        if (!objectId && sectionId) {
          const { data, error } = await supabase
            .from('sections')
            .select('section_object_id')
            .eq('section_id', sectionId)
            .single()
          if (!error && data?.section_object_id) {
            setEffectiveObjectId(data.section_object_id as string)
          } else {
            setEffectiveObjectId("")
          }
        }
      } catch (e) {
        setEffectiveObjectId("")
      }
    })()
  }, [isOpen, objectId, sectionId])

  // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –≤ –≤—å—é—Ö–µ –ø—É—Å—Ç–æ, –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sections –ø–æ effectiveObjectId
  useEffect(() => {
    ;(async () => {
      try {
        if (!isOpen || !effectiveObjectId) return
        if (treeSections.length > 0) {
          if (fallbackSections.length > 0) setFallbackSections([])
          return
        }
        const { data, error } = await supabase
          .from('sections')
          .select('section_id, section_name, section_project_id')
          .eq('section_object_id', effectiveObjectId)
          .order('section_name')
        if (error) {
          console.error('–û—à–∏–±–∫–∞ —Ñ–æ–ª–±—ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É:', error)
          return
        }
        const mapped = (data || [])
          .filter(s => s.section_id && s.section_name)
          .map(s => ({ id: s.section_id as string, name: s.section_name as string, projectId: (s as any).section_project_id as string | undefined }))
        setFallbackSections(mapped)
        console.log('üì• –§–æ–ª–±—ç–∫-—Ä–∞–∑–¥–µ–ª—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sections:', mapped)
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ–ª–±—ç–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', e)
      }
    })()
  }, [isOpen, effectiveObjectId, treeSections.length])

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: –≥—Ä—É–∑–∏–º —Ä–∞–∑–¥–µ–ª—ã –∏–∑ view_project_tree –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∏ –æ–±—ä–µ–∫—Ç—É
  useEffect(() => {
    ;(async () => {
      try {
        if (!isOpen || !projectId || !effectiveObjectId) {
          setTreeSections([])
          return
        }
        const { data, error } = await supabase
          .from('view_project_tree')
          .select('section_id, section_name, project_id, object_id')
          .eq('project_id', projectId)
          .eq('object_id', effectiveObjectId)
          .order('section_name')

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ view_project_tree:', error)
          setTreeSections([])
          return
        }

        const mapped = (data || [])
          .filter(row => row.section_id && row.section_name)
          .map(row => ({ id: row.section_id as string, name: row.section_name as string, projectId: row.project_id as string | undefined }))
          .filter((section, index, self) => index === self.findIndex(s => s.id === section.id))

        setTreeSections(mapped)
        console.log('üå≥ –†–∞–∑–¥–µ–ª—ã –∏–∑ view_project_tree:', mapped)
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã –∏–∑ view_project_tree:', e)
        setTreeSections([])
      }
    })()
  }, [isOpen, projectId, effectiveObjectId])

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (isOpen) {
      setDirection('outgoing')
      setFromSectionId("")
      setToSectionId("")
      setTitle("")
      setDescription("")
      setPlannedDuration("7")
      setLink("")
      setPlannedTransmittedDate("")
    }
  }, [isOpen])

  const handleSubmit = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!fromSectionId || !toSectionId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è",
        variant: "destructive",
      })
      return
    }

    if (fromSectionId === toSectionId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —Ä–∞–∑–¥–µ–ª",
        variant: "destructive",
      })
      return
    }

    if (!title.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        variant: "destructive",
      })
      return
    }

    if (!description.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        variant: "destructive",
      })
      return
    }

    const duration = 7
    if (isNaN(duration) || duration <= 0 || duration > 365) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365 –¥–Ω–µ–π",
        variant: "destructive",
      })
      return
    }

    setIsCreating(true)

    await Sentry.startSpan(
      {
        op: "ui.action",
        name: "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –≤ –º–æ–¥—É–ª–µ –ø—Ä–æ–µ–∫—Ç–æ–≤",
      },
      async (span) => {
        try {
          span.setAttribute("component", "CreateObjectAssignmentModal")
          span.setAttribute("object_id", objectId)
          span.setAttribute("project_id", projectId)
          span.setAttribute("from_section", fromSectionId)
          span.setAttribute("to_section", toSectionId)
          
          const assignmentData: CreateAssignmentData = {
            project_id: derivedProjectId,
            from_section_id: fromSectionId,
            to_section_id: toSectionId,
            title: title.trim(),
            description: description.trim(),
            link: link.trim() || undefined,
            planned_duration: duration,
            planned_transmitted_date: plannedTransmittedDate || undefined
          }

          const result = await createNewAssignment(assignmentData)

          if (result.success) {
            span.setAttribute("creation.success", true)
            toast({
              title: "–£—Å–ø–µ—Ö",
              description: `–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ "${objectName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ`,
            })
            onClose()
          } else {
            span.setAttribute("creation.success", false)
            const errMsg = (result as any)?.error?.message || (result as any)?.error?.details || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', (result as any)?.error)
            toast({
              title: "–û—à–∏–±–∫–∞",
              description: errMsg,
              variant: "destructive",
            })
          }
        } catch (error) {
          span.setAttribute("error", true)
          span.setAttribute("error.message", (error as Error).message)
          
          Sentry.captureException(error, {
            tags: {
              module: 'projects',
              component: 'CreateObjectAssignmentModal',
              action: 'create_assignment'
            },
            extra: {
              object_id: objectId,
              project_id: projectId,
              object_name: objectName,
              project_name: projectName,
              title: title,
              error_message: (error as Error).message,
              timestamp: new Date().toISOString()
            }
          })
          
          toast({
            title: "–û—à–∏–±–∫–∞",
            description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
            variant: "destructive",
          })
        } finally {
          setIsCreating(false)
        }
      }
    )
  }

  const handleClose = () => {
    if (!isCreating) {
      onClose()
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const sourceSections = (treeSections.length > 0 ? treeSections : fallbackSections)
  const fromSections = sourceSections.filter(s => s.id !== toSectionId)
  const toSections = sourceSections.filter(s => s.id !== fromSectionId)
  const isFromLocked = !!sectionId && sourceSections.some(s => s.id === sectionId)

  // –ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ "–ò–∑ —Ä–∞–∑–¥–µ–ª–∞" —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, –µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–∞
  useEffect(() => {
    if (!isOpen) return
    if (sectionId && !fromSectionId && sourceSections.some(s => s.id === sectionId)) {
      setFromSectionId(sectionId)
    }
  }, [isOpen, sectionId, sourceSections, fromSectionId])

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: from ‚Üí to), –∏–Ω–∞—á–µ –∏–∑ –ø—Ä–æ–ø—Å–æ–≤
  const derivedProjectId = useMemo(() => {
    const src = (treeSections.length > 0 ? treeSections : fallbackSections)
    const from = src.find(s => s.id === fromSectionId)
    if (from?.projectId) return from.projectId
    const to = src.find(s => s.id === toSectionId)
    if (to?.projectId) return to.projectId
    return projectId || ""
  }, [treeSections, fallbackSections, fromSectionId, toSectionId, projectId])

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <div className="flex items-center gap-2">
            <SquareStack className="h-5 w-5 text-blue-600" />
            <DialogTitle className="text-xl font-semibold">–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞</DialogTitle>
          </div>
          <p className="text-sm text-muted-foreground mt-1">
            –û–±—ä–µ–∫—Ç: <span className="font-medium">{objectName}</span> | 
            –ü—Ä–æ–µ–∫—Ç: <span className="font-medium">{projectName}</span>
          </p>
          {(!derivedProjectId || derivedProjectId === "") && (
            <p className="text-xs text-destructive mt-1">–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å project_id –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.</p>
          )}
        </DialogHeader>
        
        <div className="space-y-6 py-4">
          {/* –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–æ–≤ */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="from-section" className="text-sm font-medium">
                –ò–∑ —Ä–∞–∑–¥–µ–ª–∞ <span className="text-destructive">*</span>
              </Label>
              <Select value={fromSectionId} onValueChange={setFromSectionId} disabled={isFromLocked}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª" />
                </SelectTrigger>
                <SelectContent>
                  {fromSections.map((section) => (
                    <SelectItem key={section.id} value={section.id}>
                      {section.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="to-section" className="text-sm font-medium">
                –í —Ä–∞–∑–¥–µ–ª <span className="text-destructive">*</span>
              </Label>
              <Select value={toSectionId} onValueChange={setToSectionId}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª" />
                </SelectTrigger>
                <SelectContent>
                  {toSections.map((section) => (
                    <SelectItem key={section.id} value={section.id}>
                      {section.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
          <div className="space-y-2">
            <Label htmlFor="title" className="text-sm font-medium">
              –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è <span className="text-destructive">*</span>
            </Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"
              disabled={isCreating}
              className="w-full"
            />
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="space-y-2">
            <Label htmlFor="description" className="text-sm font-medium">
              –û–ø–∏—Å–∞–Ω–∏–µ <span className="text-destructive">*</span>
            </Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"
              disabled={isCreating}
              className="min-h-[100px] resize-none"
            />
          </div>

          {/* –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ 7 –¥–Ω–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ */}
          <div className="space-y-2">
            <div className="flex items-center gap-1">
              <Label className="text-sm font-medium">
                –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              </Label>
              <Info className="h-4 w-4 text-gray-400" />
            </div>
            <div className="relative">
              <Input 
                value={"7"}
                readOnly
                disabled
                className="w-full" 
              />
              <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-muted-foreground">
                –¥–Ω–µ–π
              </span>
            </div>
            <p className="text-xs text-muted-foreground">
              –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: 7 –¥–Ω–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª.
            </p>
          </div>

          {/* –£–¥–∞–ª—ë–Ω –±–ª–æ–∫ "–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è" –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º */}

          {/* –°—Å—ã–ª–∫–∞ */}
          <div className="space-y-2">
            <Label htmlFor="link" className="text-sm font-medium">
              –°—Å—ã–ª–∫–∞
            </Label>
            <Input 
              id="link" 
              value={link}
              onChange={(e) => setLink(e.target.value)}
              placeholder="https://..."
              disabled={isCreating}
              className="w-full" 
            />
          </div>

          {/* –ü–ª–∞–Ω–æ–≤—ã–π —Å—Ä–æ–∫ –ø–µ—Ä–µ–¥–∞—á–∏ */}
          <div className="space-y-2">
            <Label htmlFor="planned-transmitted-date" className="text-sm font-medium">
              –ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ <span className="text-destructive">*</span>
            </Label>
            <ProjectDatePicker
              value={plannedTransmittedDate ? new Date(plannedTransmittedDate) : null}
              onChange={(d) => {
                const y = d.getFullYear()
                const m = String(d.getMonth() + 1).padStart(2, '0')
                const day = String(d.getDate()).padStart(2, '0')
                setPlannedTransmittedDate(`${y}-${m}-${day}`)
              }}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
              calendarWidth="260px"
              inputWidth="100%"
              placement="auto-top"
              offsetY={6}
              renderToBody={false}
            />
          </div>
        </div>

        <DialogFooter className="flex justify-between">
          <Button 
            variant="outline" 
            onClick={handleClose}
            disabled={isCreating}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={handleSubmit}
            disabled={isCreating}
            className="bg-primary hover:bg-primary/90 text-primary-foreground"
          >
            {isCreating ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

