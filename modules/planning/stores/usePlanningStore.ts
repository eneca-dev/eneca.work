import { create } from "zustand"
import { devtools, persist } from "zustand/middleware"
import type { Section, Loading, Department } from "../types"
// –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
import {
  fetchLoadings,
  fetchSectionsWithLoadings,
  archiveLoading as archiveLoadingAPI,
  restoreLoading as restoreLoadingAPI,
  fetchArchivedLoadings,
  createLoading as createLoadingAPI,
} from "@/lib/supabase-client"
import { supabase } from "@/lib/supabase-client"

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PlanningState, –¥–æ–±–∞–≤–ª—è—è —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
interface PlanningState {
  // –î–∞–Ω–Ω—ã–µ
  sections: Section[]
  allSections: Section[] // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
  departments: Department[] // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—ã
  isLoadingSections: boolean
  isLoadingDepartments: boolean // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤
  expandedSections: Record<string, boolean> // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
  expandedDepartments: Record<string, boolean> // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
  showDepartments: boolean // –§–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª–æ–≤

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  currentPage: number
  sectionsPerPage: number

  // –§–∏–ª—å—Ç—Ä—ã
  selectedProjectId: string | null
  selectedDepartmentId: string | null
  selectedTeamId: string | null
  selectedManagerId: string | null

  // –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∑–æ–∫
  loadingsMap: Record<string, Loading[]> // –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ ID —Ä–∞–∑–¥–µ–ª–∞

  // –ü–æ–∏—Å–∫
  searchQuery: string
  projectSearchQuery: string

  // –î–µ–π—Å—Ç–≤–∏—è
  fetchSections: () => Promise<void>
  fetchDepartments: () => Promise<void>
  fetchSectionLoadings: (sectionId: string) => Promise<Loading[]>
  setFilters: (
    projectId: string | null,
    departmentId: string | null,
    teamId: string | null,
    managerId?: string | null,
  ) => void
  addSection: (section: Section) => void
  updateSection: (id: string, updates: Partial<Section>) => void
  deleteSection: (id: string) => void
  updateLoading: (loadingId: string, updates: Partial<Loading>) => Promise<{ success: boolean; error?: string }>
  deleteLoading: (loadingId: string) => Promise<{ success: boolean; error?: string }>
  createLoading: (loadingData: {
    responsibleId: string
    sectionId: string
    startDate: Date
    endDate: Date
    rate: number
    projectName?: string
    sectionName?: string
  }) => Promise<{ success: boolean; error?: string; loadingId?: string }>
  archiveLoading: (loadingId: string) => Promise<{ success: boolean; error?: string }>
  restoreLoading: (loadingId: string) => Promise<{ success: boolean; error?: string }>
  fetchArchivedLoadings: (sectionId?: string, employeeId?: string) => Promise<Loading[]>
  toggleSectionExpanded: (sectionId: string) => void
  toggleDepartmentExpanded: (departmentId: string) => void
  expandAllSections: () => Promise<void>
  collapseAllSections: () => void
  expandAllDepartments: () => void
  collapseAllDepartments: () => void
  setCurrentPage: (page: number) => void
  toggleShowDepartments: () => void
  filterSectionsByName: (query: string) => void
  filterSectionsByProject: (query: string) => void
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è timestamptz –≤ –æ–±—ä–µ–∫—Ç Date
const parseTimestampTz = (timestamptz: string | null): Date | null => {
  if (!timestamptz) return null

  try {
    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ timezone, –¥–æ–±–∞–≤–ª—è–µ–º 'Z' –¥–ª—è UTC
    let dateString = timestamptz
    if (!timestamptz.includes('Z') && !timestamptz.includes('+') && !timestamptz.includes('-', 10)) {
      dateString = timestamptz + 'Z'
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
    return new Date(dateString)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã:", error, timestamptz)
    return null
  }
}

export const usePlanningStore = create<PlanningState>()(
  devtools(
    persist(
      (set, get) => ({
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sections: [],
        allSections: [],
        departments: [],
        isLoadingSections: false,
        isLoadingDepartments: false,
        selectedProjectId: null,
        selectedDepartmentId: null,
        selectedTeamId: null,
        selectedManagerId: null,
        expandedSections: {},
        expandedDepartments: {},
        showDepartments: false,
        currentPage: 1,
        sectionsPerPage: 20,
        loadingsMap: {},
        searchQuery: "",
        projectSearchQuery: "",

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        setFilters: (projectId, departmentId, teamId, managerId = null) => {
          set({
            selectedProjectId: projectId,
            selectedDepartmentId: departmentId,
            selectedTeamId: teamId,
            selectedManagerId: managerId,
            currentPage: 1,
          })
          // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
          get().fetchSections()
          // –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Ç–¥–µ–ª—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö —Ç–æ–∂–µ
          if (get().showDepartments) {
            get().fetchDepartments()
          }
        },

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setCurrentPage: (page) => {
          set({ currentPage: page })

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã
          const { allSections, sectionsPerPage, loadingsMap, expandedSections } = get()
          const startIndex = (page - 1) * sectionsPerPage
          const endIndex = startIndex + sectionsPerPage
          const visibleSections = allSections.slice(startIndex, endIndex)

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
          const sectionsWithLoadings = visibleSections.map((section) => {
            if (expandedSections[section.id]) {
              return {
                ...section,
                loadings: loadingsMap[section.id] || [],
              }
            }
            return section
          })

          set({ sections: sectionsWithLoadings })
        },

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ fetchSections –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
        fetchSections: async () => {
          set({ isLoadingSections: true })
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const {
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              sectionsPerPage,
              currentPage,
            } = get()

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏)
            const result = await fetchSectionsWithLoadings(
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
            )

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π
            if ('success' in result && !result.success) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:", result.error)
              throw new Error(result.error)
            }

            const { sections: allSections, loadingsMap } = result as { sections: Section[]; loadingsMap: Record<string, Loading[]> }

            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allSections.length} —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–∏—Ö`)

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            const startIndex = (currentPage - 1) * sectionsPerPage
            const endIndex = startIndex + sectionsPerPage
            const visibleSections = allSections.slice(startIndex, endIndex)

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ –≤–∏–¥–∏–º—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
            const sectionsWithLoadings = visibleSections.map((section) => ({
              ...section,
              loadings: loadingsMap[section.id] || [],
            }))

            set({
              allSections: allSections,
              sections: sectionsWithLoadings,
              loadingsMap,
              isLoadingSections: false,
              expandedSections: {},
            })
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:", error)
            set({ isLoadingSections: false })
          }
        },

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è view_employee_workloads
        fetchDepartments: async () => {
          set({ isLoadingDepartments: true })
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const { selectedDepartmentId } = get()

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è view_employee_workloads
            let query = supabase
              .from("view_employee_workloads")
              .select("*")
              .or("loading_status.eq.active,loading_status.is.null")

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
            if (selectedDepartmentId) {
              query = query.eq("final_department_id", selectedDepartmentId)
            }

            const { data, error } = await query

            if (error) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö:", error)
              throw error
            }

            console.log("üìä –î–∞–Ω–Ω—ã–µ –∏–∑ view_employee_workloads:", data?.length, "–∑–∞–ø–∏—Å–µ–π")

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º –∏ –∫–æ–º–∞–Ω–¥–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            const departmentsMap = new Map<string, Department>()
            const teamsMap = new Map<string, any>()
            const employeesMap = new Map<string, any>()

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
            data?.forEach((item) => {
              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
              if (!employeesMap.has(item.user_id)) {
                employeesMap.set(item.user_id, {
                  id: item.user_id,
                  firstName: item.first_name,
                  lastName: item.last_name,
                  fullName: item.full_name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è
                  email: item.email,
                  position: item.position_name,
                  avatarUrl: item.avatar_url,
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                  teamId: item.final_team_id,
                  teamName: item.final_team_name,
                  teamCode: "", // –í –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Ç team_code, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
                  departmentId: item.final_department_id,
                  departmentName: item.final_department_name,
                  loadings: [],
                  dailyWorkloads: {},
                  hasLoadings: item.has_loadings,
                  loadingsCount: item.loadings_count,
                  employmentRate: item.employment_rate || 1,
                })

                console.log("üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫:", {
                  fullName: item.full_name,
                  finalDepartment: item.final_department_name,
                  finalTeam: item.final_team_name,
                  originalDepartment: item.original_department_name,
                  originalTeam: item.original_team_name,
                })
              }

              const employee = employeesMap.get(item.user_id)

              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
              if (item.loading_id) {
                employee.loadings.push({
                  id: item.loading_id,
                  responsibleId: item.user_id,
                  responsibleName: item.full_name,
                  responsibleAvatarUrl: item.avatar_url,
                  responsibleTeamName: item.final_team_name,
                  sectionId: item.loading_section,
                  sectionName: item.section_name,
                  projectId: null, // –í –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Ç project_id
                  projectName: item.project_name,
                  projectStatus: item.project_status,
                  startDate: new Date(item.loading_start),
                  endDate: new Date(item.loading_finish),
                  rate: item.loading_rate || 1,
                })
              }
            })

            // –í—ã—á–∏—Å–ª—è–µ–º dailyWorkloads –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employeesMap.forEach((employee) => {
              employee.dailyWorkloads = {}
              if (employee.loadings && employee.loadings.length > 0) {
                employee.loadings.forEach((loading: Loading) => {
                  const startDate = new Date(loading.startDate)
                  const endDate = new Date(loading.endDate)
                  const currentDate = new Date(startDate)

                  while (currentDate <= endDate) {
                    const dateKey = currentDate.toISOString().split("T")[0]
                    if (!employee.dailyWorkloads[dateKey]) {
                      employee.dailyWorkloads[dateKey] = 0
                    }
                    employee.dailyWorkloads[dateKey] += loading.rate || 1
                    currentDate.setDate(currentDate.getDate() + 1)
                  }
                })
              }
            })

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            employeesMap.forEach((employee) => {
              const teamKey = `${employee.departmentId}-${employee.teamId}`

              if (!teamsMap.has(teamKey)) {
                teamsMap.set(teamKey, {
                  id: employee.teamId,
                  name: employee.teamName,
                  code: employee.teamCode || "",
                  departmentId: employee.departmentId,
                  departmentName: employee.departmentName,
                  employees: [],
                  totalEmployees: 0,
                  dailyWorkloads: {},
                })
              }

              const team = teamsMap.get(teamKey)
              team.employees.push(employee)
              team.totalEmployees += 1

              // –°—É–º–º–∏—Ä—É–µ–º dailyWorkloads –∫–æ–º–∞–Ω–¥—ã
              Object.keys(employee.dailyWorkloads || {}).forEach((dateKey) => {
                if (!team.dailyWorkloads[dateKey]) {
                  team.dailyWorkloads[dateKey] = 0
                }
                team.dailyWorkloads[dateKey] += employee.dailyWorkloads[dateKey]
              })
            })

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            teamsMap.forEach((team) => {
              if (!departmentsMap.has(team.departmentId)) {
                departmentsMap.set(team.departmentId, {
                  id: team.departmentId,
                  name: team.departmentName,
                  teams: [],
                  totalEmployees: 0,
                  dailyWorkloads: {},
                })
              }

              const department = departmentsMap.get(team.departmentId)
              if (department) {
                department.teams.push(team)
                department.totalEmployees += team.totalEmployees

                // –°—É–º–º–∏—Ä—É–µ–º dailyWorkloads –æ—Ç–¥–µ–ª–∞
                Object.keys(team.dailyWorkloads || {}).forEach((dateKey) => {
                  if (!department.dailyWorkloads) {
                    department.dailyWorkloads = {}
                  }
                  if (!department.dailyWorkloads[dateKey]) {
                    department.dailyWorkloads[dateKey] = 0
                  }
                  department.dailyWorkloads[dateKey] += team.dailyWorkloads[dateKey]
                })
              }
            })

            const departments = Array.from(departmentsMap.values())

            console.log("üè¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–¥–µ–ª–æ–≤:", {
              totalDepartments: departments.length,
              departments: departments.map((dept) => ({
                id: dept.id,
                name: dept.name,
                totalEmployees: dept.totalEmployees,
                teams: dept.teams.map((team) => ({
                  id: team.id,
                  name: team.name,
                  employeeCount: team.employees.length,
                  employees: team.employees.map((emp) => emp.fullName),
                })),
              })),
            })

            set({
              departments,
              isLoadingDepartments: false,
            })

            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${departments.length} –æ—Ç–¥–µ–ª–æ–≤`)
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–¥–µ–ª–æ–≤:", error)
            set({ isLoadingDepartments: false })
          }
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
        checkSectionHasLoadings: async (sectionId: string): Promise<boolean> => {
          try {
            const loadings = await fetchLoadings(sectionId, true)
            return Array.isArray(loadings) && loadings.length > 0
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:", error)
            return false
          }
        },

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
        fetchSectionLoadings: async (sectionId: string): Promise<Loading[]> => {
          try {
            const loadingsData = await fetchLoadings(sectionId)

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Loading
            const loadings: Loading[] = Array.isArray(loadingsData) ? loadingsData.map((item: any) => ({
              id: item.loading_id,
              responsibleId: item.loading_responsible,
              responsibleName: item.responsible_name || undefined,
              responsibleAvatarUrl: item.responsible_avatar || undefined,
              sectionId: item.loading_section,
              startDate: parseTimestampTz(item.loading_start) || new Date(),
              endDate: parseTimestampTz(item.loading_finish) || new Date(),
              rate: item.loading_rate || 1,
              createdAt: parseTimestampTz(item.loading_created),
              updatedAt: parseTimestampTz(item.loading_updated),
            })) : []

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –≤ –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö: sections –∏ allSections
            const { sections, allSections } = get()

            const updatedSections = sections.map((section) => {
              if (section.id === sectionId) {
                return {
                  ...section,
                  loadings,
                }
              }
              return section
            })

            const updatedAllSections = allSections.map((section) => {
              if (section.id === sectionId) {
                return {
                  ...section,
                  loadings,
                }
              }
              return section
            })

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
            })

            return loadings
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:", error)
            return []
          }
        },

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        createLoading: async (loadingData) => {
          try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const apiData = {
              responsibleId: loadingData.responsibleId,
              sectionId: loadingData.sectionId,
              startDate: loadingData.startDate.toISOString().split("T")[0],
              endDate: loadingData.endDate.toISOString().split("T")[0],
              rate: loadingData.rate,
            }

            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await createLoadingAPI(apiData)

            if (!result.success) {
              return result
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const newLoading: Loading = {
              id: result.loadingId!,
              responsibleId: loadingData.responsibleId,
              responsibleName: undefined, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
              responsibleAvatarUrl: undefined,
              responsibleTeamName: undefined,
              sectionId: loadingData.sectionId,
              sectionName: loadingData.sectionName,
              projectId: undefined,
              projectName: loadingData.projectName,
              startDate: loadingData.startDate,
              endDate: loadingData.endDate,
              rate: loadingData.rate,
              createdAt: new Date(),
              updatedAt: new Date(),
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const { sections, allSections, loadingsMap, departments } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = { ...loadingsMap }
            if (!updatedLoadingsMap[loadingData.sectionId]) {
              updatedLoadingsMap[loadingData.sectionId] = []
            }
            updatedLoadingsMap[loadingData.sectionId].push(newLoading)

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
            const updatedSections = sections.map((section) => {
              if (section.id === loadingData.sectionId) {
                return {
                  ...section,
                  hasLoadings: true,
                  loadings: section.loadings ? [...section.loadings, newLoading] : [newLoading],
                }
              }
              return section
            })

            const updatedAllSections = allSections.map((section) => {
              if (section.id === loadingData.sectionId) {
                return {
                  ...section,
                  hasLoadings: true,
                  loadings: section.loadings ? [...section.loadings, newLoading] : [newLoading],
                }
              }
              return section
            })

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
            })

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await get().fetchSections()
            if (get().showDepartments) {
              await get().fetchDepartments()
            }

            return { success: true, loadingId: result.loadingId }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        updateLoading: async (loadingId: string, updates: Partial<Loading>) => {
          try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const apiUpdates: any = {}
            if (updates.startDate) {
              apiUpdates.startDate = updates.startDate.toISOString()
            }
            if (updates.endDate) {
              apiUpdates.endDate = updates.endDate.toISOString()
            }
            if (updates.rate !== undefined) {
              apiUpdates.rate = updates.rate
            }
            if (updates.sectionId) {
              apiUpdates.sectionId = updates.sectionId
            }
            if (updates.projectId) {
              apiUpdates.projectId = updates.projectId
            }

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const { updateLoading: updateLoadingAPI } = await import("@/lib/supabase-client")

            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await updateLoadingAPI(loadingId, apiUpdates)

            if (!result.success) {
              return result
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const { sections, allSections, loadingsMap, departments } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
            const updatedSections = sections.map((section) => ({
              ...section,
              loadings: section.loadings?.map((loading) =>
                loading.id === loadingId ? { ...loading, ...updates } : loading,
              ),
            }))

            const updatedAllSections = allSections.map((section) => ({
              ...section,
              loadings: section.loadings?.map((loading) =>
                loading.id === loadingId ? { ...loading, ...updates } : loading,
              ),
            }))

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = { ...loadingsMap }
            Object.keys(updatedLoadingsMap).forEach((sectionId) => {
              updatedLoadingsMap[sectionId] = (updatedLoadingsMap[sectionId] ?? []).map((loading) =>
                loading.id === loadingId ? { ...loading, ...updates } : loading,
              )
            })

            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–∞–∑–¥–µ–ª, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤ –¥—Ä—É–≥–æ–π
            if (updates.sectionId) {
              // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥—Ä—É–∑–∫—É
              let loadingToMove: Loading | undefined

              // –ò—â–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–¥–µ–ª–µ
              Object.keys(updatedLoadingsMap).forEach((sectionId) => {
                const loadingIndex = updatedLoadingsMap[sectionId].findIndex((l) => l.id === loadingId)
                if (loadingIndex !== -1) {
                  loadingToMove = { ...updatedLoadingsMap[sectionId][loadingIndex], ...updates }
                  // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                  updatedLoadingsMap[sectionId] = updatedLoadingsMap[sectionId].filter((l) => l.id !== loadingId)
                }
              })

              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
              if (loadingToMove) {
                if (!updatedLoadingsMap[updates.sectionId]) {
                  updatedLoadingsMap[updates.sectionId] = []
                }
                updatedLoadingsMap[updates.sectionId].push(loadingToMove)
              }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª–∞—Ö
            const updatedDepartments = departments.map((department) => ({
              ...department,
              teams: department.teams.map((team) => ({
                ...team,
                employees: team.employees.map((employee) => ({
                  ...employee,
                  loadings: employee.loadings?.map((loading) =>
                    loading.id === loadingId ? { ...loading, ...updates } : loading,
                  ),
                })),
              })),
            }))

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
              departments: updatedDepartments,
            })

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        deleteLoading: async (loadingId: string) => {
          try {
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
            const { deleteLoading: deleteLoadingAPI } = await import("@/lib/supabase-client")

            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await deleteLoadingAPI(loadingId)

            if (!result.success) {
              return result
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const { sections, allSections, loadingsMap, departments } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
            const updatedSections = sections.map((section) => ({
              ...section,
              loadings: section.loadings?.filter((loading) => loading.id !== loadingId),
            }))

            const updatedAllSections = allSections.map((section) => ({
              ...section,
              loadings: section.loadings?.filter((loading) => loading.id !== loadingId),
            }))

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = { ...loadingsMap }
            Object.keys(updatedLoadingsMap).forEach((sectionId) => {
              updatedLoadingsMap[sectionId] = updatedLoadingsMap[sectionId].filter(
                (loading) => loading.id !== loadingId,
              )
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª–∞—Ö
            const updatedDepartments = departments.map((department) => ({
              ...department,
              teams: department.teams.map((team) => ({
                ...team,
                employees: team.employees.map((employee) => ({
                  ...employee,
                  loadings: employee.loadings?.filter((loading) => loading.id !== loadingId),
                })),
              })),
            }))

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
              departments: updatedDepartments,
            })

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        archiveLoading: async (loadingId: string) => {
          try {
            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await archiveLoadingAPI(loadingId)

            if (!result.success) {
              return result
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const { sections, allSections, loadingsMap, departments } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
            const updatedSections = sections.map((section) => ({
              ...section,
              loadings: section.loadings?.filter((loading) => loading.id !== loadingId),
            }))

            const updatedAllSections = allSections.map((section) => ({
              ...section,
              loadings: section.loadings?.filter((loading) => loading.id !== loadingId),
            }))

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = { ...loadingsMap }
            Object.keys(updatedLoadingsMap).forEach((sectionId) => {
              updatedLoadingsMap[sectionId] = updatedLoadingsMap[sectionId].filter(
                (loading) => loading.id !== loadingId,
              )
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª–∞—Ö
            const updatedDepartments = departments.map((department) => ({
              ...department,
              teams: department.teams.map((team) => ({
                ...team,
                employees: team.employees.map((employee) => ({
                  ...employee,
                  loadings: employee.loadings?.filter((loading) => loading.id !== loadingId),
                })),
              })),
            }))

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
              departments: updatedDepartments,
            })

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞
        restoreLoading: async (loadingId: string) => {
          try {
            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await restoreLoadingAPI(loadingId)

            if (!result.success) {
              return result
            }

            // –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await get().fetchSections()
            if (get().showDepartments) {
              await get().fetchDepartments()
            }

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        fetchArchivedLoadings: async (sectionId?: string, employeeId?: string): Promise<Loading[]> => {
          try {
            const loadingsData = await fetchArchivedLoadings(sectionId, employeeId)

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Loading
            const loadings: Loading[] = Array.isArray(loadingsData) ? loadingsData.map((item: any) => ({
              id: item.loading_id,
              responsibleId: item.loading_responsible,
              responsibleName: item.responsible_name || undefined,
              responsibleAvatarUrl: item.responsible_avatar || undefined,
              sectionId: item.loading_section,
              startDate: parseTimestampTz(item.loading_start) || new Date(),
              endDate: parseTimestampTz(item.loading_finish) || new Date(),
              rate: item.loading_rate || 1,
              createdAt: parseTimestampTz(item.loading_created),
              updatedAt: parseTimestampTz(item.loading_updated),
            })) : []

            return loadings
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:", error)
            return []
          }
        },

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–¥–µ–ª–∞
        toggleSectionExpanded: async (sectionId: string) => {
          const { sections, expandedSections, loadingsMap } = get()

          // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª
          const section = sections.find((s) => s.id === sectionId)

          // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
          if (!section || !section.hasLoadings) return

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
          set((state) => ({
            expandedSections: {
              ...state.expandedSections,
              [sectionId]: !state.expandedSections[sectionId],
            },
            sections: state.sections.map((s) => {
              if (s.id === sectionId) {
                // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ loadingsMap
                const isExpanded = !state.expandedSections[sectionId]
                return {
                  ...s,
                  isExpanded,
                  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫
                  loadings: isExpanded && !s.loadings ? loadingsMap[sectionId] || [] : s.loadings,
                }
              }
              return s
            }),
            allSections: state.allSections.map((s) =>
              s.id === sectionId ? { ...s, isExpanded: !state.expandedSections[sectionId] } : s,
            ),
          }))
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª–∞
        toggleDepartmentExpanded: (departmentId: string) => {
          set((state) => ({
            expandedDepartments: {
              ...state.expandedDepartments,
              [departmentId]: !state.expandedDepartments[departmentId],
            },
            departments: state.departments.map((d) =>
              d.id === departmentId ? { ...d, isExpanded: !state.expandedDepartments[departmentId] } : d,
            ),
          }))
        },

        // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
        expandAllSections: async () => {
          const { sections, loadingsMap } = get()
          const sectionsWithLoadings = sections.filter((section) => section.hasLoadings)

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
          const newExpandedSections: Record<string, boolean> = {}
          sectionsWithLoadings.forEach((section) => {
            newExpandedSections[section.id] = true
          })

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          set((state) => ({
            expandedSections: newExpandedSections,
            sections: state.sections.map((s) => {
              if (s.hasLoadings) {
                return {
                  ...s,
                  isExpanded: true,
                  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ loadingsMap, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
                  loadings: s.loadings || loadingsMap[s.id] || [],
                }
              }
              return s
            }),
            allSections: state.allSections.map((s) => (s.hasLoadings ? { ...s, isExpanded: true } : s)),
          }))
        },

        // –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
        collapseAllSections: () => {
          set((state) => ({
            expandedSections: {},
            sections: state.sections.map((s) => ({ ...s, isExpanded: false })),
            allSections: state.allSections.map((s) => ({ ...s, isExpanded: false })),
          }))
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤
        expandAllDepartments: () => {
          const { departments } = get()
          const newExpandedDepartments: Record<string, boolean> = {}

          departments.forEach((department) => {
            newExpandedDepartments[department.id] = true
          })

          set((state) => ({
            expandedDepartments: newExpandedDepartments,
            departments: state.departments.map((d) => ({ ...d, isExpanded: true })),
          }))
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤
        collapseAllDepartments: () => {
          set((state) => ({
            expandedDepartments: {},
            departments: state.departments.map((d) => ({ ...d, isExpanded: false })),
          }))
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞ –æ—Ç–¥–µ–ª–æ–≤
        toggleShowDepartments: () => {
          const { showDepartments, departments } = get()
          const newShowDepartments = !showDepartments

          // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ–∫–∞–∑ –æ—Ç–¥–µ–ª–æ–≤ –∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
          if (newShowDepartments && departments.length === 0) {
            get().fetchDepartments()
          }

          set({ showDepartments: newShowDepartments })
        },

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        addSection: (section) => {
          set((state) => ({
            allSections: [...state.allSections, section],
            sections: [...state.sections, section],
          }))
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        updateSection: (id, updates) => {
          set((state) => ({
            sections: state.sections.map((section) => (section.id === id ? { ...section, ...updates } : section)),
            allSections: state.allSections.map((section) => (section.id === id ? { ...section, ...updates } : section)),
          }))
        },

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
        deleteSection: (id) => {
          set((state) => ({
            sections: state.sections.filter((section) => section.id !== id),
            allSections: state.allSections.filter((section) => section.id !== id),
          }))
        },

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        filterSectionsByName: (query) => {
          set({ searchQuery: query })

          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
          if (!query.trim()) {
            const { currentPage, sectionsPerPage, allSections, expandedSections, loadingsMap, projectSearchQuery } =
              get()

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            let filteredByProject = allSections
            if (projectSearchQuery.trim()) {
              filteredByProject = allSections.filter((section) =>
                section.projectName?.toLowerCase().includes(projectSearchQuery.toLowerCase()),
              )
            }

            const startIndex = (currentPage - 1) * sectionsPerPage
            const endIndex = startIndex + sectionsPerPage
            const visibleSections = filteredByProject.slice(startIndex, endIndex)

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
            const sectionsWithLoadings = visibleSections.map((section) => {
              if (expandedSections[section.id]) {
                return {
                  ...section,
                  loadings: loadingsMap[section.id] || [],
                }
              }
              return section
            })

            set({ sections: sectionsWithLoadings })
            return
          }

          // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const { allSections, expandedSections, loadingsMap, projectSearchQuery } = get()

          // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞
          let filteredSections = allSections.filter((section) =>
            section.name.toLowerCase().includes(query.toLowerCase()),
          )

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
          if (projectSearchQuery.trim()) {
            filteredSections = filteredSections.filter((section) =>
              section.projectName?.toLowerCase().includes(projectSearchQuery.toLowerCase()),
            )
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
          const sectionsWithLoadings = filteredSections.map((section) => {
            if (expandedSections[section.id]) {
              return {
                ...section,
                loadings: loadingsMap[section.id] || [],
              }
            }
            return section
          })

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
          set({ sections: sectionsWithLoadings })
        },

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        filterSectionsByProject: (query) => {
          set({ projectSearchQuery: query })

          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
          if (!query.trim()) {
            const { currentPage, sectionsPerPage, allSections, expandedSections, loadingsMap, searchQuery } = get()

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            let filteredByName = allSections
            if (searchQuery.trim()) {
              filteredByName = allSections.filter((section) =>
                section.name.toLowerCase().includes(searchQuery.toLowerCase()),
              )
            }

            const startIndex = (currentPage - 1) * sectionsPerPage
            const endIndex = startIndex + sectionsPerPage
            const visibleSections = filteredByName.slice(startIndex, endIndex)

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
            const sectionsWithLoadings = visibleSections.map((section) => {
              if (expandedSections[section.id]) {
                return {
                  ...section,
                  loadings: loadingsMap[section.id] || [],
                }
              }
              return section
            })

            set({ sections: sectionsWithLoadings })
            return
          }

          // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
          const { allSections, expandedSections, loadingsMap, searchQuery } = get()

          // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç—É
          let filteredSections = allSections.filter((section) =>
            section.projectName?.toLowerCase().includes(query.toLowerCase()),
          )

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
          if (searchQuery.trim()) {
            filteredSections = filteredSections.filter((section) =>
              section.name.toLowerCase().includes(searchQuery.toLowerCase()),
            )
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
          const sectionsWithLoadings = filteredSections.map((section) => {
            if (expandedSections[section.id]) {
              return {
                ...section,
                loadings: loadingsMap[section.id] || [],
              }
            }
            return section
          })

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
          set({ sections: sectionsWithLoadings })
        },
      }),
      {
        name: "planning-data-storage",
        partialize: (state) => ({
          selectedProjectId: state.selectedProjectId,
          selectedDepartmentId: state.selectedDepartmentId,
          selectedTeamId: state.selectedTeamId,
          selectedManagerId: state.selectedManagerId,
          expandedSections: state.expandedSections,
          expandedDepartments: state.expandedDepartments,
          showDepartments: state.showDepartments,
          currentPage: state.currentPage,
        }),
      },
    ),
  ),
)
