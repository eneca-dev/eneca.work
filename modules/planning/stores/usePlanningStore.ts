import { create } from "zustand"
import { devtools, persist } from "zustand/middleware"
import type { Section, Loading, Department, Team } from "../types"
// –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
import {
  fetchLoadings,
  fetchSectionsWithLoadings,
  archiveLoading as archiveLoadingAPI,
  restoreLoading as restoreLoadingAPI,
  fetchArchivedLoadings,
  createLoading as createLoadingAPI,
} from "@/lib/supabase-client"
import { supabase } from "@/lib/supabase-client"

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PlanningState, –¥–æ–±–∞–≤–ª—è—è —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
interface PlanningState {
  // –î–∞–Ω–Ω—ã–µ
  sections: Section[]
  allSections: Section[] // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
  departments: Department[] // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—ã
  isLoadingSections: boolean
  isLoadingDepartments: boolean // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤
  expandedSections: Record<string, boolean> // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
  expandedDepartments: Record<string, boolean> // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
  showSections: boolean // –§–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
  showDepartments: boolean // –§–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª–æ–≤

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  currentPage: number
  sectionsPerPage: number

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
  syncState: {
    isApplyingFilters: boolean
    lastAppliedFilters: {
      projectId: string | null
      departmentId: string | null
      teamId: string | null
      managerId: string | null
      employeeId: string | null
      stageId: string | null
      objectId: string | null
    } | null
    currentFilters: {
      projectId: string | null
      departmentId: string | null
      teamId: string | null
      managerId: string | null
      employeeId: string | null
      stageId: string | null
      objectId: string | null
    }
    filtersKey: string
    lastDataLoadTime: number | null
    abortController: AbortController | null
  }

  // –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∑–æ–∫
  loadingsMap: Record<string, Loading[]> // –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ ID —Ä–∞–∑–¥–µ–ª–∞

  // –ü–æ–∏—Å–∫
  searchQuery: string
  projectSearchQuery: string

  // –î–µ–π—Å—Ç–≤–∏—è
  fetchSections: () => Promise<void>
  fetchDepartments: () => Promise<void>
  fetchSectionLoadings: (sectionId: string) => Promise<Loading[]>
  fetchSectionsWithSync: (abortController: AbortController) => Promise<void>
  fetchDepartmentsWithSync: (abortController: AbortController) => Promise<void>
  setFilters: (
    projectId: string | null,
    departmentId: string | null,
    teamId: string | null,
    managerId?: string | null,
    employeeId?: string | null,
    stageId?: string | null,
    objectId?: string | null,
  ) => void
  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
  syncWithFilterStore: () => void
  addSection: (section: Section) => void
  updateSection: (id: string, updates: Partial<Section>) => void
  deleteSection: (id: string) => void
  updateLoading: (loadingId: string, updates: Partial<Loading>) => Promise<{ success: boolean; error?: string }>
  deleteLoading: (loadingId: string) => Promise<{ success: boolean; error?: string }>
  createLoading: (loadingData: {
    responsibleId: string
    sectionId: string
    startDate: Date
    endDate: Date
    rate: number
    projectName?: string
    sectionName?: string
    responsibleName?: string
    responsibleAvatarUrl?: string | null
    responsibleTeamName?: string | null
  }) => Promise<{ success: boolean; error?: string; loadingId?: string }>
  refreshSectionLoadings: (sectionId: string) => Promise<{ success: boolean; error?: string }>
  archiveLoading: (loadingId: string) => Promise<{ success: boolean; error?: string }>
  restoreLoading: (loadingId: string) => Promise<{ success: boolean; error?: string }>
  fetchArchivedLoadings: (sectionId?: string, employeeId?: string) => Promise<Loading[]>
  toggleSectionExpanded: (sectionId: string) => void
  toggleDepartmentExpanded: (departmentId: string) => void
  expandAllSections: () => Promise<void>
  collapseAllSections: () => void
  expandAllDepartments: () => void
  collapseAllDepartments: () => void
  setCurrentPage: (page: number) => void
  toggleShowSections: () => void
  toggleShowDepartments: () => void
  filterSectionsByName: (query: string) => void
  filterSectionsByProject: (query: string) => void

  // –§—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  generateFiltersKey: (filters: {
    projectId: string | null
    departmentId: string | null
    teamId: string | null
    managerId: string | null
    employeeId: string | null
    stageId: string | null
    objectId: string | null
  }) => string
  isDataSynced: () => boolean
  getDataSyncStatus: () => {
    isSynced: boolean
    isApplying: boolean
    hasStaleData: boolean
  }
  cancelPendingRequests: () => void
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è timestamptz –≤ –æ–±—ä–µ–∫—Ç Date
const parseTimestampTz = (timestamptz: string | null): Date | null => {
  if (!timestamptz) return null

  try {
    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ timezone, –¥–æ–±–∞–≤–ª—è–µ–º 'Z' –¥–ª—è UTC
    let dateString = timestamptz
    if (!timestamptz.includes('Z') && !timestamptz.includes('+') && !timestamptz.includes('-', 10)) {
      dateString = timestamptz + 'Z'
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
    return new Date(dateString)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã:", error, timestamptz)
    return null
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
const mergeLoadingsWithoutDuplicates = (sectionLoadings: Loading[], mapLoadings: Loading[]): Loading[] => {
  const allLoadings = [...(sectionLoadings || [])]
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ
  ;(mapLoadings || []).forEach(loading => {
    if (!allLoadings.some(existing => existing.id === loading.id)) {
      allLoadings.push(loading)
    }
  })
  
  return allLoadings
}

export const usePlanningStore = create<PlanningState>()(
  devtools(
    persist(
      (set, get) => ({
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sections: [],
        allSections: [],
        departments: [],
        isLoadingSections: false,
        isLoadingDepartments: false,
        expandedSections: {},
        expandedDepartments: {},
        showSections: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è
        showDepartments: false,
        currentPage: 1,
        sectionsPerPage: 20,
        loadingsMap: {},
        searchQuery: "",
        projectSearchQuery: "",

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
        syncState: {
          isApplyingFilters: false,
          lastAppliedFilters: null,
          currentFilters: {
            projectId: null,
            departmentId: null,
            teamId: null,
            managerId: null,
            employeeId: null,
            stageId: null,
            objectId: null,
          },
          filtersKey: "",
          lastDataLoadTime: null,
          abortController: null,
        },

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        setFilters: (projectId, departmentId, teamId, managerId = null, employeeId = null, stageId = null, objectId = null) => {
          const currentState = get()
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
          const newFilters = {
            projectId,
            departmentId,
            teamId,
            managerId,
            employeeId,
            stageId,
            objectId,
          }
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
          const newFiltersKey = currentState.generateFiltersKey(newFilters)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
          const filtersChanged = currentState.syncState.filtersKey !== newFiltersKey
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
          const needsInitialLoad = currentState.syncState.lastDataLoadTime === null

          console.log("üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ usePlanningStore:", {
            projectId,
            departmentId,
            teamId,
            managerId,
            employeeId,
            stageId,
            objectId,
            filtersChanged,
            needsInitialLoad,
            oldKey: currentState.syncState.filtersKey,
            newKey: newFiltersKey
          })
          
          // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
          if (currentState.syncState.abortController) {
            currentState.syncState.abortController.abort()
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController
          const abortController = new AbortController()
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          set({
            currentPage: 1,
            syncState: {
              ...currentState.syncState,
              isApplyingFilters: filtersChanged || needsInitialLoad,
              currentFilters: newFilters,
              filtersKey: newFiltersKey,
              abortController: (filtersChanged || needsInitialLoad) ? abortController : null,
            }
          })

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
          if (filtersChanged || needsInitialLoad) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã —Å –Ω–æ–≤—ã–º AbortController
            get().fetchSectionsWithSync(abortController)
            // –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Ç–¥–µ–ª—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö —Ç–æ–∂–µ
            if (currentState.showDepartments) {
              get().fetchDepartmentsWithSync(abortController)
            }
          }
        },

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setCurrentPage: (page) => {
          set({ currentPage: page })

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã
          const { allSections, sectionsPerPage, loadingsMap, expandedSections } = get()
          const startIndex = (page - 1) * sectionsPerPage
          const endIndex = startIndex + sectionsPerPage
          const visibleSections = allSections.slice(startIndex, endIndex)

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
          const sectionsWithLoadings = visibleSections.map((section) => {
            if (expandedSections[section.id]) {
              return {
                ...section,
                loadings: loadingsMap[section.id] || [],
              }
            }
            return section
          })

          set({ sections: sectionsWithLoadings })
        },

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ fetchSections –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
        fetchSections: async () => {
          set({ isLoadingSections: true })
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const { useFilterStore } = await import('../filters/store')
            const {
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              selectedEmployeeId,
              selectedStageId,
              selectedObjectId,
            } = useFilterStore.getState()
            
            const { sectionsPerPage, currentPage } = get()

            console.log("üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", {
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              selectedEmployeeId,
              selectedStageId,
              selectedObjectId
            })

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏)
            const result = await fetchSectionsWithLoadings(
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              selectedEmployeeId,
              selectedStageId,
              selectedObjectId,
            )

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π
            if ('success' in result && !result.success) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:", result.error)
              throw new Error(result.error)
            }

            const { sections: allSections, loadingsMap } = result as { sections: Section[]; loadingsMap: Record<string, Loading[]> }

            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allSections.length} —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–∏—Ö`)

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            const startIndex = (currentPage - 1) * sectionsPerPage
            const endIndex = startIndex + sectionsPerPage
            const visibleSections = allSections.slice(startIndex, endIndex)

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ –≤–∏–¥–∏–º—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
            const sectionsWithLoadings = visibleSections.map((section) => ({
              ...section,
              loadings: loadingsMap[section.id] || [],
            }))

            set({
              allSections: allSections,
              sections: sectionsWithLoadings,
              loadingsMap,
              isLoadingSections: false,
              expandedSections: {},
            })
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:", error)
            set({ isLoadingSections: false })
          }
        },

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è view_organizational_structure
        fetchDepartments: async () => {
          set({ isLoadingDepartments: true })
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const { useFilterStore } = await import('../filters/store')
            const { selectedDepartmentId, selectedTeamId } = useFilterStore.getState()

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            let query = supabase.from("view_organizational_structure").select("*")

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
            if (selectedDepartmentId) {
              query = query.eq("department_id", selectedDepartmentId)
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞
            if (selectedTeamId) {
              query = query.eq("team_id", selectedTeamId)
            }

            const { data: orgData, error: orgError } = await query

            if (orgError) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", orgError)
              throw orgError
            }

            console.log("üè¢ –î–∞–Ω–Ω—ã–µ –∏–∑ view_organizational_structure:", orgData?.length, "–∑–∞–ø–∏—Å–µ–π")

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö —Å –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            let employeeQuery = supabase
              .from("view_employee_workloads")
              .select("*")
              .or("loading_status.eq.active,loading_status.is.null")

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            if (selectedDepartmentId) {
              employeeQuery = employeeQuery.eq("final_department_id", selectedDepartmentId)
            }

            if (selectedTeamId) {
              employeeQuery = employeeQuery.eq("final_team_id", selectedTeamId)
            }

            const { data: employeeData, error: employeeError } = await employeeQuery

            if (employeeError) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö:", employeeError)
              throw employeeError
            }

            console.log("üë• –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö:", employeeData?.length, "–∑–∞–ø–∏—Å–µ–π")

            // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–π –ø–µ—Ä–∏–æ–¥ —Ç–∞–π–º–ª–∞–π–Ω–∞, —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–Ω–∏ –æ—Ç–ø—É—Å–∫–æ–≤
            const { usePlanningViewStore } = await import("../stores/usePlanningViewStore")
            const { startDate, daysToShow } = usePlanningViewStore.getState()
            const vacationsPeriodStart = new Date(startDate)
            const vacationsPeriodEnd = new Date(startDate)
            vacationsPeriodEnd.setDate(vacationsPeriodEnd.getDate() + daysToShow - 1)

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—É/–∫–æ–º–∞–Ω–¥–µ –¥–ª—è –æ—Ç–ø—É—Å–∫–æ–≤
            // –í—ã–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é (RLS-friendly)
            const { data: vacationsDaily, error: vacationsError } = await supabase
              .rpc("get_employee_vacations_daily", {
                p_start: vacationsPeriodStart.toISOString().split("T")[0],
                p_end: vacationsPeriodEnd.toISOString().split("T")[0],
                p_department: selectedDepartmentId || null,
                p_team: selectedTeamId || null,
              })

            if (vacationsError) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—É—Å–∫–æ–≤:", vacationsError)
              throw vacationsError
            }

            console.log("üèùÔ∏è –û—Ç–ø—É—Å–∫–∞ (–¥–Ω–∏):", vacationsDaily?.length, "–ø–µ—Ä–∏–æ–¥:", vacationsPeriodStart.toISOString().split("T")[0], "‚Äî", vacationsPeriodEnd.toISOString().split("T")[0])
            if (vacationsDaily && vacationsDaily.length > 0) {
              console.log("üèùÔ∏è –ü–µ—Ä–≤—ã–µ 3 –æ—Ç–ø—É—Å–∫–∞:", vacationsDaily.slice(0, 3))
            }

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º –∏ –∫–æ–º–∞–Ω–¥–∞–º
            const departmentsMap = new Map<string, Department>()
            const teamsMap = new Map<string, Team>()
            const employeesMap = new Map<string, any>()

            // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏
            employeeData?.forEach((item) => {
              if (!employeesMap.has(item.user_id)) {
                employeesMap.set(item.user_id, {
                  id: item.user_id,
                  firstName: item.first_name,
                  lastName: item.last_name,
                  fullName: item.full_name,
                  email: item.email,
                  position: item.position_name,
                  avatarUrl: item.avatar_url,
                  teamId: item.final_team_id,
                  teamName: item.final_team_name,
                  teamCode: "",
                  departmentId: item.final_department_id,
                  departmentName: item.final_department_name,
                  loadings: [],
                  dailyWorkloads: {},
                  vacationsDaily: {},
                  hasLoadings: item.has_loadings,
                  loadingsCount: item.loadings_count,
                  employmentRate: item.employment_rate || 1,
                })
              }

              const employee = employeesMap.get(item.user_id)

              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
              if (item.loading_id) {
                employee.loadings.push({
                  id: item.loading_id,
                  responsibleId: item.user_id,
                  responsibleName: item.full_name,
                  responsibleAvatarUrl: item.avatar_url,
                  responsibleTeamName: item.final_team_name,
                  sectionId: item.loading_section,
                  sectionName: item.section_name,
                  projectId: null,
                  projectName: item.project_name,
                  projectStatus: item.project_status,
                  startDate: new Date(item.loading_start),
                  endDate: new Date(item.loading_finish),
                  rate: item.loading_rate || 1,
                })
              }
            })

            // –í—ã—á–∏—Å–ª—è–µ–º dailyWorkloads –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employeesMap.forEach((employee) => {
              employee.dailyWorkloads = {}
              if (employee.loadings && employee.loadings.length > 0) {
                employee.loadings.forEach((loading: Loading) => {
                  const startDate = new Date(loading.startDate)
                  const endDate = new Date(loading.endDate)
                  const currentDate = new Date(startDate)

                  while (currentDate <= endDate) {
                    const dateKey = currentDate.toISOString().split("T")[0]
                    if (!employee.dailyWorkloads[dateKey]) {
                      employee.dailyWorkloads[dateKey] = 0
                    }
                    employee.dailyWorkloads[dateKey] += loading.rate || 1
                    currentDate.setDate(currentDate.getDate() + 1)
                  }
                })
              }
            })

            // –í–Ω–æ—Å–∏–º –æ—Ç–ø—É—Å–∫–∞: —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∫–∞–∫ 1.0 —Å—Ç–∞–≤–∫–∏ –∏ –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            let vacationsProcessed = 0
            vacationsDaily?.forEach((v) => {
              const userId = v.user_id as string
              const dateKey = new Date(v.vacation_date).toISOString().split("T")[0]
              const employee = employeesMap.get(userId)
              if (!employee) {
                console.log("üö® –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—É—Å–∫–∞:", userId, dateKey)
                return
              }
              if (!employee.vacationsDaily) employee.vacationsDaily = {}
              employee.vacationsDaily[dateKey] = 1
              // –û—Ç–ø—É—Å–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞—Å—á—ë—Ç workloadRate - –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              // employee.dailyWorkloads[dateKey] –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
              vacationsProcessed++
            })
            console.log("üèùÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–ø—É—Å–∫–æ–≤:", vacationsProcessed)

            // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            orgData?.forEach((item) => {
              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª
              if (!departmentsMap.has(item.department_id)) {
                departmentsMap.set(item.department_id, {
                  id: item.department_id,
                  name: item.department_name,
                  wsDepartmentId: item.ws_department_id,
                  totalEmployees: item.department_employee_count || 0,
                  teams: [],
                  dailyWorkloads: {},
                  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –æ—Ç–¥–µ–ª–∞
                  departmentHeadId: item.department_head_id,
                  departmentHeadName: item.department_head_full_name,
                  departmentHeadEmail: item.department_head_email,
                  departmentHeadAvatarUrl: item.department_head_avatar_url,
                  managerName: item.department_head_full_name, // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                })
              }

              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
              if (item.team_id) {
                const teamKey = `${item.department_id}-${item.team_id}`
                if (!teamsMap.has(teamKey)) {
                  teamsMap.set(teamKey, {
                    id: item.team_id,
                    name: item.team_name,
                    code: "",
                    departmentId: item.department_id,
                    departmentName: item.department_name,
                    totalEmployees: item.team_employee_count || 0,
                    employees: [],
                    dailyWorkloads: {},
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –∫–æ–º–∞–Ω–¥—ã
                    teamLeadId: item.team_lead_id,
                    teamLeadName: item.team_lead_full_name,
                    teamLeadEmail: item.team_lead_email,
                    teamLeadAvatarUrl: item.team_lead_avatar_url,
                  })
                }
              }
            })

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            employeesMap.forEach((employee) => {
              const teamKey = `${employee.departmentId}-${employee.teamId}`
              const team = teamsMap.get(teamKey)
              
              if (team) {
                team.employees.push(employee)
                
                // –°—É–º–º–∏—Ä—É–µ–º dailyWorkloads –∫–æ–º–∞–Ω–¥—ã
                Object.keys(employee.dailyWorkloads || {}).forEach((dateKey) => {
                  if (!team.dailyWorkloads) {
                    team.dailyWorkloads = {}
                  }
                  if (!team.dailyWorkloads[dateKey]) {
                    team.dailyWorkloads[dateKey] = 0
                  }
                  team.dailyWorkloads[dateKey] += employee.dailyWorkloads[dateKey]
                })
              }
            })

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
            teamsMap.forEach((team) => {
              const department = departmentsMap.get(team.departmentId)
              if (department) {
                department.teams.push(team)

                // –°—É–º–º–∏—Ä—É–µ–º dailyWorkloads –æ—Ç–¥–µ–ª–∞
                Object.keys(team.dailyWorkloads || {}).forEach((dateKey) => {
                  if (!department.dailyWorkloads) {
                    department.dailyWorkloads = {}
                  }
                  if (!department.dailyWorkloads[dateKey]) {
                    department.dailyWorkloads[dateKey] = 0
                  }
                  department.dailyWorkloads[dateKey] += (team.dailyWorkloads || {})[dateKey] || 0
                })
              }
            })

            const departments = Array.from(departmentsMap.values())

            console.log("üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:", {
              totalDepartments: departments.length,
              departments: departments.map((dept) => ({
                id: dept.id,
                name: dept.name,
                headName: dept.departmentHeadName,
                totalEmployees: dept.totalEmployees,
                teams: dept.teams.map((team) => ({
                  id: team.id,
                  name: team.name,
                  leadName: team.teamLeadName,
                  employeeCount: team.employees.length,
                })),
              })),
            })

            set({
              departments,
              isLoadingDepartments: false,
            })

            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${departments.length} –æ—Ç–¥–µ–ª–æ–≤ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏`)
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", error)
            set({ isLoadingDepartments: false })
          }
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
        checkSectionHasLoadings: async (sectionId: string): Promise<boolean> => {
          try {
            const loadings = await fetchLoadings(sectionId, true)
            return Array.isArray(loadings) && loadings.length > 0
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:", error)
            return false
          }
        },

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
        fetchSectionLoadings: async (sectionId: string): Promise<Loading[]> => {
          try {
            const loadingsData = await fetchLoadings(sectionId)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
            if (!Array.isArray(loadingsData)) {
              // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
              if (loadingsData && 'success' in loadingsData && !loadingsData.success) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:", loadingsData.error, loadingsData.details)
                return []
              }
              // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ
              console.warn("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç fetchLoadings:", loadingsData)
              return []
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Loading
            const loadings: Loading[] = loadingsData.map((item: any) => ({
              id: item.loading_id,
              responsibleId: item.loading_responsible,
              responsibleName: item.responsible_name || undefined,
              responsibleAvatarUrl: item.responsible_avatar || undefined,
              sectionId: item.section_id, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º section_id –∏–∑ view_sections_with_loadings
              startDate: parseTimestampTz(item.loading_start) || new Date(),
              endDate: parseTimestampTz(item.loading_finish) || new Date(),
              rate: item.loading_rate || 1,
              createdAt: parseTimestampTz(item.loading_created) || new Date(),
              updatedAt: parseTimestampTz(item.loading_updated) || new Date(),
            }))

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –≤ –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö: sections –∏ allSections
            const { sections, allSections } = get()

            const updatedSections = sections.map((section) => {
              if (section.id === sectionId) {
                return {
                  ...section,
                  loadings,
                }
              }
              return section
            })

            const updatedAllSections = allSections.map((section) => {
              if (section.id === sectionId) {
                return {
                  ...section,
                  loadings,
                }
              }
              return section
            })

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
            })

            return loadings
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:", error)
            return []
          }
        },

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        createLoading: async (loadingData) => {
          try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const apiData = {
              responsibleId: loadingData.responsibleId,
              sectionId: loadingData.sectionId,
              startDate: loadingData.startDate.toISOString().split("T")[0],
              endDate: loadingData.endDate.toISOString().split("T")[0],
              rate: loadingData.rate,
            }

            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await createLoadingAPI(apiData)

            if (!result.success) {
              return result
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const newLoading: Loading = {
              id: result.loadingId!,
              responsibleId: loadingData.responsibleId,
              responsibleName: loadingData.responsibleName || undefined,
              responsibleAvatarUrl: loadingData.responsibleAvatarUrl || undefined,
              responsibleTeamName: loadingData.responsibleTeamName || undefined,
              sectionId: loadingData.sectionId,
              sectionName: loadingData.sectionName,
              projectId: undefined,
              projectName: loadingData.projectName,
              startDate: loadingData.startDate,
              endDate: loadingData.endDate,
              rate: loadingData.rate,
              createdAt: new Date(),
              updatedAt: new Date(),
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const { sections, allSections, loadingsMap, departments, expandedSections } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = { ...loadingsMap }
            if (!updatedLoadingsMap[loadingData.sectionId]) {
              updatedLoadingsMap[loadingData.sectionId] = []
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const existingInMap = updatedLoadingsMap[loadingData.sectionId].some(loading => loading.id === newLoading.id)
            if (!existingInMap) {
              updatedLoadingsMap[loadingData.sectionId].push(newLoading)
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
            const updatedSections = sections.map((section) => {
              if (section.id === loadingData.sectionId) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                const existingLoadings = section.loadings || []
                const hasExistingLoading = existingLoadings.some(loading => loading.id === newLoading.id)
                
                return {
                  ...section,
                  hasLoadings: true,
                  loadings: hasExistingLoading ? existingLoadings : [...existingLoadings, newLoading],
                }
              }
              return section
            })

            const updatedAllSections = allSections.map((section) => {
              if (section.id === loadingData.sectionId) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                const existingLoadings = section.loadings || []
                const hasExistingLoading = existingLoadings.some(loading => loading.id === newLoading.id)
                
                return {
                  ...section,
                  hasLoadings: true,
                  loadings: hasExistingLoading ? existingLoadings : [...existingLoadings, newLoading],
                }
              }
              return section
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ—Ç–¥–µ–ª–∞—Ö
            const updatedDepartments = departments.map(department => ({
              ...department,
              teams: department.teams.map(team => ({
                ...team,
                employees: team.employees.map(employee => {
                  if (employee.id === loadingData.responsibleId) {
                    const existingLoadings = employee.loadings || []
                    const hasExistingLoading = existingLoadings.some(loading => loading.id === newLoading.id)
                    
                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º dailyWorkloads
                    const updatedLoadings = hasExistingLoading ? existingLoadings : [...existingLoadings, newLoading]
                    const dailyWorkloads: Record<string, number> = {}
                    
                    updatedLoadings.forEach((loading: Loading) => {
                      const startDate = new Date(loading.startDate)
                      const endDate = new Date(loading.endDate)
                      const currentDate = new Date(startDate)

                      while (currentDate <= endDate) {
                        const dateKey = currentDate.toISOString().split("T")[0]
                        if (!dailyWorkloads[dateKey]) {
                          dailyWorkloads[dateKey] = 0
                        }
                        dailyWorkloads[dateKey] += loading.rate || 1
                        currentDate.setDate(currentDate.getDate() + 1)
                      }
                    })

                    return {
                      ...employee,
                      loadings: updatedLoadings,
                      dailyWorkloads,
                      hasLoadings: updatedLoadings.length > 0,
                      loadingsCount: updatedLoadings.length,
                    }
                  }
                  return employee
                })
              }))
            }))

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            if (!expandedSections[loadingData.sectionId]) {
              get().toggleSectionExpanded(loadingData.sectionId)
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–¥–µ–ª–∞–º–∏
            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
              departments: updatedDepartments,
            })

            console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", {
              loadingId: result.loadingId,
              sectionId: loadingData.sectionId,
              responsibleId: loadingData.responsibleId,
              loadingsCount: updatedLoadingsMap[loadingData.sectionId]?.length || 0
            })

            return { success: true, loadingId: result.loadingId }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        refreshSectionLoadings: async (sectionId: string) => {
          try {
            console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞:", sectionId)
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            const freshLoadings = await get().fetchSectionLoadings(sectionId)
            
            const { sections, allSections, loadingsMap } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = {
              ...loadingsMap,
              [sectionId]: freshLoadings
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –≤ sections
            const updatedSections = sections.map(section => {
              if (section.id === sectionId) {
                return {
                  ...section,
                  loadings: freshLoadings,
                  hasLoadings: freshLoadings.length > 0
                }
              }
              return section
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –≤ allSections
            const updatedAllSections = allSections.map(section => {
              if (section.id === sectionId) {
                return {
                  ...section,
                  loadings: freshLoadings,
                  hasLoadings: freshLoadings.length > 0
                }
              }
              return section
            })

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
            })

            console.log("‚úÖ –†–∞–∑–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", {
              sectionId,
              loadingsCount: freshLoadings.length
            })

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞:", error)
            return { success: false, error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª" }
          }
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        updateLoading: async (loadingId: string, updates: Partial<Loading>) => {
          try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const apiUpdates: any = {}
            if (updates.startDate) {
              apiUpdates.startDate = updates.startDate.toISOString()
            }
            if (updates.endDate) {
              apiUpdates.endDate = updates.endDate.toISOString()
            }
            if (updates.rate !== undefined) {
              apiUpdates.rate = updates.rate
            }
            if (updates.sectionId) {
              apiUpdates.sectionId = updates.sectionId
            }
            if (updates.projectId) {
              apiUpdates.projectId = updates.projectId
            }

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const { updateLoading: updateLoadingAPI } = await import("@/lib/supabase-client")

            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await updateLoadingAPI(loadingId, apiUpdates)

            if (!result.success) {
              return result
            }

            // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            let finalUpdates = updates
            if (result.updatedLoading) {
              console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API:", result.updatedLoading)
              finalUpdates = {
                ...updates,
                sectionId: result.updatedLoading.sectionId,
                sectionName: result.updatedLoading.sectionName,
                projectId: result.updatedLoading.projectId,
                projectName: result.updatedLoading.projectName,
                startDate: result.updatedLoading.startDate,
                endDate: result.updatedLoading.endDate,
                rate: result.updatedLoading.rate,
              }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const { sections, allSections, loadingsMap, departments } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
            const updatedSections = sections.map((section) => ({
              ...section,
              loadings: section.loadings?.map((loading) =>
                loading.id === loadingId ? { ...loading, ...finalUpdates } : loading,
              ),
            }))

            const updatedAllSections = allSections.map((section) => ({
              ...section,
              loadings: section.loadings?.map((loading) =>
                loading.id === loadingId ? { ...loading, ...finalUpdates } : loading,
              ),
            }))

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = { ...loadingsMap }
            Object.keys(updatedLoadingsMap).forEach((sectionId) => {
              updatedLoadingsMap[sectionId] = (updatedLoadingsMap[sectionId] ?? []).map((loading) =>
                loading.id === loadingId ? { ...loading, ...finalUpdates } : loading,
              )
            })

            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–∞–∑–¥–µ–ª, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤ –¥—Ä—É–≥–æ–π
            if (finalUpdates.sectionId) {
              // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
              let currentLoading: Loading | undefined
              Object.keys(loadingsMap).forEach((sectionId) => {
                const found = loadingsMap[sectionId]?.find((l) => l.id === loadingId)
                if (found) {
                  currentLoading = found
                }
              })

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–∞–∑–¥–µ–ª
              if (currentLoading && finalUpdates.sectionId !== currentLoading.sectionId) {
                // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥—Ä—É–∑–∫—É
                let loadingToMove: Loading | undefined

                // –ò—â–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–¥–µ–ª–µ
                Object.keys(updatedLoadingsMap).forEach((sectionId) => {
                  const loadingIndex = updatedLoadingsMap[sectionId].findIndex((l) => l.id === loadingId)
                  if (loadingIndex !== -1) {
                    loadingToMove = { ...updatedLoadingsMap[sectionId][loadingIndex], ...finalUpdates }
                    // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                    updatedLoadingsMap[sectionId] = updatedLoadingsMap[sectionId].filter((l) => l.id !== loadingId)
                  }
                })

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
                if (loadingToMove && finalUpdates.sectionId) {
                  if (!updatedLoadingsMap[finalUpdates.sectionId]) {
                    updatedLoadingsMap[finalUpdates.sectionId] = []
                  }
                  updatedLoadingsMap[finalUpdates.sectionId].push(loadingToMove)
                }
              }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª–∞—Ö —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º dailyWorkloads
            const updatedDepartments = departments.map((department) => ({
              ...department,
              teams: department.teams.map((team) => ({
                ...team,
                employees: team.employees.map((employee) => {
                  const updatedLoadings = employee.loadings?.map((loading) =>
                    loading.id === loadingId ? { ...loading, ...finalUpdates } : loading,
                  ) || []
                  
                  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º dailyWorkloads
                  const dailyWorkloads: Record<string, number> = {}
                  updatedLoadings.forEach((loading) => {
                    const startDate = new Date(loading.startDate)
                    const endDate = new Date(loading.endDate)
                    const currentDate = new Date(startDate)

                    while (currentDate <= endDate) {
                      const dateKey = currentDate.toISOString().split("T")[0]
                      if (!dailyWorkloads[dateKey]) {
                        dailyWorkloads[dateKey] = 0
                      }
                      dailyWorkloads[dateKey] += loading.rate || 1
                      currentDate.setDate(currentDate.getDate() + 1)
                    }
                  })

                  return {
                    ...employee,
                    loadings: updatedLoadings,
                    dailyWorkloads,
                    hasLoadings: updatedLoadings.length > 0,
                    loadingsCount: updatedLoadings.length,
                  }
                }),
              })),
            }))

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
              departments: updatedDepartments,
            })

            console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω:", {
              loadingId,
              finalUpdates,
              sectionsUpdated: updatedSections.length,
              departmentsUpdated: updatedDepartments.length
            })

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        deleteLoading: async (loadingId: string) => {
          try {
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
            const { deleteLoading: deleteLoadingAPI } = await import("@/lib/supabase-client")

            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await deleteLoadingAPI(loadingId)

            if (!result.success) {
              return result
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const { sections, allSections, loadingsMap, departments } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
            const updatedSections = sections.map((section) => ({
              ...section,
              loadings: section.loadings?.filter((loading) => loading.id !== loadingId),
            }))

            const updatedAllSections = allSections.map((section) => ({
              ...section,
              loadings: section.loadings?.filter((loading) => loading.id !== loadingId),
            }))

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = { ...loadingsMap }
            Object.keys(updatedLoadingsMap).forEach((sectionId) => {
              updatedLoadingsMap[sectionId] = updatedLoadingsMap[sectionId].filter(
                (loading) => loading.id !== loadingId,
              )
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª–∞—Ö —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º dailyWorkloads
            const updatedDepartments = departments.map((department) => ({
              ...department,
              teams: department.teams.map((team) => ({
                ...team,
                employees: team.employees.map((employee) => {
                  const updatedLoadings = employee.loadings?.filter((loading) => loading.id !== loadingId) || []
                  
                  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º dailyWorkloads
                  const dailyWorkloads: Record<string, number> = {}
                  updatedLoadings.forEach((loading) => {
                    const startDate = new Date(loading.startDate)
                    const endDate = new Date(loading.endDate)
                    const currentDate = new Date(startDate)

                    while (currentDate <= endDate) {
                      const dateKey = currentDate.toISOString().split("T")[0]
                      if (!dailyWorkloads[dateKey]) {
                        dailyWorkloads[dateKey] = 0
                      }
                      dailyWorkloads[dateKey] += loading.rate || 1
                      currentDate.setDate(currentDate.getDate() + 1)
                    }
                  })

                  return {
                    ...employee,
                    loadings: updatedLoadings,
                    dailyWorkloads,
                    hasLoadings: updatedLoadings.length > 0,
                    loadingsCount: updatedLoadings.length,
                  }
                }),
              })),
            }))

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
              departments: updatedDepartments,
            })

            console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω:", {
              loadingId,
              sectionsUpdated: updatedSections.length,
              departmentsUpdated: updatedDepartments.length
            })

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        archiveLoading: async (loadingId: string) => {
          try {
            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await archiveLoadingAPI(loadingId)

            if (!result.success) {
              return result
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const { sections, allSections, loadingsMap, departments } = get()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
            const updatedSections = sections.map((section) => ({
              ...section,
              loadings: section.loadings?.filter((loading) => loading.id !== loadingId),
            }))

            const updatedAllSections = allSections.map((section) => ({
              ...section,
              loadings: section.loadings?.filter((loading) => loading.id !== loadingId),
            }))

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const updatedLoadingsMap = { ...loadingsMap }
            Object.keys(updatedLoadingsMap).forEach((sectionId) => {
              updatedLoadingsMap[sectionId] = updatedLoadingsMap[sectionId].filter(
                (loading) => loading.id !== loadingId,
              )
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª–∞—Ö —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º dailyWorkloads
            const updatedDepartments = departments.map((department) => ({
              ...department,
              teams: department.teams.map((team) => ({
                ...team,
                employees: team.employees.map((employee) => {
                  const updatedLoadings = employee.loadings?.filter((loading) => loading.id !== loadingId) || []
                  
                  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º dailyWorkloads
                  const dailyWorkloads: Record<string, number> = {}
                  updatedLoadings.forEach((loading) => {
                    const startDate = new Date(loading.startDate)
                    const endDate = new Date(loading.endDate)
                    const currentDate = new Date(startDate)

                    while (currentDate <= endDate) {
                      const dateKey = currentDate.toISOString().split("T")[0]
                      if (!dailyWorkloads[dateKey]) {
                        dailyWorkloads[dateKey] = 0
                      }
                      dailyWorkloads[dateKey] += loading.rate || 1
                      currentDate.setDate(currentDate.getDate() + 1)
                    }
                  })

                  return {
                    ...employee,
                    loadings: updatedLoadings,
                    dailyWorkloads,
                    hasLoadings: updatedLoadings.length > 0,
                    loadingsCount: updatedLoadings.length,
                  }
                }),
              })),
            }))

            set({
              sections: updatedSections,
              allSections: updatedAllSections,
              loadingsMap: updatedLoadingsMap,
              departments: updatedDepartments,
            })

            console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω:", {
              loadingId,
              sectionsUpdated: updatedSections.length,
              departmentsUpdated: updatedDepartments.length
            })

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞
        restoreLoading: async (loadingId: string) => {
          try {
            // –í—ã–∑—ã–≤–∞–µ–º API
            const result = await restoreLoadingAPI(loadingId)

            if (!result.success) {
              return result
            }

            // –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await get().fetchSections()
            if (get().showDepartments) {
              await get().fetchDepartments()
            }

            console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω:", {
              loadingId
            })

            return { success: true }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
            return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" }
          }
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        fetchArchivedLoadings: async (sectionId?: string, employeeId?: string): Promise<Loading[]> => {
          try {
            const loadingsData = await fetchArchivedLoadings(sectionId, employeeId)

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Loading
            const loadings: Loading[] = Array.isArray(loadingsData) ? loadingsData.map((item: any) => ({
              id: item.loading_id,
              responsibleId: item.loading_responsible,
              responsibleName: item.responsible_name || undefined,
              responsibleAvatarUrl: item.responsible_avatar || undefined,
              sectionId: item.loading_section,
              startDate: parseTimestampTz(item.loading_start) || new Date(),
              endDate: parseTimestampTz(item.loading_finish) || new Date(),
              rate: item.loading_rate || 1,
              createdAt: parseTimestampTz(item.loading_created) || new Date(),
              updatedAt: parseTimestampTz(item.loading_updated) || new Date(),
            })) : []

            return loadings
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫:", error)
            return []
          }
        },

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–¥–µ–ª–∞
        toggleSectionExpanded: async (sectionId: string) => {
          const { sections, expandedSections, loadingsMap } = get()

          // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª
          const section = sections.find((s) => s.id === sectionId)

          // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
          if (!section || !section.hasLoadings) return

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
          set((state) => ({
            expandedSections: {
              ...state.expandedSections,
              [sectionId]: !state.expandedSections[sectionId],
            },
            sections: state.sections.map((s) => {
              if (s.id === sectionId) {
                // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ loadingsMap
                const isExpanded = !state.expandedSections[sectionId]
                return {
                  ...s,
                  isExpanded,
                  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –∏ –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∑–æ–∫, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                  loadings: isExpanded 
                    ? mergeLoadingsWithoutDuplicates(s.loadings || [], loadingsMap[sectionId] || [])
                    : s.loadings,
                }
              }
              return s
            }),
            allSections: state.allSections.map((s) =>
              s.id === sectionId ? { ...s, isExpanded: !state.expandedSections[sectionId] } : s,
            ),
          }))
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª–∞
        toggleDepartmentExpanded: (departmentId: string) => {
          set((state) => ({
            expandedDepartments: {
              ...state.expandedDepartments,
              [departmentId]: !state.expandedDepartments[departmentId],
            },
            departments: state.departments.map((d) =>
              d.id === departmentId ? { ...d, isExpanded: !state.expandedDepartments[departmentId] } : d,
            ),
          }))
        },

        // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
        expandAllSections: async () => {
          const { sections, loadingsMap } = get()
          const sectionsWithLoadings = sections.filter((section) => section.hasLoadings)

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
          const newExpandedSections: Record<string, boolean> = {}
          sectionsWithLoadings.forEach((section) => {
            newExpandedSections[section.id] = true
          })

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          set((state) => ({
            expandedSections: newExpandedSections,
            sections: state.sections.map((s) => {
              if (s.hasLoadings) {
                return {
                  ...s,
                  isExpanded: true,
                  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –∏ –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∑–æ–∫, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                  loadings: mergeLoadingsWithoutDuplicates(s.loadings || [], loadingsMap[s.id] || []),
                }
              }
              return s
            }),
            allSections: state.allSections.map((s) => (s.hasLoadings ? { ...s, isExpanded: true } : s)),
          }))
        },

        // –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
        collapseAllSections: () => {
          set((state) => ({
            expandedSections: {},
            sections: state.sections.map((s) => ({ ...s, isExpanded: false })),
            allSections: state.allSections.map((s) => ({ ...s, isExpanded: false })),
          }))
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤
        expandAllDepartments: () => {
          const { departments } = get()
          const newExpandedDepartments: Record<string, boolean> = {}

          departments.forEach((department) => {
            newExpandedDepartments[department.id] = true
          })

          set((state) => ({
            expandedDepartments: newExpandedDepartments,
            departments: state.departments.map((d) => ({ ...d, isExpanded: true })),
          }))
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤
        collapseAllDepartments: () => {
          set((state) => ({
            expandedDepartments: {},
            departments: state.departments.map((d) => ({ ...d, isExpanded: false })),
          }))
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
        toggleShowSections: () => {
          const { showSections } = get()
          set({ showSections: !showSections })
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞ –æ—Ç–¥–µ–ª–æ–≤
        toggleShowDepartments: () => {
          const { showDepartments, departments } = get()
          const newShowDepartments = !showDepartments

          // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ–∫–∞–∑ –æ—Ç–¥–µ–ª–æ–≤ –∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
          if (newShowDepartments && departments.length === 0) {
            get().fetchDepartments()
          }

          set({ showDepartments: newShowDepartments })
        },

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        addSection: (section) => {
          set((state) => ({
            allSections: [...state.allSections, section],
            sections: [...state.sections, section],
          }))
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        updateSection: (id, updates) => {
          set((state) => ({
            sections: state.sections.map((section) => (section.id === id ? { ...section, ...updates } : section)),
            allSections: state.allSections.map((section) => (section.id === id ? { ...section, ...updates } : section)),
          }))
        },

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
        deleteSection: (id) => {
          set((state) => ({
            sections: state.sections.filter((section) => section.id !== id),
            allSections: state.allSections.filter((section) => section.id !== id),
          }))
        },

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        filterSectionsByName: (query) => {
          set({ searchQuery: query })

          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
          if (!query.trim()) {
            const { currentPage, sectionsPerPage, allSections, expandedSections, loadingsMap, projectSearchQuery } =
              get()

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            let filteredByProject = allSections
            if (projectSearchQuery.trim()) {
              filteredByProject = allSections.filter((section) =>
                section.projectName?.toLowerCase().includes(projectSearchQuery.toLowerCase()),
              )
            }

            const startIndex = (currentPage - 1) * sectionsPerPage
            const endIndex = startIndex + sectionsPerPage
            const visibleSections = filteredByProject.slice(startIndex, endIndex)

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
            const sectionsWithLoadings = visibleSections.map((section) => {
              if (expandedSections[section.id]) {
                return {
                  ...section,
                  loadings: loadingsMap[section.id] || [],
                }
              }
              return section
            })

            set({ sections: sectionsWithLoadings })
            return
          }

          // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const { allSections, expandedSections, loadingsMap, projectSearchQuery } = get()

          // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞
          let filteredSections = allSections.filter((section) =>
            section.name.toLowerCase().includes(query.toLowerCase()),
          )

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
          if (projectSearchQuery.trim()) {
            filteredSections = filteredSections.filter((section) =>
              section.projectName?.toLowerCase().includes(projectSearchQuery.toLowerCase()),
            )
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
          const sectionsWithLoadings = filteredSections.map((section) => {
            if (expandedSections[section.id]) {
              return {
                ...section,
                loadings: loadingsMap[section.id] || [],
              }
            }
            return section
          })

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
          set({ sections: sectionsWithLoadings })
        },

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        filterSectionsByProject: (query) => {
          set({ projectSearchQuery: query })

          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
          if (!query.trim()) {
            const { currentPage, sectionsPerPage, allSections, expandedSections, loadingsMap, searchQuery } = get()

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            let filteredByName = allSections
            if (searchQuery.trim()) {
              filteredByName = allSections.filter((section) =>
                section.name.toLowerCase().includes(searchQuery.toLowerCase()),
              )
            }

            const startIndex = (currentPage - 1) * sectionsPerPage
            const endIndex = startIndex + sectionsPerPage
            const visibleSections = filteredByName.slice(startIndex, endIndex)

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
            const sectionsWithLoadings = visibleSections.map((section) => {
              if (expandedSections[section.id]) {
                return {
                  ...section,
                  loadings: loadingsMap[section.id] || [],
                }
              }
              return section
            })

            set({ sections: sectionsWithLoadings })
            return
          }

          // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
          const { allSections, expandedSections, loadingsMap, searchQuery } = get()

          // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç—É
          let filteredSections = allSections.filter((section) =>
            section.projectName?.toLowerCase().includes(query.toLowerCase()),
          )

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
          if (searchQuery.trim()) {
            filteredSections = filteredSections.filter((section) =>
              section.name.toLowerCase().includes(searchQuery.toLowerCase()),
            )
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
          const sectionsWithLoadings = filteredSections.map((section) => {
            if (expandedSections[section.id]) {
              return {
                ...section,
                loadings: loadingsMap[section.id] || [],
              }
            }
            return section
          })

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
          set({ sections: sectionsWithLoadings })
        },

        // –§—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AbortController
        fetchSectionsWithSync: async (abortController: AbortController) => {
          set({ isLoadingSections: true })
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const { useFilterStore } = await import('../filters/store')
            const {
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              selectedEmployeeId,
              selectedStageId,
              selectedObjectId,
            } = useFilterStore.getState()
            
            const { sectionsPerPage, currentPage } = get()

            console.log("üìã –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", {
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              selectedEmployeeId,
              selectedStageId,
              selectedObjectId
            })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω
            if (abortController.signal.aborted) {
              console.log("üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
              return
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏)
            const result = await fetchSectionsWithLoadings(
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              selectedEmployeeId,
              selectedStageId,
              selectedObjectId,
            )

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π
            if ('success' in result && !result.success) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:", result.error)
              throw new Error(result.error)
            }

            const { sections: allSections, loadingsMap } = result as { sections: Section[]; loadingsMap: Record<string, Loading[]> }

            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allSections.length} —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–∏—Ö`)

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            const startIndex = (currentPage - 1) * sectionsPerPage
            const endIndex = startIndex + sectionsPerPage
            const visibleSections = allSections.slice(startIndex, endIndex)

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫ –≤–∏–¥–∏–º—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
            const sectionsWithLoadings = visibleSections.map((section) => ({
              ...section,
              loadings: loadingsMap[section.id] || [],
            }))

            set({
              allSections: allSections,
              sections: sectionsWithLoadings,
              loadingsMap,
              isLoadingSections: false,
              expandedSections: {},
              syncState: {
                ...get().syncState,
                lastDataLoadTime: Date.now(),
              }
            })
          } catch (error) {
            if (abortController.signal.aborted) {
              console.log("üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
              return
            }
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤:", error)
            set({ isLoadingSections: false })
          }
        },

        fetchDepartmentsWithSync: async (abortController: AbortController) => {
          set({ isLoadingDepartments: true })
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const { useFilterStore } = await import('../filters/store')
            const { selectedDepartmentId, selectedTeamId, selectedEmployeeId } = useFilterStore.getState()

            console.log("üè¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", {
              selectedDepartmentId,
              selectedTeamId,
              selectedEmployeeId
            })

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω
            if (abortController.signal.aborted) {
              console.log("üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
              return
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            let query = supabase.from("view_organizational_structure").select("*")

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
            if (selectedDepartmentId) {
              query = query.eq("department_id", selectedDepartmentId)
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞
            if (selectedTeamId) {
              query = query.eq("team_id", selectedTeamId)
            }

            const { data: orgData, error: orgError } = await query

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            if (abortController.signal.aborted) {
              console.log("üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
              return
            }

            if (orgError) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", orgError)
              throw orgError
            }

            console.log("üè¢ –î–∞–Ω–Ω—ã–µ –∏–∑ view_organizational_structure:", orgData?.length, "–∑–∞–ø–∏—Å–µ–π")

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö —Å –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            let employeeQuery = supabase
              .from("view_employee_workloads")
              .select("*")
              .or("loading_status.eq.active,loading_status.is.null")

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            if (selectedDepartmentId) {
              employeeQuery = employeeQuery.eq("final_department_id", selectedDepartmentId)
            }

            if (selectedTeamId) {
              employeeQuery = employeeQuery.eq("final_team_id", selectedTeamId)
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
            if (selectedEmployeeId) {
              employeeQuery = employeeQuery.eq("user_id", selectedEmployeeId)
            }

            const { data: employeeData, error: employeeError } = await employeeQuery

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            if (abortController.signal.aborted) {
              console.log("üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö")
              return
            }

            if (employeeError) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö:", employeeError)
              throw employeeError
            }

            console.log("üë• –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö:", employeeData?.length, "–∑–∞–ø–∏—Å–µ–π")

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º –∏ –∫–æ–º–∞–Ω–¥–∞–º (—Ç–æ—Ç –∂–µ –∫–æ–¥ —á—Ç–æ –∏ –≤ fetchDepartments)
            const departmentsMap = new Map<string, Department>()
            const teamsMap = new Map<string, Team>()
            const employeesMap = new Map<string, any>()

            // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏
            employeeData?.forEach((item) => {
              if (!employeesMap.has(item.user_id)) {
                employeesMap.set(item.user_id, {
                  id: item.user_id,
                  firstName: item.first_name,
                  lastName: item.last_name,
                  fullName: item.full_name,
                  email: item.email,
                  position: item.position_name,
                  avatarUrl: item.avatar_url,
                  teamId: item.final_team_id,
                  teamName: item.final_team_name,
                  teamCode: "",
                  departmentId: item.final_department_id,
                  departmentName: item.final_department_name,
                  loadings: [],
                  dailyWorkloads: {},
                  hasLoadings: item.has_loadings,
                  loadingsCount: item.loadings_count,
                  employmentRate: item.employment_rate || 1,
                })
              }

              const employee = employeesMap.get(item.user_id)

              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
              if (item.loading_id) {
                employee.loadings.push({
                  id: item.loading_id,
                  responsibleId: item.user_id,
                  responsibleName: item.full_name,
                  responsibleAvatarUrl: item.avatar_url,
                  responsibleTeamName: item.final_team_name,
                  sectionId: item.loading_section,
                  sectionName: item.section_name,
                  projectId: null,
                  projectName: item.project_name,
                  projectStatus: item.project_status,
                  startDate: new Date(item.loading_start),
                  endDate: new Date(item.loading_finish),
                  rate: item.loading_rate || 1,
                })
              }
            })

            // –í—ã—á–∏—Å–ª—è–µ–º dailyWorkloads –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employeesMap.forEach((employee) => {
              employee.dailyWorkloads = {}
              if (employee.loadings && employee.loadings.length > 0) {
                employee.loadings.forEach((loading: Loading) => {
                  const startDate = new Date(loading.startDate)
                  const endDate = new Date(loading.endDate)
                  const currentDate = new Date(startDate)

                  while (currentDate <= endDate) {
                    const dateKey = currentDate.toISOString().split("T")[0]
                    if (!employee.dailyWorkloads[dateKey]) {
                      employee.dailyWorkloads[dateKey] = 0
                    }
                    employee.dailyWorkloads[dateKey] += loading.rate || 1
                    currentDate.setDate(currentDate.getDate() + 1)
                  }
                })
              }
            })

            // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            orgData?.forEach((item) => {
              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª
              if (!departmentsMap.has(item.department_id)) {
                departmentsMap.set(item.department_id, {
                  id: item.department_id,
                  name: item.department_name,
                  wsDepartmentId: item.ws_department_id,
                  totalEmployees: item.department_employee_count || 0,
                  teams: [],
                  dailyWorkloads: {},
                  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –æ—Ç–¥–µ–ª–∞
                  departmentHeadId: item.department_head_id,
                  departmentHeadName: item.department_head_full_name,
                  departmentHeadEmail: item.department_head_email,
                  departmentHeadAvatarUrl: item.department_head_avatar_url,
                  managerName: item.department_head_full_name, // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                })
              }

              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
              if (item.team_id) {
                const teamKey = `${item.department_id}-${item.team_id}`
                if (!teamsMap.has(teamKey)) {
                  teamsMap.set(teamKey, {
                    id: item.team_id,
                    name: item.team_name,
                    code: "",
                    departmentId: item.department_id,
                    departmentName: item.department_name,
                    totalEmployees: item.team_employee_count || 0,
                    employees: [],
                    dailyWorkloads: {},
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –∫–æ–º–∞–Ω–¥—ã
                    teamLeadId: item.team_lead_id,
                    teamLeadName: item.team_lead_full_name,
                    teamLeadEmail: item.team_lead_email,
                    teamLeadAvatarUrl: item.team_lead_avatar_url,
                  })
                }
              }
            })

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            employeesMap.forEach((employee) => {
              const teamKey = `${employee.departmentId}-${employee.teamId}`
              const team = teamsMap.get(teamKey)
              
              if (team) {
                team.employees.push(employee)
                
                // –°—É–º–º–∏—Ä—É–µ–º dailyWorkloads –∫–æ–º–∞–Ω–¥—ã
                Object.keys(employee.dailyWorkloads || {}).forEach((dateKey) => {
                  if (!team.dailyWorkloads) {
                    team.dailyWorkloads = {}
                  }
                  if (!team.dailyWorkloads[dateKey]) {
                    team.dailyWorkloads[dateKey] = 0
                  }
                  team.dailyWorkloads[dateKey] += employee.dailyWorkloads[dateKey]
                })
              }
            })

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
            teamsMap.forEach((team) => {
              const department = departmentsMap.get(team.departmentId)
              if (department) {
                department.teams.push(team)

                // –°—É–º–º–∏—Ä—É–µ–º dailyWorkloads –æ—Ç–¥–µ–ª–∞
                Object.keys(team.dailyWorkloads || {}).forEach((dateKey) => {
                  if (!department.dailyWorkloads) {
                    department.dailyWorkloads = {}
                  }
                  if (!department.dailyWorkloads[dateKey]) {
                    department.dailyWorkloads[dateKey] = 0
                  }
                  department.dailyWorkloads[dateKey] += (team.dailyWorkloads || {})[dateKey] || 0
                })
              }
            })

            const departments = Array.from(departmentsMap.values())

            console.log("üè¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:", {
              totalDepartments: departments.length,
              departments: departments.map((dept) => ({
                id: dept.id,
                name: dept.name,
                headName: dept.departmentHeadName,
                totalEmployees: dept.totalEmployees,
                teams: dept.teams.map((team) => ({
                  id: team.id,
                  name: team.name,
                  leadName: team.teamLeadName,
                  employeeCount: team.employees.length,
                })),
              })),
            })

            set({
              departments,
              isLoadingDepartments: false,
              syncState: {
                ...get().syncState,
                lastDataLoadTime: Date.now(),
              }
            })

            console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${departments.length} –æ—Ç–¥–µ–ª–æ–≤ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏`)
          } catch (error) {
            if (abortController.signal.aborted) {
              console.log("üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
              return
            }
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", error)
            set({ isLoadingDepartments: false })
          }
        },

        // –§—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        generateFiltersKey: (filters: {
          projectId: string | null
          departmentId: string | null
          teamId: string | null
          managerId: string | null
          employeeId: string | null
          stageId: string | null
          objectId: string | null
        }) => {
          const { projectId, departmentId, teamId, managerId, employeeId, stageId, objectId } = filters
          return `${projectId}-${departmentId}-${teamId}-${managerId}-${employeeId}-${stageId}-${objectId}`
        },
        isDataSynced: () => {
          const { syncState } = get()
          return syncState.isApplyingFilters === false && syncState.lastDataLoadTime !== null
        },
        getDataSyncStatus: () => {
          const { syncState } = get()
          const currentTime = Date.now()
          const lastDataLoadTime = syncState.lastDataLoadTime || 0
          const isApplying = syncState.isApplyingFilters
          const hasStaleData = currentTime - lastDataLoadTime > 10000 // 10 seconds
          return { isSynced: isApplying === false, isApplying, hasStaleData }
        },
        cancelPendingRequests: () => {
          const { syncState } = get()
          if (syncState.abortController) {
            syncState.abortController.abort()
          }
          set((state) => ({
            syncState: {
              ...state.syncState,
              isApplyingFilters: false,
              abortController: null,
            }
          }))
        },
        // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
        syncWithFilterStore: () => {
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          import('../filters/store').then(({ useFilterStore }) => {
            const filterStore = useFilterStore.getState()
            const {
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              selectedEmployeeId,
              selectedStageId,
              selectedObjectId,
            } = filterStore

            console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤:", {
              selectedProjectId,
              selectedDepartmentId,
              selectedTeamId,
              selectedManagerId,
              selectedEmployeeId,
              selectedStageId,
              selectedObjectId
            })

            const currentState = get()
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const newFilters = {
              projectId: selectedProjectId,
              departmentId: selectedDepartmentId,
              teamId: selectedTeamId,
              managerId: selectedManagerId,
              employeeId: selectedEmployeeId,
              stageId: selectedStageId,
              objectId: selectedObjectId,
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const newFiltersKey = currentState.generateFiltersKey(newFilters)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
            const filtersChanged = currentState.syncState.filtersKey !== newFiltersKey
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const needsInitialLoad = currentState.syncState.lastDataLoadTime === null

            if (filtersChanged || needsInitialLoad) {
              // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
              if (currentState.syncState.abortController) {
                currentState.syncState.abortController.abort()
              }
              
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController
              const abortController = new AbortController()
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              set({
                currentPage: 1,
                syncState: {
                  ...currentState.syncState,
                  isApplyingFilters: true,
                  currentFilters: newFilters,
                  filtersKey: newFiltersKey,
                  abortController: abortController,
                }
              })

              // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º AbortController
              get().fetchSectionsWithSync(abortController)
              // –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Ç–¥–µ–ª—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö —Ç–æ–∂–µ
              if (currentState.showDepartments) {
                get().fetchDepartmentsWithSync(abortController)
              }
            }
          })
        },
      }),
      {
        name: "planning-data-storage",
        partialize: (state) => ({
          expandedSections: state.expandedSections,
          expandedDepartments: state.expandedDepartments,
          showDepartments: state.showDepartments,
          currentPage: state.currentPage,
        }),
      },
    ),
  ),
)
