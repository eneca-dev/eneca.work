import { useState, useEffect, useCallback } from 'react';
import { createClient } from '@/utils/supabase/client';
import { SectionStatus, SectionStatusFormData } from '../types';

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const dispatchStatusEvent = (
  eventType: 'statusCreated' | 'statusUpdated' | 'statusDeleted',
  logData: any,
  eventDetail: any,
  logIcon: string = 'üì§'
) => {
  console.log(`${logIcon} –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ${eventType}:`, logData);
  
  if (typeof window !== 'undefined') {
    window.dispatchEvent(new CustomEvent(eventType, {
      detail: eventDetail
    }));
  }
};

export function useSectionStatuses() {
  const [statuses, setStatuses] = useState<SectionStatus[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadStatuses = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const supabase = createClient();
      const { data, error } = await supabase
        .from('section_statuses')
        .select('*')
        .order('name');

      if (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Supabase:', error);
        setError(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤');
        return;
      }
      
      setStatuses(data || []);
    } catch (err) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤';
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
  const handleStatusCreated = useCallback(() => {
    console.log('üì• useSectionStatuses: –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ statusCreated, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫');
    loadStatuses();
  }, [loadStatuses]);

  const handleStatusUpdated = useCallback(() => {
    console.log('üì• useSectionStatuses: –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ statusUpdated, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫');
    loadStatuses();
  }, [loadStatuses]);

  const handleStatusDeleted = useCallback(() => {
    console.log('üì• useSectionStatuses: –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ statusDeleted, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫');
    loadStatuses();
  }, [loadStatuses]);

  const createStatus = useCallback(async (statusData: SectionStatusFormData): Promise<SectionStatus | null> => {
    setIsLoading(true);
    setError(null);
    try {
      const supabase = createClient();
      const { data, error } = await supabase
        .from('section_statuses')
        .insert({
          name: statusData.name,
          color: statusData.color,
          description: statusData.description || null
        })
        .select()
        .single();

      if (error) throw error;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      // loadStatuses() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ event listener'–∞
      dispatchStatusEvent(
        'statusCreated',
        {
          statusId: data.id,
          statusName: data.name,
          statusColor: data.color
        },
        {
          statusId: data.id,
          statusName: data.name,
          statusColor: data.color,
          statusDescription: data.description
        },
        '‚úÖ'
      );
      
      return data;
    } catch (err) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      return null;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const updateStatus = useCallback(async (id: string, statusData: SectionStatusFormData): Promise<SectionStatus | null> => {
    setIsLoading(true);
    setError(null);
    try {
      const supabase = createClient();
      const { data, error } = await supabase
        .from('section_statuses')
        .update({
          name: statusData.name,
          color: statusData.color,
          description: statusData.description || null
        })
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      // loadStatuses() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ event listener'–∞
      dispatchStatusEvent(
        'statusUpdated',
        {
          statusId: data.id,
          statusName: data.name,
          statusColor: data.color
        },
        {
          statusId: data.id,
          statusName: data.name,
          statusColor: data.color,
          statusDescription: data.description
        },
        'üîÑ'
      );
      
      return data;
    } catch (err) {
      console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      return null;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const deleteStatus = useCallback(async (id: string): Promise<boolean> => {
    setIsLoading(true);
    setError(null);
    try {
      const supabase = createClient();
      
      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å, 
      // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∏–º "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞" (section_status_id = NULL)
      const { error: updateError } = await supabase
        .from('sections')
        .update({ section_status_id: null })
        .eq('section_status_id', id);

      if (updateError) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤:', updateError);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å');
      }

      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–∑–¥–µ–ª—ã: —Å—Ç–∞—Ç—É—Å ${id} –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"`);

      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º —Å—Ç–∞—Ç—É—Å
      const { error } = await supabase
        .from('section_statuses')
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      // loadStatuses() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ event listener'–∞
      dispatchStatusEvent(
        'statusDeleted',
        { statusId: id },
        { statusId: id },
        'üóëÔ∏è'
      );
      
      return true;
    } catch (err) {
      console.warn('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      return false;
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    loadStatuses();
  }, [loadStatuses]);

  // –°–ª—É—à–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    if (typeof window !== 'undefined') {
      window.addEventListener('statusCreated', handleStatusCreated);
      window.addEventListener('statusUpdated', handleStatusUpdated);
      window.addEventListener('statusDeleted', handleStatusDeleted);
    }

    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('statusCreated', handleStatusCreated);
        window.removeEventListener('statusUpdated', handleStatusUpdated);
        window.removeEventListener('statusDeleted', handleStatusDeleted);
      }
    };
  }, [handleStatusCreated, handleStatusUpdated, handleStatusDeleted]);

  return {
    statuses,
    isLoading,
    error,
    loadStatuses,
    createStatus,
    updateStatus,
    deleteStatus
  };
} 