"use client"

import type React from "react"
import { useEffect, useRef, useCallback } from "react"
import { useRouter } from "next/navigation"

import { formatDistanceToNow } from "date-fns"
import { ru } from "date-fns/locale"
import { AlertCircle, CheckCircle, Info, AlertTriangle } from "lucide-react"
import { Notification } from "@/stores/useNotificationsStore"
import { useNotificationsStore } from "@/stores/useNotificationsStore"
import { useAnnouncementsStore } from "@/modules/announcements/store"
import { cn } from "@/lib/utils"

interface NotificationItemProps {
  notification: Notification
}

const typeIcons = {
  info: Info,
  success: CheckCircle,
  warning: AlertTriangle,
  error: AlertCircle,
}

const typeColors = {
  info: "text-blue-500",
  success: "text-green-500",
  warning: "text-yellow-500",
  error: "text-red-500",
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationTags = {
  announcement: {
    text: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ",
    color: "bg-purple-100 text-purple-800 dark:bg-purple-800/20 dark:text-purple-200",
  },
  announcements: {
    text: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ",
    color: "bg-purple-100 text-purple-800 dark:bg-purple-800/20 dark:text-purple-200",
  },
  assignment: {
    text: "–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏–π",
    color: "bg-orange-100 text-orange-800 dark:bg-orange-800/20 dark:text-orange-200",
  },
  assignments: {
    text: "–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏–π",
    color: "bg-orange-100 text-orange-800 dark:bg-orange-800/20 dark:text-orange-200",
  },
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getNotificationTag(entityType?: string) {
  if (!entityType) return null
  return notificationTags[entityType as keyof typeof notificationTags]
}

export function NotificationItem({ notification }: NotificationItemProps) {
  const Icon = typeIcons[notification.type || "info"]
  const iconColor = typeColors[notification.type || "info"]
  const notificationTag = getNotificationTag(notification.entityType)
  const elementRef = useRef<HTMLDivElement>(null)
  const observerRef = useRef<IntersectionObserver | null>(null)
  const hasBeenMarkedAsRead = useRef(false)
  const router = useRouter()
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ payload –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  const userName = (notification.entityType === 'announcement' || notification.entityType === 'announcements') 
    ? notification.payload?.user_name 
    : null
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–∑ payload –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
  const fromSection = (notification.entityType === 'assignment' || notification.entityType === 'assignments') 
    ? notification.payload?.from_section
    : null

  const { markAsRead, markAsReadInDB } = useNotificationsStore()
  const { highlightAnnouncement } = useAnnouncementsStore()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const handleClick = useCallback(() => {
    console.log('üñ±Ô∏è –ö–ª–∏–∫ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', {
      id: notification.id,
      entityType: notification.entityType,
      payload: notification.payload,
      title: notification.title
    })

    // –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    if (!notification.isRead) {
      markAsRead(notification.id)
      markAsReadInDB(notification.id)
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
    if (notification.entityType === 'announcement' || notification.entityType === 'announcements') {
      const announcementId = notification.payload?.announcement_id || notification.payload?.action?.data?.announcementId
      
      console.log('üì¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:', {
        announcementId,
        payload: notification.payload,
        fullNotification: notification
      })
      
      if (announcementId) {
        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é:', announcementId)
        
        // –í—ã–¥–µ–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ store
        highlightAnnouncement(announcementId)
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É dashboard
        router.push('/dashboard')
      } else {
        console.warn('‚ö†Ô∏è ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ payload')
      }
    }
  }, [notification, markAsRead, markAsReadInDB, highlightAnnouncement, router])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  const handleMarkAsRead = useCallback(async () => {
    if (notification.isRead || hasBeenMarkedAsRead.current) return

    hasBeenMarkedAsRead.current = true
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      markAsRead(notification.id)
      
      // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await markAsReadInDB(notification.id)
      
      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notification.id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error)
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      hasBeenMarkedAsRead.current = false
    }
  }, [notification.id, notification.isRead, markAsRead, markAsReadInDB])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Intersection Observer
  useEffect(() => {
    if (notification.isRead || !elementRef.current) return

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å –ø–æ—Ä–æ–≥–æ–º 50%
    observerRef.current = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting && !hasBeenMarkedAsRead.current) {
          console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notification.id} —Å—Ç–∞–ª–æ –≤–∏–¥–∏–º—ã–º`)
          handleMarkAsRead()
          
          // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
          if (observerRef.current && entry.target) {
            observerRef.current.unobserve(entry.target)
          }
        }
      },
      { 
        threshold: 0.5, // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ 50% —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∏–¥–∏–º—ã–º
        rootMargin: '0px 0px -50px 0px' // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
      }
    )

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    observerRef.current.observe(elementRef.current)

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect()
      }
    }
  }, [notification.id, notification.isRead, handleMarkAsRead])

  // –û—á–∏—Å—Ç–∫–∞ observer –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
  useEffect(() => {
    if (notification.isRead && observerRef.current) {
      observerRef.current.disconnect()
    }
  }, [notification.isRead])

  return (
    <div
      ref={elementRef}
      data-notification-id={notification.id}
      onClick={handleClick}
      className={cn(
        "relative p-3 rounded-lg border transition-colors hover:bg-gray-50 dark:hover:bg-gray-700/50 cursor-pointer",
        notification.isRead
          ? "bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700"
          : "bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800",
      )}
    >
      <div className="flex items-start gap-3">
        <Icon className={cn("h-4 w-4 mt-0.5 flex-shrink-0", iconColor)} />

        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between gap-2">
            <h4 className="text-sm font-medium truncate text-gray-900 dark:text-gray-100">
              {notification.title}
            </h4>
            {notificationTag && (
              <span className={cn(
                "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium shrink-0",
                notificationTag.color
              )}>
                {notificationTag.text}
              </span>
            )}
          </div>

          <p className="text-xs mt-1 line-clamp-2 text-gray-600 dark:text-gray-400">
            {notification.message}
          </p>

          <div className="flex items-center justify-between mt-2">
            <p className="text-xs text-gray-500 dark:text-gray-500">
              {formatDistanceToNow(notification.createdAt, {
                addSuffix: true,
                locale: ru,
              })}
            </p>
            {userName && (
              <p className="text-xs text-gray-500 dark:text-gray-500 font-medium">
                {userName}
              </p>
            )}
            {fromSection && (
              <p className="text-xs text-gray-500 dark:text-gray-500 font-medium">
                –∏–∑ {fromSection}
              </p>
            )}
          </div>
        </div>
      </div>

      {!notification.isRead && (
        <div className="absolute top-3 right-3 h-2 w-2 bg-blue-600 rounded-full"></div>
      )}
    </div>
  )
}
