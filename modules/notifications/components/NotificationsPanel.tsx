"use client"

import type React from "react"
import { useState, useEffect, useRef, useCallback, useMemo } from "react"
import throttle from "lodash.throttle"
import * as Sentry from "@sentry/nextjs"
import { cn } from "@/lib/utils"
import { useNotificationsStore } from "@/stores/useNotificationsStore"
import { NotificationItem } from "./NotificationItem"
import { Button } from "@/components/ui/button"
import { X, Loader2, RefreshCw, Filter, SlidersHorizontal, Check, Megaphone } from "lucide-react"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { Modal } from "@/components/modals"
import { AnnouncementForm } from "@/modules/announcements/components/AnnouncementForm"
import { useAnnouncements } from "@/modules/announcements/hooks/useAnnouncements"
import { useAnnouncementsPermissions } from "@/modules/permissions/hooks/usePermissions"
import { useAnnouncementsStore } from "@/modules/announcements/store"
import { toast } from "@/components/ui/use-toast"
import { getNotificationTypeCounts } from "@/modules/notifications/api/notifications"

interface NotificationsPanelProps {
  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤–∏–ª—É —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –ø—Ä–æ–ø—Å–æ–≤ –≤ Next.js
  onCloseAction: () => void
  collapsed?: boolean
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NOTIFICATION_TYPES = [
  { value: 'announcement', label: '–û–±—ä—è–≤–ª–µ–Ω–∏—è', color: 'bg-purple-100 text-purple-800 dark:bg-purple-800/20 dark:text-purple-200' },
  { value: 'assignment', label: '–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏–π', color: 'bg-orange-100 text-orange-800 dark:bg-orange-800/20 dark:text-orange-200' },
  { value: 'section_comment', label: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', color: 'bg-blue-100 text-blue-800 dark:bg-blue-800/20 dark:text-blue-200' },
  { value: 'task', label: '–ó–∞–¥–∞—á–∏', color: 'bg-green-100 text-green-800 dark:bg-green-800/20 dark:text-green-200' },
]

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

export function NotificationsPanel({ onCloseAction, collapsed = false }: NotificationsPanelProps) {
  const [selectedTypes, setSelectedTypes] = useState<Set<string>>(new Set())
  const [readFilter, setReadFilter] = useState<'all' | 'unread' | 'archived'>('all')
  const [isTypeFilterOpen, setIsTypeFilterOpen] = useState(false)
  const [isReadFilterOpen, setIsReadFilterOpen] = useState(false)
  const [isAnnouncementFormOpen, setIsAnnouncementFormOpen] = useState(false)
  const [editingAnnouncement, setEditingAnnouncement] = useState<any>(null)
  const [hasPanelBeenOpened, setHasPanelBeenOpened] = useState(false)
  const [isRefreshingOnOpen, setIsRefreshingOnOpen] = useState(false)
  // –î–µ–±–∞–≥-–ø–∞–Ω–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
  const panelRef = useRef<HTMLDivElement>(null)
  const scrollRef = useRef<HTMLDivElement>(null)
  // –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ hover
  const setPointerPosition = useNotificationsStore((s) => s.setPointerPosition)
  const clearPointerPosition = useNotificationsStore((s) => s.clearPointerPosition)
  const panelWidthPx = useNotificationsStore((s) => s.panelWidthPx)
  const currentUserId = useNotificationsStore((s) => s.currentUserId)
  const allFilteredRef = useRef(0)
  const isMountedRef = useRef(true)

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è (~60fps)
  const throttledSetPointerPosition = useMemo(() =>
    throttle((pos: { x: number; y: number }) => {
      setPointerPosition(pos)
    }, 16)
  , [setPointerPosition])

  // –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º (–±–µ–∑ –∞—Ä—Ö–∏–≤–∞)
  const [typeCounts, setTypeCounts] = useState<Record<string, number>>({})
  const [isLoadingTypeCounts, setIsLoadingTypeCounts] = useState(false)
  // –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ
  const [isManualRefreshing, setIsManualRefreshing] = useState(false)
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–∏–ø–æ–≤ (1..3)
  const [loadingDots, setLoadingDots] = useState(1)

  const { 
    notifications, 
    isLoading, 
    error, 
    fetchNotifications, 
    markAsRead,
    markAsReadInDB,
    clearAll,
    // –ü–æ–ª—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    hasMore,
    isLoadingMore,
    loadMoreNotifications,
    setServerTypeFilter,
    clearServerFilters
  } = useNotificationsStore()

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  const [visibleFilteredCount, setVisibleFilteredCount] = useState(10)
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç–∏,
  // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  const isClientFilterMode = useMemo(
    () => (selectedTypes.size === 0 && readFilter !== 'all'),
    [selectedTypes, readFilter]
  )

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–¥–µ–±–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω)


  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ id, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
  const dedupedNotifications = useMemo(() => {
    const seen = new Set<string>()
    const result: typeof notifications = []
    for (const n of notifications) {
      const id = (n as any)?.id
      if (id && !seen.has(id)) {
        seen.add(id)
        result.push(n)
      }
    }
    return result
  }, [notifications])

  // –ê–≤—Ç–æ–¥–æ–≥—Ä—É–∑–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É (—Ç–∏–ø–æ–≤ –Ω–µ—Ç) –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞.
  // –î–æ–≥—Ä—É–∑–∫–∞ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–∫—Ä–æ–ª–ª–∞ –Ω–∏–∂–µ —á–µ—Ä–µ–∑ hasMore.

  // –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
  const { removeAnnouncement, fetchAnnouncements: fetchAnnouncementsData } = useAnnouncements()
  const { canManage: canManageAnnouncements } = useAnnouncementsPermissions()
  const { announcements } = useAnnouncementsStore()

  // –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
  const handleClose = useCallback(() => {
    console.log('üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    setSelectedTypes(new Set())
    setReadFilter('all')
    onCloseAction()
  }, [onCloseAction])

  // –§–æ–Ω–æ–≤–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å –ø–æ–∏—Å–∫–æ–º

  // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–æ–≤–µ—Ä–∞ —Ç–∏–ø–æ–≤ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ (–∏—Å–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤)
  useEffect(() => {
    if (!isTypeFilterOpen) return
    if (!currentUserId) return
    let cancelled = false
    const loadCounts = async () => {
      try {
        setIsLoadingTypeCounts(true)
        const counts = await getNotificationTypeCounts(currentUserId, { includeArchived: false })
        if (!cancelled) setTypeCounts(counts)
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', e)
      } finally {
        if (!cancelled) setIsLoadingTypeCounts(false)
      }
    }
    loadCounts()
    return () => { cancelled = true }
  }, [isTypeFilterOpen, currentUserId])

  // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ—á–µ–∫ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ç–∏–ø–æ–≤
  useEffect(() => {
    if (!isTypeFilterOpen || !isLoadingTypeCounts) return
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setLoadingDots(1)
    const id = setInterval(() => {
      setLoadingDots((prev) => (prev >= 3 ? 1 : prev + 1))
    }, 400)
    return () => clearInterval(id)
  }, [isTypeFilterOpen, isLoadingTypeCounts])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø–∞–º
  const handleTypeFilterChange = useCallback((type: string, checked: boolean) => {
    setSelectedTypes(prev => {
      const newSet = new Set(prev)
      if (checked) {
        newSet.add(type)
      } else {
        newSet.delete(type)
      }
      return newSet
    })
    setVisibleFilteredCount(10)
  }, [])

  // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleClearFilters = useCallback(() => {
    setSelectedTypes(new Set())
    setReadFilter('all')
    setVisibleFilteredCount(10)
  }, [])

  // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤: –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–∞—á–∫–∞–º–∏ –ø–æ 10
  useEffect(() => {
    const typesArray = Array.from(selectedTypes)
    if (typesArray.length > 0) {
      const normalized = typesArray // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
      setServerTypeFilter(normalized)
    } else {
      clearServerFilters()
    }
  }, [selectedTypes, setServerTypeFilter, clearServerFilters])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  const handleCreateAnnouncement = useCallback(() => {
    setEditingAnnouncement(null)
    setIsAnnouncementFormOpen(true)
  }, [])

  const handleEditAnnouncement = useCallback(async (announcementId: string) => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º store
      let announcement = announcements.find((a: any) => a.id === announcementId)
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      if (!announcement) {
        await fetchAnnouncementsData()
        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—â–µ–º –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º store
        const updatedAnnouncements = useAnnouncementsStore.getState().announcements
        announcement = updatedAnnouncements.find((a: any) => a.id === announcementId)
      }
      
      if (announcement) {
        setEditingAnnouncement(announcement)
        setIsAnnouncementFormOpen(true)
      } else {
        console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', announcementId)
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
          variant: "destructive"
        })
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        variant: "destructive"
      })
    }
  }, [announcements, fetchAnnouncementsData])

  const handleCloseAnnouncementForm = useCallback(() => {
    setIsAnnouncementFormOpen(false)
    setEditingAnnouncement(null)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    const scrollElement = scrollRef.current
    if (!scrollElement) return

    const handleScroll = () => {
      const { scrollTop, scrollHeight, clientHeight } = scrollElement
      const isNearBottom = scrollTop + clientHeight >= scrollHeight - 200

      if (isClientFilterMode) {
        if (isNearBottom) {
          const totalFiltered = allFilteredRef.current
          if (visibleFilteredCount < totalFiltered) {
            setVisibleFilteredCount((prev) => Math.min(prev + 10, totalFiltered))
          }
        }
        return
      }

      if (isNearBottom && hasMore && !isLoadingMore && !isLoading) {
        console.log('üìú –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        loadMoreNotifications()
      }
    }

    scrollElement.addEventListener('scroll', handleScroll, { passive: true })
    return () => scrollElement.removeEventListener('scroll', handleScroll)
  }, [hasMore, isLoadingMore, isLoading, loadMoreNotifications, isClientFilterMode, visibleFilteredCount])

  // –ê–≤—Ç–æ-–ø—Ä–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ: –±–æ–ª—å—à–µ –Ω–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      if (isAnnouncementFormOpen) {
        return
      }
      
      const target = event.target as HTMLElement | null
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–≥–æ toggle
      if (target && target.closest('[data-notifications-bell]')) {
        return
      }
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—é —Ç–µ–º—ã
      if (target && (target.closest('[data-theme-toggle]') || (target as HTMLElement).hasAttribute('data-theme-toggle'))) {
        return
      }
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Ñ–∏–ª—å—Ç—Ä–∞ (Popover)
      if (target && target.closest('[data-radix-popper-content-wrapper]')) {
        return
      }
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      if (target && target.closest('[role="dialog"]')) {
        return
      }
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å (–Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –≥–ª–∞–≤–Ω–æ–π)
      if (target && target.closest('[data-keep-notifications-open]')) {
        return
      }
      if (panelRef.current && !panelRef.current.contains(event.target as Node)) {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –≤–Ω–µ –ø–∞–Ω–µ–ª–∏ - –∑–∞–∫—Ä—ã–≤–∞–µ–º')
        handleClose()
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [handleClose, isAnnouncementFormOpen])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Escape
  useEffect(() => {
    function handleEscape(event: KeyboardEvent) {
      if (event.key === 'Escape') {
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å (–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–∞–º–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç Escape)
        if (isAnnouncementFormOpen) {
          return
        }
        console.log('‚å®Ô∏è –ù–∞–∂–∞—Ç–∞ Escape - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å')
        handleClose()
      }
    }

    document.addEventListener("keydown", handleEscape)
    return () => document.removeEventListener("keydown", handleEscape)
  }, [handleClose, isAnnouncementFormOpen])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    isMountedRef.current = true
    return () => {
      isMountedRef.current = false
    }
  }, [])

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  useEffect(() => {
    return () => {
      throttledSetPointerPosition.cancel()
    }
  }, [throttledSetPointerPosition])

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (hasPanelBeenOpened || !currentUserId) return

    console.log('üîÑ –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç–∞ –≤–ø–µ—Ä–≤—ã–µ - –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    setHasPanelBeenOpened(true)
    setIsRefreshingOnOpen(true)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    fetchNotifications()
      .then(() => {
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏')
      })
      .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏:', error)
      })
      .finally(() => {
        if (isMountedRef.current) {
          setIsRefreshingOnOpen(false)
        }
      })
  }, [hasPanelBeenOpened, currentUserId, fetchNotifications])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const filteredNotifications = useMemo(() => {
    // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const allFiltered = dedupedNotifications.filter((notification) => {
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω: –¥–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö,
      // –∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
      const matchesType = true
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ—á—Ç–µ–Ω–∏—è/–∞—Ä—Ö–∏–≤—É
      let matchesRead = true
      if (readFilter === 'unread') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∏ –Ω–µ–∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        matchesRead = !notification.isRead && !Boolean((notification as any).isArchived)
      } else if (readFilter === 'archived') {
        matchesRead = Boolean((notification as any).isArchived)
      } else {
        // –í "–í—Å–µ" —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        matchesRead = !Boolean((notification as any).isArchived)
      }
      
      return matchesType && matchesRead
    }).sort((a, b) => {
      // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –¥–∞—Ç–µ, –∑–∞—Ç–µ–º –ø–æ id –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
      const diff = new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      if (diff !== 0) return diff
      if (a.id === b.id) return 0
      return a.id < b.id ? -1 : 1
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    allFilteredRef.current = allFiltered.length

    // –í —Ä–µ–∂–∏–º–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—É—é —á–∞—Å—Ç—å
    if (isClientFilterMode) {
      return allFiltered.slice(0, visibleFilteredCount)
    }

    return allFiltered
  }, [dedupedNotifications, readFilter, isClientFilterMode, visibleFilteredCount])

  // –î–µ–±–∞–≥-—Å–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã

  // –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏)
  useEffect(() => {
    if (isClientFilterMode) {
      setVisibleFilteredCount(10)
    }
  }, [isClientFilterMode])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const handleRefresh = async () => {
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏
    setIsManualRefreshing(true)
    return Sentry.startSpan(
      {
        op: "ui.click",
        name: "Refresh Notifications",
      },
      async (span) => {
        try {
          span.setAttribute("refresh.trigger", "manual")
          span.setAttribute("notifications.current_count", notifications.length)

          await fetchNotifications()

          span.setAttribute("refresh.success", true)

          Sentry.addBreadcrumb({
            message: 'Notifications refreshed manually',
            category: 'notifications',
            level: 'info',
            data: {
              trigger: 'manual',
              previous_count: notifications.length
            }
          })
        } catch (error) {
          span.setAttribute("refresh.success", false)
          span.recordException(error as Error)
          Sentry.captureException(error, {
            tags: {
              module: 'notifications',
              component: 'NotificationsPanel',
              action: 'refresh',
              error_type: 'unexpected_error'
            },
            extra: {
              trigger: 'manual',
              current_count: notifications.length,
              timestamp: new Date().toISOString()
            }
          })
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
        } finally {
          // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–∏–æ–¥ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          setIsManualRefreshing(false)
        }
      }
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const hasActiveFilters = selectedTypes.size > 0 || readFilter !== 'all'

  return (
    <div
      ref={panelRef}
      className={cn(
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞ –≤—Å—é –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å–∞–π–¥–±–∞—Ä–∞
        "fixed inset-y-0 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 shadow-lg z-30",
      )}
      // –ü–∞–Ω–µ–ª—å –±–µ–∑ –¥–µ–±–∞–≥-–∫–æ–ª–æ–Ω–∫–∏
      style={{ width: panelWidthPx, left: collapsed ? 80 : 256 }}
      onMouseMove={(e) => throttledSetPointerPosition({ x: e.clientX, y: e.clientY })}
      onMouseLeave={() => clearPointerPosition()}
    >
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏: header + scrollable list, full height */}
      <div className="flex h-full flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        <div className="p-4 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
              {(isRefreshingOnOpen || isManualRefreshing) ? "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π..." : "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"}
            </h3>
            <div className="flex items-center gap-2">
              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π */}
              {canManageAnnouncements && (
                <Button 
                  variant="ghost" 
                  size="icon" 
                  onClick={handleCreateAnnouncement}
                  className="h-6 w-6"
                  title="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
                >
                  <Megaphone className="h-4 w-4" />
                </Button>
              )}
              <Button
                variant="ghost"
                size="icon"
                onClick={handleRefresh}
                disabled={isLoading || isRefreshingOnOpen || isManualRefreshing}
                className="h-6 w-6"
              >
                <RefreshCw className={cn("h-4 w-4", (isLoading || isRefreshingOnOpen || isManualRefreshing) && "animate-spin")} />
              </Button>
              <Button variant="ghost" size="icon" onClick={handleClose} className="h-6 w-6">
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
          {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="mt-2 flex items-center gap-2">
            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∏–∫–æ–Ω–∫–∞-–º–µ–Ω—é) */}
            <Popover open={isReadFilterOpen} onOpenChange={setIsReadFilterOpen}>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  size="icon"
                  className={cn(
                    "relative h-8 w-8",
                    readFilter !== 'all' && "text-blue-600 border-blue-300 dark:text-blue-400"
                  )}
                  aria-label="–§–∏–ª—å—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                  title="–§–∏–ª—å—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                >
                  <SlidersHorizontal className="h-3.5 w-3.5" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-48 p-1" align="end">
                <div className="flex flex-col">
                  <Button
                    variant="ghost"
                    size="sm"
                    className={cn("justify-start gap-2", readFilter === 'all' && "bg-gray-100 dark:bg-gray-800")}
                    onClick={() => { setReadFilter('all'); setIsReadFilterOpen(false) }}
                  >
                    {readFilter === 'all' && <Check className="h-4 w-4" />} –í—Å–µ
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    className={cn("justify-start gap-2", readFilter === 'unread' && "bg-gray-100 dark:bg-gray-800")}
                    onClick={() => { setReadFilter('unread'); setIsReadFilterOpen(false) }}
                  >
                    {readFilter === 'unread' && <Check className="h-4 w-4" />} –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    className={cn("justify-start gap-2", readFilter === 'archived' && "bg-gray-100 dark:bg-gray-800")}
                    onClick={() => { setReadFilter('archived'); setIsReadFilterOpen(false) }}
                  >
                    {readFilter === 'archived' && <Check className="h-4 w-4" />} –ê—Ä—Ö–∏–≤
                  </Button>
                </div>
              </PopoverContent>
            </Popover>

            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º */}
            <Popover open={isTypeFilterOpen} onOpenChange={setIsTypeFilterOpen}>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  size="icon"
                  className="relative h-8 w-8"
                >
                  <Filter className="h-3.5 w-3.5" />
                  {/* –°—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ */}
                  {selectedTypes.size > 0 && (
                    <Badge 
                      variant="secondary" 
                      className="absolute -top-2 -right-2 h-5 w-5 p-0 text-xs flex items-center justify-center bg-blue-600 text-white"
                    >
                      {selectedTypes.size}
                    </Badge>
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-64 p-0" align="end">
                <div className="p-3">
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å–±—Ä–æ—Å–∞ */}
                  <div className="flex items-center justify-between mb-3">
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                      –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    </span>
                    {hasActiveFilters && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={handleClearFilters}
                        className="h-6 px-2 text-xs"
                      >
                        –°–±—Ä–æ—Å–∏—Ç—å
                      </Button>
                    )}
                  </div>
                  {/* –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ */}
                  <div className="space-y-2">
                    {NOTIFICATION_TYPES.map((type) => (
                      <div key={type.value} className="flex items-center space-x-2">
                        <Checkbox
                          id={type.value}
                          checked={selectedTypes.has(type.value)}
                          onCheckedChange={(checked) => 
                            handleTypeFilterChange(type.value, checked as boolean)
                          }
                        />
                        <label
                          htmlFor={type.value}
                          className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer flex-1"
                        >
                          {type.label}
                        </label>
                        <Badge 
                          variant="secondary" 
                          className={cn("text-xs", type.color)}
                        >
                          {isLoadingTypeCounts
                            ? '.'.repeat(loadingDots)
                            : (typeCounts[type.value] || 0)}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </div>
              </PopoverContent>
            </Popover>
          </div>
        </div>



        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∑–æ–Ω–∞: —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <div className="flex-1 flex overflow-hidden">
          <div ref={scrollRef} className="flex-1 overflow-y-auto">
            {(isLoading || isManualRefreshing) ? (
              <div className="flex items-center justify-center h-full">
                <Loader2 className="h-6 w-6 animate-spin text-gray-400" />
                <span className="ml-2 text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
              </div>
            ) : error ? (
              <div className="p-8 text-center text-red-500 dark:text-red-400">
                <p className="text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
                <p className="text-xs mt-1 text-gray-500">{error}</p>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleRefresh}
                  className="mt-3"
                >
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
              </div>
            ) : filteredNotifications.length === 0 ? (
              <div className="p-8 text-center text-gray-500 dark:text-gray-400">
                <p className="mb-4">
                  {hasActiveFilters ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" : "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"}
                </p>
                {hasActiveFilters && (
                  <div className="flex justify-center">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleClearFilters}
                      className="px-4"
                    >
                      {"–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"}
                    </Button>
                  </div>
                )}
              </div>
            ) : (
              <div className="p-2 space-y-2">
                {filteredNotifications.map((notification) => (
                  <NotificationItem
                    key={notification.id}
                    notification={notification}
                    onEditAnnouncement={handleEditAnnouncement}
                    onClosePanel={handleClose}
                  />
                ))}
                
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
                {isLoadingMore && (
                  <div className="flex items-center justify-center py-4">
                    <Loader2 className="h-5 w-5 animate-spin text-gray-400" />
                    <span className="ml-2 text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                  </div>
                )}
                
                {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã */}
                {!hasMore && filteredNotifications.length > 0 && (
                  <div className="text-center py-4 text-sm text-gray-500 dark:text-gray-400">
                    –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                  </div>
                )}
                {/* –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–∏–∑–∞ (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞) */}
                {hasMore && !isLoadingMore && (
                  <div className="flex justify-center py-2">
                    <Button variant="ghost" size="sm" onClick={loadMoreNotifications}>
                      –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë
                    </Button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π */}
      <Modal 
        isOpen={isAnnouncementFormOpen} 
        onClose={handleCloseAnnouncementForm} 
        size="lg"
        closeOnOverlayClick={true}
      >
        <Modal.Header 
          title={editingAnnouncement ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" : "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"} 
          onClose={handleCloseAnnouncementForm} 
        />
        <Modal.Body>
          <div onClick={(e) => e.stopPropagation()}>
            <AnnouncementForm 
              onClose={handleCloseAnnouncementForm}
              editingAnnouncement={editingAnnouncement}
            />
          </div>
        </Modal.Body>
      </Modal>
    </div>
  )
}
