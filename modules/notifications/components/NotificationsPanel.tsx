"use client"

import type React from "react"
import { useState, useEffect, useRef, useCallback } from "react"
import { cn } from "@/lib/utils"
import { useNotificationsStore } from "@/stores/useNotificationsStore"
import { NotificationItem } from "./NotificationItem"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { X, Search, Loader2, RefreshCw } from "lucide-react"

interface NotificationsPanelProps {
  onClose: () => void
  collapsed?: boolean
}

export function NotificationsPanel({ onClose, collapsed = false }: NotificationsPanelProps) {
  const [searchQuery, setSearchQuery] = useState("")
  const [visibleNotifications, setVisibleNotifications] = useState<Set<string>>(new Set())
  const [processedNotifications, setProcessedNotifications] = useState<Set<string>>(new Set())
  const panelRef = useRef<HTMLDivElement>(null)
  const scrollRef = useRef<HTMLDivElement>(null)
  const markAsReadRealtimeRef = useRef<((notificationId: string) => Promise<void>) | undefined>(undefined)

  const { 
    notifications, 
    isLoading, 
    error, 
    fetchNotifications, 
    markAsRead,
    markAsReadInDB,
    clearAll 
  } = useNotificationsStore()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const markNotificationAsReadRealtime = useCallback(async (notificationId: string) => {
    const notification = notifications.find(n => n.id === notificationId)
    if (notification && !notification.isRead) {
      console.log('üìñ –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:', notificationId)
      
      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
      markAsRead(notificationId)
      
      // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      try {
        await markAsReadInDB(notificationId)
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notificationId} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –≤ –ë–î:`, error)
      }
    }
  }, [notifications, markAsRead, markAsReadInDB])

  // –û–±–Ω–æ–≤–ª—è–µ–º ref –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
  markAsReadRealtimeRef.current = markNotificationAsReadRealtime

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
  const handleClose = useCallback(() => {
    console.log('üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setVisibleNotifications(new Set())
    setProcessedNotifications(new Set())
    onClose()
  }, [onClose])

  // Intersection Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    if (!scrollRef.current) return

    console.log('üëÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Intersection Observer –¥–ª—è', notifications.length, '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const notificationId = entry.target.getAttribute('data-notification-id')
          if (notificationId && entry.isIntersecting) {
            console.log(`üëÅÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} —Å—Ç–∞–ª–æ –≤–∏–¥–∏–º—ã–º`)
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–∏–º—ã–µ
            setVisibleNotifications(prev => new Set(prev).add(notificationId))
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            if (!processedNotifications.has(notificationId)) {
              const notification = notifications.find(n => n.id === notificationId)
              if (notification && !notification.isRead) {
                if (markAsReadRealtimeRef.current) {
                  markAsReadRealtimeRef.current(notificationId)
                }
                setProcessedNotifications(prev => new Set(prev).add(notificationId))
              }
            }
          }
        })
      },
      {
        root: scrollRef.current,
        threshold: 0.5 // –°—á–∏—Ç–∞–µ–º –≤–∏–¥–∏–º—ã–º, –∫–æ–≥–¥–∞ 50% —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∏–¥–Ω–æ
      }
    )

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationElements = scrollRef.current.querySelectorAll('[data-notification-id]')
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', notificationElements.length)
    notificationElements.forEach(element => observer.observe(element))

    return () => observer.disconnect()
  }, [notifications, processedNotifications])

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (panelRef.current && !panelRef.current.contains(event.target as Node)) {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –≤–Ω–µ –ø–∞–Ω–µ–ª–∏ - –∑–∞–∫—Ä—ã–≤–∞–µ–º')
        handleClose()
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [handleClose])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Escape
  useEffect(() => {
    function handleEscape(event: KeyboardEvent) {
      if (event.key === 'Escape') {
        console.log('‚å®Ô∏è –ù–∞–∂–∞—Ç–∞ Escape - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å')
        handleClose()
      }
    }

    document.addEventListener("keydown", handleEscape)
    return () => document.removeEventListener("keydown", handleEscape)
  }, [handleClose])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredNotifications = notifications
    .filter(
      (notification) =>
        notification.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        notification.message.toLowerCase().includes(searchQuery.toLowerCase()),
    )
    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const handleRefresh = async () => {
    await fetchNotifications()
  }

  return (
    <div
      ref={panelRef}
      className={cn(
        "absolute top-full mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50",
        collapsed ? "left-0 w-80" : "left-0 w-96",
      )}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
          –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </h3>
        <div className="flex items-center gap-2">
          <Button 
            variant="ghost" 
            size="icon" 
            onClick={handleRefresh}
            disabled={isLoading}
            className="h-6 w-6"
          >
            <RefreshCw className={cn("h-4 w-4", isLoading && "animate-spin")} />
          </Button>
          <Button variant="ghost" size="icon" onClick={handleClose} className="h-6 w-6">
            <X className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <div className="p-4 border-b border-gray-200 dark:border-gray-700">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="–ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      {notifications.length > 0 && (
        <div className="px-4 py-2 border-b border-gray-200 dark:border-gray-700">
          <div className="flex justify-between items-center">
            <span className="text-xs text-gray-500 dark:text-gray-400">
              –í—Å–µ–≥–æ: {filteredNotifications.length}
            </span>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <div ref={scrollRef} className="h-80 overflow-y-auto">
        {isLoading ? (
          <div className="flex items-center justify-center h-full">
            <Loader2 className="h-6 w-6 animate-spin text-gray-400" />
            <span className="ml-2 text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        ) : error ? (
          <div className="p-8 text-center text-red-500 dark:text-red-400">
            <p className="text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
            <p className="text-xs mt-1 text-gray-500">{error}</p>
            <Button
              variant="outline"
              size="sm"
              onClick={handleRefresh}
              className="mt-3"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        ) : filteredNotifications.length === 0 ? (
          <div className="p-8 text-center text-gray-500 dark:text-gray-400">
            {searchQuery ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" : "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"}
          </div>
        ) : (
          <div className="p-2 space-y-2">
            {filteredNotifications.map((notification) => (
              <NotificationItem 
                key={notification.id} 
                notification={notification} 
                isVisible={visibleNotifications.has(notification.id)}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
