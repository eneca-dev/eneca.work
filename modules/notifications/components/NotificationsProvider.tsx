"use client"

import { createContext, useContext, useEffect, ReactNode, useState, useCallback } from 'react'
import * as Sentry from "@sentry/nextjs"
import { createClient } from '@/utils/supabase/client'
import { useNotificationsStore } from '@/stores/useNotificationsStore'
import { useAnnouncements } from '@/modules/announcements/hooks/useAnnouncements'

interface NotificationsProviderProps {
  children: ReactNode
}

export function NotificationsProvider({ children }: NotificationsProviderProps) {
  const [mounted, setMounted] = useState(false)
  const {
    setCurrentUserId,
    fetchNotifications,
    initializeRealtime,
    unsubscribeFromNotifications,
    setModuleUpdateCallback,
    currentUserId,
  } = useNotificationsStore()

  // –•—É–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
  const { fetchAnnouncements } = useAnnouncements()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const updateModuleByEntityType = useCallback(async (entityType: string) => {
    return Sentry.startSpan(
      {
        op: "notifications.update_module",
        name: "Update Module By Entity Type",
      },
      async (span) => {
        try {
          span.setAttribute("entity.type", entityType)
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–∏–ø–∞:', entityType)
          
          switch (entityType) {
            case 'announcement':
            case 'announcements':
              span.setAttribute("module.name", "announcements")
              console.log('üì¢ –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª—å –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
              await fetchAnnouncements()
              span.setAttribute("update.success", true)
              break
            
            case 'assignment':
            case 'assignments':
              span.setAttribute("module.name", "assignments")
              console.log('üìã –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª—å –∑–∞–¥–∞–Ω–∏–π')
              // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∑–∞–¥–∞–Ω–∏–π
              // await fetchAssignments()
              span.setAttribute("update.skipped", true)
              span.setAttribute("update.skip_reason", "not_implemented")
              break
            
            case 'task':
            case 'tasks':
              span.setAttribute("module.name", "tasks")
              console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª—å –∑–∞–¥–∞—á')
              // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∑–∞–¥–∞—á
              // await fetchTasks()
              span.setAttribute("update.skipped", true)
              span.setAttribute("update.skip_reason", "not_implemented")
              break
            
            default:
              span.setAttribute("module.name", "unknown")
              span.setAttribute("update.skipped", true)
              span.setAttribute("update.skip_reason", "unknown_entity_type")
              console.log('‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', entityType)
              break
          }
          
          Sentry.addBreadcrumb({
            message: 'Module updated based on notification entity type',
            category: 'notifications',
            level: 'info',
            data: {
              entity_type: entityType
            }
          })
        } catch (error) {
          span.setAttribute("update.success", false)
          span.recordException(error as Error)
          Sentry.captureException(error, {
            tags: {
              module: 'notifications',
              component: 'NotificationsProvider',
              action: 'update_module',
              error_type: 'unexpected_error'
            },
            extra: {
              entity_type: entityType,
              timestamp: new Date().toISOString()
            }
          })
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è:', error)
        }
      }
    )
  }, [fetchAnnouncements]) // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
  useEffect(() => {
    setModuleUpdateCallback(updateModuleByEntityType)
    
    // –û—á–∏—â–∞–µ–º –∫–æ–ª–±—ç–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      setModuleUpdateCallback(null)
    }
  }, [setModuleUpdateCallback, updateModuleByEntityType])

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted || typeof window === 'undefined') return
    
    const supabase = createClient()
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getCurrentUser = async () => {
      return Sentry.startSpan(
        {
          op: "notifications.get_current_user",
          name: "Get Current User",
        },
        async (span) => {
          try {
            console.log('üîç NotificationsProvider: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
            const { data: { user }, error } = await supabase.auth.getUser()
            
            if (error) {
              span.setAttribute("auth.success", false)
              span.setAttribute("auth.error", error.message)
              Sentry.captureException(error, {
                tags: {
                  module: 'notifications',
                  component: 'NotificationsProvider',
                  action: 'get_current_user',
                  error_type: 'auth_error'
                },
                extra: {
                  timestamp: new Date().toISOString()
                }
              })
              console.error('‚ùå NotificationsProvider: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
              setCurrentUserId(null) // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
              return
            }
            
            if (user) {
              span.setAttribute("auth.success", true)
              span.setAttribute("user.id", user.id)
              span.setAttribute("user.found", true)
              
              console.log('üë§ NotificationsProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.id)
              setCurrentUserId(user.id)
              
              Sentry.addBreadcrumb({
                message: 'Current user retrieved successfully',
                category: 'notifications',
                level: 'info',
                data: {
                  user_id: user.id
                }
              })
            } else {
              span.setAttribute("auth.success", true)
              span.setAttribute("user.found", false)
              console.warn('‚ö†Ô∏è NotificationsProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
              setCurrentUserId(null) // –û—á–∏—â–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
            }
          } catch (error) {
            span.setAttribute("auth.success", false)
            span.recordException(error as Error)
            Sentry.captureException(error, {
              tags: {
                module: 'notifications',
                component: 'NotificationsProvider',
                action: 'get_current_user',
                error_type: 'unexpected_error'
              },
              extra: {
                timestamp: new Date().toISOString()
              }
            })
            console.error('‚ùå NotificationsProvider: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
            setCurrentUserId(null) // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
          }
        }
      )
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('üîÑ NotificationsProvider: Auth state change:', event, session?.user?.id)
      
      if (event === 'SIGNED_OUT') {
        console.log('üëã NotificationsProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª')
        setCurrentUserId(null)
      } else if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
        const userId = session?.user?.id || null
        console.log('üë§ NotificationsProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:', userId)
        setCurrentUserId(userId)
      } else if (event === 'USER_UPDATED') {
        const userId = session?.user?.id || null
        console.log('üîÑ NotificationsProvider: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', userId)
        setCurrentUserId(userId)
      }
    })

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    getCurrentUser()

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      subscription.unsubscribe()
    }
  }, [setCurrentUserId, mounted])

  useEffect(() => {
    if (!mounted || typeof window === 'undefined') return
    
    const initializeProvider = async () => {
      if (currentUserId) {
        console.log('üöÄ NotificationsProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserId)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        console.log('üì• NotificationsProvider: –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { debugUserNotifications, createTestNotification } = await import('../api/notifications')
        await debugUserNotifications(currentUserId)
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ: —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
        // await createTestNotification(currentUserId)
        
        fetchNotifications()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Realtime –ø–æ–¥–ø–∏—Å–∫—É
        console.log('üì° NotificationsProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Realtime...')
        initializeRealtime()
      } else {
        console.log('‚è≥ NotificationsProvider: currentUserId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        unsubscribeFromNotifications()
      }
    }

    initializeProvider()
  }, [currentUserId, fetchNotifications, initializeRealtime, unsubscribeFromNotifications, mounted])

  return <>{children}</>
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default NotificationsProvider 