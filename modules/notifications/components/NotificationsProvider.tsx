"use client"

import { createContext, useContext, useEffect, ReactNode, useState, useCallback } from 'react'
import { createClient } from '@/utils/supabase/client'
import { useNotificationsStore } from '@/stores/useNotificationsStore'
import { useAnnouncements } from '@/modules/announcements/hooks/useAnnouncements'

interface NotificationsProviderProps {
  children: ReactNode
}

export function NotificationsProvider({ children }: NotificationsProviderProps) {
  const [mounted, setMounted] = useState(false)
  const {
    setCurrentUserId,
    fetchNotifications,
    initializeRealtime,
    unsubscribeFromNotifications,
    setModuleUpdateCallback,
    currentUserId,
  } = useNotificationsStore()

  // –•—É–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
  const { fetchAnnouncements } = useAnnouncements()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const updateModuleByEntityType = useCallback(async (entityType: string) => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–∏–ø–∞:', entityType)
      
      switch (entityType) {
        case 'announcement':
        case 'announcements':
          console.log('üì¢ –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª—å –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
          await fetchAnnouncements()
          break
        
        case 'assignment':
        case 'assignments':
          console.log('üìã –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª—å –∑–∞–¥–∞–Ω–∏–π')
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∑–∞–¥–∞–Ω–∏–π
          // await fetchAssignments()
          break
        
        case 'task':
        case 'tasks':
          console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª—å –∑–∞–¥–∞—á')
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∑–∞–¥–∞—á
          // await fetchTasks()
          break
        
        default:
          console.log('‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', entityType)
          break
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è:', error)
    }
  }, [fetchAnnouncements]) // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
  useEffect(() => {
    setModuleUpdateCallback(updateModuleByEntityType)
    
    // –û—á–∏—â–∞–µ–º –∫–æ–ª–±—ç–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      setModuleUpdateCallback(null)
    }
  }, [setModuleUpdateCallback, updateModuleByEntityType])

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted || typeof window === 'undefined') return
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getCurrentUser = async () => {
      console.log('üîç NotificationsProvider: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()
      
      if (user) {
        console.log('üë§ NotificationsProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.id)
        setCurrentUserId(user.id)
      } else {
        console.warn('‚ö†Ô∏è NotificationsProvider: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
    }

    getCurrentUser()
  }, [setCurrentUserId, mounted])

  useEffect(() => {
    if (!mounted || typeof window === 'undefined') return
    
    const initializeProvider = async () => {
      if (currentUserId) {
        console.log('üöÄ NotificationsProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserId)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        console.log('üì• NotificationsProvider: –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { debugUserNotifications } = await import('../api/notifications')
        await debugUserNotifications(currentUserId)
        
        fetchNotifications()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Realtime –ø–æ–¥–ø–∏—Å–∫—É
        console.log('üì° NotificationsProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Realtime...')
        initializeRealtime()
      } else {
        console.log('‚è≥ NotificationsProvider: –û–∂–∏–¥–∞–Ω–∏–µ currentUserId...')
      }
    }

    initializeProvider()

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      unsubscribeFromNotifications()
    }
  }, [currentUserId, fetchNotifications, initializeRealtime, unsubscribeFromNotifications, mounted])

  return <>{children}</>
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default NotificationsProvider 