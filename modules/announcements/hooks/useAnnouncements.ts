import { useCallback } from 'react';
import { createClient } from '@/utils/supabase/client';
import { useAnnouncementsStore } from '@/modules/announcements/store';
import { Announcement, AnnouncementFormData } from '@/modules/announcements/types';
import { toast } from 'sonner';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const sendNotification = async (
  payload: {
    entityType: string;
    payload: Record<string, unknown>;
    userIds?: string[];
  },
  supabase: any
) => {
  try {
    console.log('üîî –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', payload);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session?.access_token) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', session.access_token.length);

    const requestData = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`,
      },
      body: JSON.stringify(payload),
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞:', 'https://gvrcbvifirhxxdnvrwlz.supabase.co/functions/v1/notifications');
    console.log('üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏:', requestData.headers);
    console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', requestData.body);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π fetch –≤–º–µ—Å—Ç–æ supabase.functions.invoke
    const response = await fetch('https://gvrcbvifirhxxdnvrwlz.supabase.co/functions/v1/notifications', requestData);
    
    console.log('üì® –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status, response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorText);
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', result);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    throw error;
  }
};

export function useAnnouncements() {
  const {
    announcements,
    setAnnouncements,
    addAnnouncement,
    updateAnnouncement,
    deleteAnnouncement,
    setLoading,
    setError,
  } = useAnnouncementsStore();

  const supabase = createClient();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏–º–µ–Ω–∞–º–∏ –∞–≤—Ç–æ—Ä–æ–≤
  const fetchAnnouncements = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const { data, error } = await supabase
        .from('announcements')
        .select(`
          *,
          profiles!announcements_created_by_fkey (
            first_name,
            last_name
          )
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–±—ä–µ–¥–∏–Ω—è—è –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞
      const announcementsWithAuthors = data?.map((announcement: any) => ({
        ...announcement,
        author_name: announcement.profiles
          ? [announcement.profiles.first_name, announcement.profiles.last_name]
              .filter(Boolean)
              .join(' ') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      })) || [];

      setAnnouncements(announcementsWithAuthors);
    } catch (error) {
      const message = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  }, [supabase, setAnnouncements, setLoading, setError]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const createAnnouncement = useCallback(async (announcementData: AnnouncementFormData, userId: string) => {
    try {
      setLoading(true);
      setError(null);

      const newAnnouncement = {
        ...announcementData,
        created_by: userId,
      };

      const { data, error } = await supabase
        .from('announcements')
        .insert([newAnnouncement])
        .select()
        .single();

      if (error) throw error;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const { data: userData, error: userError } = await supabase
        .from('profiles')
        .select('first_name, last_name')
        .eq('user_id', userId)
        .single();

      if (userError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      }

      const userName = userData
        ? [userData.first_name, userData.last_name].filter(Boolean).join(' ') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const { data: allUsers, error: usersError } = await supabase
        .from('profiles')
        .select('user_id')
        .neq('user_id', userId); // –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

      if (usersError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      }

      const userIds = allUsers?.map(user => user.user_id) || [];

             // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞)
       if (userIds.length > 0) {
         try {
           await sendNotification({
             entityType: 'announcement',
             payload: {
               title: announcementData.header,
               body: announcementData.text || '',
               user_name: userName,
               announcement_id: data.id, // –î–æ–±–∞–≤–ª—è–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
               action: {
                 type: 'navigate',
                 url: '/dashboard',
                 data: { announcementId: data.id }
               }
             },
             userIds: userIds,
           }, supabase);
         } catch (notificationError) {
           console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationError);
           // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
         }
       }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      await fetchAnnouncements();
      toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return data;
    } catch (error) {
      const message = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è';
      setError(message);
      toast.error(message);
      throw error;
    } finally {
      setLoading(false);
    }
  }, [supabase, fetchAnnouncements, setLoading, setError]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const editAnnouncement = useCallback(async (id: string, announcementData: Partial<AnnouncementFormData>) => {
    try {
      setLoading(true);
      setError(null);

      const { data, error } = await supabase
        .from('announcements')
        .update(announcementData)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await fetchAnnouncements();
      toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return data;
    } catch (error) {
      const message = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è';
      setError(message);
      toast.error(message);
      throw error;
    } finally {
      setLoading(false);
    }
  }, [supabase, fetchAnnouncements, setLoading, setError]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const removeAnnouncement = useCallback(async (id: string) => {
    try {
      setLoading(true);
      setError(null);

      const { error } = await supabase
        .from('announcements')
        .delete()
        .eq('id', id);

      if (error) throw error;

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      await fetchAnnouncements();
      toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      const message = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è';
      setError(message);
      toast.error(message);
      throw error;
    } finally {
      setLoading(false);
    }
  }, [supabase, fetchAnnouncements, setLoading, setError]);

  return {
    announcements,
    fetchAnnouncements,
    createAnnouncement,
    editAnnouncement,
    removeAnnouncement,
  };
} 